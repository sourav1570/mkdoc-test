{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"\ud83e\udd16 Humanoid Ai","text":""},{"location":"index.html#setting-up-ragdoll","title":"\ud83e\udd16 Setting Up Ragdoll","text":"<p>The AI provided in the kit is really cool, and you should learn how to create your own AI system.Hello Sourav</p>"},{"location":"index.html#getting-started","title":"Getting Started","text":"<p>This section is essential. Tutorials For AI</p>"},{"location":"index.html#emergency-cover","title":"Emergency Cover","text":"<p>This section is about emergency behavior.</p> <p></p>"},{"location":"index.html#combat-covers","title":"Combat Covers","text":"<p>This section is about combat behavior. Great</p>"},{"location":"index.html#emergency-covers","title":"Emergency Covers","text":""},{"location":"AIEmergencyState_AIFleeingBehaviour_Part4.html","title":"Emergency State(Fleeing Behaviour) Part-4","text":""},{"location":"AIEmergencyState_AIFleeingBehaviour_Part4.html#introduction","title":"Introduction","text":"<p>This is the Part-4 of AI Emergency State and in this part you will learn about how the AI react in emergency state and perform 'Flee behaviour' when there are no covers around him to take.</p>"},{"location":"AIEmergencyState_AIFleeingBehaviour_Part4.html#enable-emergency-alert","title":"Enable Emergency Alert","text":"<p>To enable emergency alert behaviour on AI agent you need to check the checkbox 'Enable Emergency Alerts' and enabling this checkbox will show the paragraph below called 'AI Emergency State'.</p> <p></p>"},{"location":"AIEmergencyState_AIFleeingBehaviour_Part4.html#ai-emergency-state","title":"AI Emergency State","text":"<p>This paragraph is responsible for Ai agent behaviour in life threatening situations where he cannot detect the source of the threat and takes several measures to save his life and locate the threat. Most common emergency state triggering situations are when Ai agent will hear bullet impacts near him or will hear dying sound of friendly Ai agent or when he will see another friendly Ai agent in emergency state.All those conditions will result in Emergency behaviour that Ai agent will execute in a various forms depending on two major conditions.When Ai agent gets into Emergency state he will be provided with the coordinate of the supposed enemy position. After that Navmesh path is calculated towards this coordinate.If navmesh path is complete then Ai agent will hide behind available emergency covers for specified time and when this hiding time is expired then Ai agent will advance between emergency covers towards supposed enemy position.If there are no more available emergency covers left for Ai agent on his way to supposed enemy position then Ai agent will start run in a zigzag pattern towards those coordinates to increase survival chances.If navmesh path is incomplete towards supposed enemy position(i.e if supposed enemy coordinate is on the roof of a different building or on the other side of the river etc.) then Ai agent will perform Emergency hiding and shooting in a general direction of the supposed enemy position.This behaviour can be set up that way so that Ai agent could switch emergency covers or stay at the first occupied emergency cover without ever leaving it.</p> <p></p> Fields Info Emergency Cover Finder Component Drag and drop Emergency covers finder game object with 'Find Emergency Covers' script attached to it from this Ai agent's hierarchy. Emergency Alert Radius Component Drag and drop Emergency covers finder game object with 'Emergency Alert Radius' script attached to it from this Ai agent's hierarchy. Choose Closest Emergency Covers In case this checkbox is active then Ai agent will find closest emergency covers during emergency state. Min Range To Find Emergency Cover Specifies the minimum emergency covers detection radius. Max Range To Find Emergency Cover Specifies the maximum emergency covers detection radius. Min Time Behind Emergency Cover Minimum time to hide behind emergency cover before beginning but not during advancing towards supposed enemy position. Max Time Behind Emergency Cover Maximum time to hide behind emergency cover before beginning but not during advancing towards supposed enemy position. Min Emergency Cover Occupation Distance Minimal Emergency Cover occupation distance reaching which Ai agent will stop moving towards it and start hiding behaviour. Max Emergency Cover Occupation Distance Maximum Emergency Cover occupation distance reaching which Ai agent will stop moving towards it and start hiding behaviour. Min Emergency Alert Radius Activation Delay Minimum amount in seconds of Ai agent's Emergency Alert Radius Trigger Activation delay. Max Emergency Alert Radius Activation Delay Maximum amount in seconds of Ai agent's Emergency Alert Radius Trigger Activation delay. Pose Transition Duration The duration, in seconds, it takes for the AI agent to rotate and focus on emergency cover or shooting points during emergency state. A lower value indicates a faster rotation, while a higher value results in a slower rotation. Post First Emergency Cover Behaviour Activity Select any of the options from this drop down list that contains various behaviours for Ai agent to perform after expiration of the initial Emergency cover occupation timer. Ai Fleeing Behaviour This Subsection regulates the parameters of fleeing behaviour when Ai agent sprints away from danger zone when find himself in the emergency situation. Advancing Between Covers Fields of this subsection are regulating various aspects of Ai agent's advancing between covers towards enemy supposed coordinates. ZigZag Advancing This subsection sets the coordinate for the final destination of zigzag sprinting and regulates the amplitude of the zigzag sprinting pattern. Emergency Shooting This subsection regulates various aspects of Emergency Shooting behaviour which if activated will make Ai agent to fire his weapon in general direction of the enemy situated outside of enemy detection parameters of this Ai agent."},{"location":"AIEmergencyState_AIFleeingBehaviour_Part4.html#ai-fleeing-behaviour-paragraph","title":"AI Fleeing Behaviour Paragraph","text":"<p>This Subsection regulates the parameters of fleeing behaviour when Ai agent sprints away from danger zone when find himself in the emergency situation.</p> <p></p> Fields Info Flee Destinations Set of points with their respective names matching their general flee directions (left, right, backward) and tweakable parametric Min/Max radius is provided for Ai agent in this subsection. Note that if Min / Max radius values are high enough then Ai agent will be able to flee to what appears as an opposite direction of chosen flee point. For example with radius value of the left flee point being bigger than the separation distance of left flee point from Ai agent will result in possibility for Ai agent to flee to the right even though left point is situated to the actual left side of the Ai agent. This is very flexible fleeing behaviour construct that allow users to achieve great deal of customisation. You can get away even with one Flee point that is located right at the origin of Ai agent and has very small value for minimal radius and very big value for maximum radius. Thus allowing Ai agent to flee in any direction or distance within 360 degrees angle. Min Flee Duration Minimum duration in seconds for Ai Agent to keep sprinting away in case no emergency cover is available to Ai agent at the beginning of Emergency State. Max Flee Duration Maximum duration in seconds for Ai Agent to keep sprinting away in case no emergency cover is available to Ai agent at the beginning of Emergency State. Min Emergency Sprint Away Radius Minimal Emergency sprint coordinate value for Ai agent to sprint towards if no Emergency cover is found at the beginning of Emergency state. Max Emergency Sprint Away Radius Maximum Emergency sprint coordinate value for Ai agent to sprint towards if no Emergency cover is found at the beginning of Emergency state. Min Time To Decide Shoot Or Flee Away Minimum time required to decide whether to flee or continue shooting. Max Time To Decide Shoot Or Flee Away Maximum time required to decide whether to flee or continue shooting. Flee Away Probability Sets the probability of Shooting and Flee away during emergency state."},{"location":"AIEmergencyState_AdvancingBetweenCovers_Part2.html","title":"Emergency State(Advancing Between Covers) Part-2","text":""},{"location":"AIEmergencyState_AdvancingBetweenCovers_Part2.html#introduction","title":"Introduction","text":"<p>This is the Part-2 of AI Emergency State and in this part you will learn about how the AI react in emergency state and perform 'Advancing between the covers' and than perform 'Zig Zag Advancing' towards the enemy supposed postion.</p>"},{"location":"AIEmergencyState_AdvancingBetweenCovers_Part2.html#enable-emergency-alert","title":"Enable Emergency Alert","text":"<p>To enable emergency alert behaviour on AI agent you need to check the checkbox 'Enable Emergency Alerts' and enabling this checkbox will show the paragraph below called 'AI Emergency State'.</p> <p></p>"},{"location":"AIEmergencyState_AdvancingBetweenCovers_Part2.html#ai-emergency-state","title":"AI Emergency State","text":"<p>This paragraph is responsible for Ai agent behaviour in life threatening situations where he cannot detect the source of the threat and takes several measures to save his life and locate the threat. Most common emergency state triggering situations are when Ai agent will hear bullet impacts near him or will hear dying sound of friendly Ai agent or when he will see another friendly Ai agent in emergency state.All those conditions will result in Emergency behaviour that Ai agent will execute in a various forms depending on two major conditions.When Ai agent gets into Emergency state he will be provided with the coordinate of the supposed enemy position. After that Navmesh path is calculated towards this coordinate.If navmesh path is complete then Ai agent will hide behind available emergency covers for specified time and when this hiding time is expired then Ai agent will advance between emergency covers towards supposed enemy position.If there are no more available emergency covers left for Ai agent on his way to supposed enemy position then Ai agent will start run in a zigzag pattern towards those coordinates to increase survival chances.If navmesh path is incomplete towards supposed enemy position(i.e if supposed enemy coordinate is on the roof of a different building or on the other side of the river etc.) then Ai agent will perform Emergency hiding and shooting in a general direction of the supposed enemy position.This behaviour can be set up that way so that Ai agent could switch emergency covers or stay at the first occupied emergency cover without ever leaving it.</p> <p></p> Fields Info Emergency Cover Finder Component Drag and drop Emergency covers finder game object with 'Find Emergency Covers' script attached to it from this Ai agent's hierarchy. Emergency Alert Radius Component Drag and drop Emergency covers finder game object with 'Emergency Alert Radius' script attached to it from this Ai agent's hierarchy. Choose Closest Emergency Covers In case this checkbox is active then Ai agent will find closest emergency covers during emergency state. Min Range To Find Emergency Cover Specifies the minimum emergency covers detection radius. Max Range To Find Emergency Cover Specifies the maximum emergency covers detection radius. Min Time Behind Emergency Cover Minimum time to hide behind emergency cover before beginning but not during advancing towards supposed enemy position. Max Time Behind Emergency Cover Maximum time to hide behind emergency cover before beginning but not during advancing towards supposed enemy position. Min Emergency Cover Occupation Distance Minimal Emergency Cover occupation distance reaching which Ai agent will stop moving towards it and start hiding behaviour. Max Emergency Cover Occupation Distance Maximum Emergency Cover occupation distance reaching which Ai agent will stop moving towards it and start hiding behaviour. Min Emergency Alert Radius Activation Delay Minimum amount in seconds of Ai agent's Emergency Alert Radius Trigger Activation delay. Max Emergency Alert Radius Activation Delay Maximum amount in seconds of Ai agent's Emergency Alert Radius Trigger Activation delay. Pose Transition Duration The duration, in seconds, it takes for the AI agent to rotate and focus on emergency cover or shooting points during emergency state. A lower value indicates a faster rotation, while a higher value results in a slower rotation. Post First Emergency Cover Behaviour Activity Select any of the options from this drop down list that contains various behaviours for Ai agent to perform after expiration of the initial Emergency cover occupation timer. Ai Fleeing Behaviour This Subsection regulates the parameters of fleeing behaviour when Ai agent sprints away from danger zone when find himself in the emergency situation. Advancing Between Covers Fields of this subsection are regulating various aspects of Ai agent's advancing between covers towards enemy supposed coordinates. ZigZag Advancing This subsection sets the coordinate for the final destination of zigzag sprinting and regulates the amplitude of the zigzag sprinting pattern. Emergency Shooting This subsection regulates various aspects of Emergency Shooting behaviour which if activated will make Ai agent to fire his weapon in general direction of the enemy situated outside of enemy detection parameters of this Ai agent."},{"location":"AIEmergencyState_AdvancingBetweenCovers_Part2.html#advancing-between-the-covers-paragraph","title":"Advancing Between The Covers Paragraph","text":"<p>Fields of this subsection are regulating various aspects of Ai agent's advancing between covers towards enemy supposed coordinates.</p> <p></p> Fields Info Min Emergency Advancing Covers Minimum amount of covers for Ai Agent to use on his way towards enemy supposed position coordinate. Max Emergency Advancing Covers Maximum amount of covers for Ai Agent to use on his way towards enemy supposed position coordinate. Min Distance Towards Next Cover Minimal viable distance to next emergency cover for Ai agent to be able to occupy on his way towards enemy supposed position. Max Distance Towards Next Cover Maximum viable distance to next emergency cover for Ai agent to be able to occupy on his way towards enemy supposed position. Min Time to Rest Behind Covers Minimum time spent behind each next Emergency Cover on the way to enemy supposed position. Max Time to Rest Behind Covers Maximum time spent behind each next Emergency Cover on the way to enemy supposed position."},{"location":"AIEmergencyState_AdvancingBetweenCovers_Part2.html#create-emergency-covers","title":"Create Emergency Covers","text":"<p>First you need to select the 'Covers' that we created in the previous part of 'AI Covers' and than duplicate all 'Cover Points - 1,2,3,4' and rename it to 'Emergency Cover Point - 1,2,3,4'.After this select all the 4 Emergency Cover Point and remove the component 'Cover Node' and Add the component 'Emergency Cover Node'. Choose the Emegency Cover Type based on the cover for example - If it is a Crouch cover than choose 'Crouch Emergency Cover' and in case Stand cover than choose 'Stand Emergency Cover'.</p>"},{"location":"AIEmergencyState_AdvancingBetweenCovers_Part2.html#emergency-cover-node","title":"Emergency Cover Node","text":"<p>Emergency Cover is designed for the non combat cover behaviour. For example  when Ai agents are under the threat but can not detect and locate the attackers which is required for them to enter the combat state.In this case they will sprint towards emergency cover and will hide there for some specified amount of time before moving out towards supposed enemy position by performing movement between emergency covers and sprinting in a zigzag pattern to increase their survival chances. </p>"},{"location":"AIEmergencyState_EmergencyShooting_Part3.html","title":"Emergency State(Emergency Shooting) Part-3","text":""},{"location":"AIEmergencyState_EmergencyShooting_Part3.html#introduction","title":"Introduction","text":"<p>This is the Part-3 of AI Emergency State and in this part you will learn about how the AI react in emergency state and perform 'Emergency Shooting' in the enemy supposed direction.</p>"},{"location":"AIEmergencyState_EmergencyShooting_Part3.html#enable-emergency-alert","title":"Enable Emergency Alert","text":"<p>To enable emergency alert behaviour on AI agent you need to check the checkbox 'Enable Emergency Alerts' and enabling this checkbox will show the paragraph below called 'AI Emergency State'.</p> <p></p>"},{"location":"AIEmergencyState_EmergencyShooting_Part3.html#ai-emergency-state","title":"AI Emergency State","text":"<p>This paragraph is responsible for Ai agent behaviour in life threatening situations where he cannot detect the source of the threat and takes several measures to save his life and locate the threat. Most common emergency state triggering situations are when Ai agent will hear bullet impacts near him or will hear dying sound of friendly Ai agent or when he will see another friendly Ai agent in emergency state.All those conditions will result in Emergency behaviour that Ai agent will execute in a various forms depending on two major conditions.When Ai agent gets into Emergency state he will be provided with the coordinate of the supposed enemy position. After that Navmesh path is calculated towards this coordinate.If navmesh path is complete then Ai agent will hide behind available emergency covers for specified time and when this hiding time is expired then Ai agent will advance between emergency covers towards supposed enemy position.If there are no more available emergency covers left for Ai agent on his way to supposed enemy position then Ai agent will start run in a zigzag pattern towards those coordinates to increase survival chances.If navmesh path is incomplete towards supposed enemy position(i.e if supposed enemy coordinate is on the roof of a different building or on the other side of the river etc.) then Ai agent will perform Emergency hiding and shooting in a general direction of the supposed enemy position.This behaviour can be set up that way so that Ai agent could switch emergency covers or stay at the first occupied emergency cover without ever leaving it.</p> <p></p> Fields Info Emergency Cover Finder Component Drag and drop Emergency covers finder game object with 'Find Emergency Covers' script attached to it from this Ai agent's hierarchy. Emergency Alert Radius Component Drag and drop Emergency covers finder game object with 'Emergency Alert Radius' script attached to it from this Ai agent's hierarchy. Choose Closest Emergency Covers In case this checkbox is active then Ai agent will find closest emergency covers during emergency state. Min Range To Find Emergency Cover Specifies the minimum emergency covers detection radius. Max Range To Find Emergency Cover Specifies the maximum emergency covers detection radius. Min Time Behind Emergency Cover Minimum time to hide behind emergency cover before beginning but not during advancing towards supposed enemy position. Max Time Behind Emergency Cover Maximum time to hide behind emergency cover before beginning but not during advancing towards supposed enemy position. Min Emergency Cover Occupation Distance Minimal Emergency Cover occupation distance reaching which Ai agent will stop moving towards it and start hiding behaviour. Max Emergency Cover Occupation Distance Maximum Emergency Cover occupation distance reaching which Ai agent will stop moving towards it and start hiding behaviour. Min Emergency Alert Radius Activation Delay Minimum amount in seconds of Ai agent's Emergency Alert Radius Trigger Activation delay. Max Emergency Alert Radius Activation Delay Maximum amount in seconds of Ai agent's Emergency Alert Radius Trigger Activation delay. Pose Transition Duration The duration, in seconds, it takes for the AI agent to rotate and focus on emergency cover or shooting points during emergency state. A lower value indicates a faster rotation, while a higher value results in a slower rotation. Post First Emergency Cover Behaviour Activity Select any of the options from this drop down list that contains various behaviours for Ai agent to perform after expiration of the initial Emergency cover occupation timer. Ai Fleeing Behaviour This Subsection regulates the parameters of fleeing behaviour when Ai agent sprints away from danger zone when find himself in the emergency situation. Advancing Between Covers Fields of this subsection are regulating various aspects of Ai agent's advancing between covers towards enemy supposed coordinates. ZigZag Advancing This subsection sets the coordinate for the final destination of zigzag sprinting and regulates the amplitude of the zigzag sprinting pattern. Emergency Shooting This subsection regulates various aspects of Emergency Shooting behaviour which if activated will make Ai agent to fire his weapon in general direction of the enemy situated outside of enemy detection parameters of this Ai agent."},{"location":"AIEmergencyState_EmergencyShooting_Part3.html#emergency-shooting-paragraph","title":"Emergency Shooting Paragraph","text":"<p>This subsection regulates various aspects of Emergency Shooting behaviour which if activated will make Ai agent to fire his weapon in general direction of the enemy situated outside of enemy detection parameters of this Ai agent.</p> <p></p> Fields Info Min Emergency Shooting Offset Minimal horizontal and Vertical targeting offset values. Max Emergency Shooting Offset Maximum horizontal and Vertical targeting offset values. Min Time Between Target Offset Points Minimum amount of time to create new target offset point for Ai agent to shoot at. Max Time Between Target Offset Points Maximum amount of time to create new target offset point for Ai agent to shoot at. Min Emergency Cover Loop Or Switch Time Minimum Time to either switch back to the same/previous emergency cover Or take a new one. Max Emergency Cover Loop Or Switch Time Maximum Time to either switch back to the same/previous emergency cover Or take a new one. Min Time To Emergency Shooting Minimum Time to keep shooting after occupying the emergency open fire point. Max Time To Emergency Shooting Maximum Time to keep shooting after occupying the emergency open fire point. Emergency Cover Switching Probability Sets the probability of switching emergency covers in case navmesh path to enemy supposed position is incomplete and there are more than one emergency covers available. Min Vacant Emergency Cover Check Interval Sets the interval between checks for vacant Emergency covers for Ai agent that found all detected Emergency Covers to be occupied by his friendlies. The smaller the value in this field will be the faster uncovered Ai agent will be able to occupy Emergency Covers that became vacant. Max Vacant Emergency Cover Check Interval Sets the interval between checks for vacant Emergency covers for Ai agent that found all detected Emergency Covers to be occupied by his friendlies. The smaller the value in this field will be the faster uncovered Ai agent will be able to occupy Emergency Covers that became vacant."},{"location":"AIEmergencyState_EmergencyShooting_Part3.html#create-emergency-covers","title":"Create Emergency Covers","text":"<p>First you need to select the 'Covers' that we created in the previous part of 'AI Covers' and than duplicate all 'Cover Points - 1,2,3,4' and rename it to 'Emergency Cover Point - 1,2,3,4'.After this select all the 4 Emergency Cover Point and remove the component 'Cover Node' and Add the component 'Emergency Cover Node'. Choose the Emegency Cover Type based on the cover for example - If it is a Crouch cover than choose 'Crouch Emergency Cover' and in case Stand cover than choose 'Stand Emergency Cover'.</p>"},{"location":"AIEmergencyState_EmergencyShooting_Part3.html#emergency-cover-node","title":"Emergency Cover Node","text":"<p>Emergency Cover is designed for the non combat cover behaviour. For example  when Ai agents are under the threat but can not detect and locate the attackers which is required for them to enter the combat state.In this case they will sprint towards emergency cover and will hide there for some specified amount of time before moving out towards supposed enemy position by performing movement between emergency covers and sprinting in a zigzag pattern to increase their survival chances. </p>"},{"location":"AIEmergencyState_EmergencyShooting_Part3.html#create-emergency-shooting-points","title":"Create Emergency Shooting Points","text":"<p>To create the emergency shooting point you need to select a cover assembly and there create a empty gameObject and rename it to 'Emergency Shooting Point 1' and place it however you want. After this select the Emergency Cover Point and drag and drop this 'Emergency Shooting Point 1' in the 'Emergency Cover Shooting Points' Field. Your setup and cover assembly will look like this [See the image below]</p> <p></p> <p></p>"},{"location":"AIEmergencyState_FriendlyChainReaction_Part5.html","title":"Emergency State(Friendly Chain Reaction) Part-5","text":""},{"location":"AIEmergencyState_FriendlyChainReaction_Part5.html#introduction","title":"Introduction","text":"<p>This is the Part-5 of AI Emergency State and in this part you will learn about how the AI share the emergency state with his friendly AI agents.</p>"},{"location":"AIEmergencyState_FriendlyChainReaction_Part5.html#enable-emergency-alert","title":"Enable Emergency Alert","text":"<p>To enable emergency alert behaviour on AI agent you need to check the checkbox 'Enable Emergency Alerts' and enabling this checkbox will show the paragraph below called 'AI Emergency State'.</p> <p></p>"},{"location":"AIEmergencyState_FriendlyChainReaction_Part5.html#ai-emergency-state","title":"AI Emergency State","text":"<p>This paragraph is responsible for Ai agent behaviour in life threatening situations where he cannot detect the source of the threat and takes several measures to save his life and locate the threat. Most common emergency state triggering situations are when Ai agent will hear bullet impacts near him or will hear dying sound of friendly Ai agent or when he will see another friendly Ai agent in emergency state.All those conditions will result in Emergency behaviour that Ai agent will execute in a various forms depending on two major conditions.When Ai agent gets into Emergency state he will be provided with the coordinate of the supposed enemy position. After that Navmesh path is calculated towards this coordinate.If navmesh path is complete then Ai agent will hide behind available emergency covers for specified time and when this hiding time is expired then Ai agent will advance between emergency covers towards supposed enemy position.If there are no more available emergency covers left for Ai agent on his way to supposed enemy position then Ai agent will start run in a zigzag pattern towards those coordinates to increase survival chances.If navmesh path is incomplete towards supposed enemy position(i.e if supposed enemy coordinate is on the roof of a different building or on the other side of the river etc.) then Ai agent will perform Emergency hiding and shooting in a general direction of the supposed enemy position.This behaviour can be set up that way so that Ai agent could switch emergency covers or stay at the first occupied emergency cover without ever leaving it.</p> <p></p> Fields Info Emergency Cover Finder Component Drag and drop Emergency covers finder game object with 'Find Emergency Covers' script attached to it from this Ai agent's hierarchy. Emergency Alert Radius Component Drag and drop Emergency covers finder game object with 'Emergency Alert Radius' script attached to it from this Ai agent's hierarchy. Choose Closest Emergency Covers In case this checkbox is active then Ai agent will find closest emergency covers during emergency state. Min Range To Find Emergency Cover Specifies the minimum emergency covers detection radius. Max Range To Find Emergency Cover Specifies the maximum emergency covers detection radius. Min Time Behind Emergency Cover Minimum time to hide behind emergency cover before beginning but not during advancing towards supposed enemy position. Max Time Behind Emergency Cover Maximum time to hide behind emergency cover before beginning but not during advancing towards supposed enemy position. Min Emergency Cover Occupation Distance Minimal Emergency Cover occupation distance reaching which Ai agent will stop moving towards it and start hiding behaviour. Max Emergency Cover Occupation Distance Maximum Emergency Cover occupation distance reaching which Ai agent will stop moving towards it and start hiding behaviour. Min Emergency Alert Radius Activation Delay Minimum amount in seconds of Ai agent's Emergency Alert Radius Trigger Activation delay. Max Emergency Alert Radius Activation Delay Maximum amount in seconds of Ai agent's Emergency Alert Radius Trigger Activation delay. Pose Transition Duration The duration, in seconds, it takes for the AI agent to rotate and focus on emergency cover or shooting points during emergency state. A lower value indicates a faster rotation, while a higher value results in a slower rotation. Post First Emergency Cover Behaviour Activity Select any of the options from this drop down list that contains various behaviours for Ai agent to perform after expiration of the initial Emergency cover occupation timer. Ai Fleeing Behaviour This Subsection regulates the parameters of fleeing behaviour when Ai agent sprints away from danger zone when find himself in the emergency situation. Advancing Between Covers Fields of this subsection are regulating various aspects of Ai agent's advancing between covers towards enemy supposed coordinates. ZigZag Advancing This subsection sets the coordinate for the final destination of zigzag sprinting and regulates the amplitude of the zigzag sprinting pattern. Emergency Shooting This subsection regulates various aspects of Emergency Shooting behaviour which if activated will make Ai agent to fire his weapon in general direction of the enemy situated outside of enemy detection parameters of this Ai agent."},{"location":"AIEmergencyState_FriendlyChainReaction_Part5.html#ai-emergency-alert-radius","title":"AI Emergency Alert Radius","text":"<p>This script  activates emergency alert trigger on  the Ai agent at the moment it sees  dying friendly or get into emergency state by any other reason for example due to blood effects or impact effects or hears dying sound and starts sprinting towards the nearby random safe point or the emergency cover point to get into safety.And as he does that, he sends message to other Ai agents who will happen to be within his emergency alert trigger, to activate their own emergency alert triggers and inherit his state.Activation of emergency alert trigger on some AI agents will cause similar activation on other Ai agents who will happen to be within activated triggers which will result chain reaction effect for all affected agents.</p> <p></p> Fields Info Display AI Agents Display and add friendly AI agents who are within emergency state."},{"location":"AIEmergencyState_FriendlyDeath%26PavementEffectEmergency_Part6.html","title":"Emergency State(FriendlyDeath&amp;PavementEffectEmergency) Part-6","text":""},{"location":"AIEmergencyState_FriendlyDeath%26PavementEffectEmergency_Part6.html#introduction","title":"Introduction","text":"<p>This is the Part-6 of AI Emergency State and in this part you will learn about how the AI get into emergency state when his friendly AI agent dies near him as well as when player misses the shot and spawn pavement impact effect around AI agent.</p>"},{"location":"AIEmergencyState_FriendlyDeath%26PavementEffectEmergency_Part6.html#enable-emergency-alert","title":"Enable Emergency Alert","text":"<p>To enable emergency alert behaviour on AI agent you need to check the checkbox 'Enable Emergency Alerts' and enabling this checkbox will show the paragraph below called 'AI Emergency State'.</p> <p></p>"},{"location":"AIEmergencyState_FriendlyDeath%26PavementEffectEmergency_Part6.html#ai-emergency-state","title":"AI Emergency State","text":"<p>This paragraph is responsible for Ai agent behaviour in life threatening situations where he cannot detect the source of the threat and takes several measures to save his life and locate the threat. Most common emergency state triggering situations are when Ai agent will hear bullet impacts near him or will hear dying sound of friendly Ai agent or when he will see another friendly Ai agent in emergency state.All those conditions will result in Emergency behaviour that Ai agent will execute in a various forms depending on two major conditions.When Ai agent gets into Emergency state he will be provided with the coordinate of the supposed enemy position. After that Navmesh path is calculated towards this coordinate.If navmesh path is complete then Ai agent will hide behind available emergency covers for specified time and when this hiding time is expired then Ai agent will advance between emergency covers towards supposed enemy position.If there are no more available emergency covers left for Ai agent on his way to supposed enemy position then Ai agent will start run in a zigzag pattern towards those coordinates to increase survival chances.If navmesh path is incomplete towards supposed enemy position(i.e if supposed enemy coordinate is on the roof of a different building or on the other side of the river etc.) then Ai agent will perform Emergency hiding and shooting in a general direction of the supposed enemy position.This behaviour can be set up that way so that Ai agent could switch emergency covers or stay at the first occupied emergency cover without ever leaving it.</p> <p></p> Fields Info Emergency Cover Finder Component Drag and drop Emergency covers finder game object with 'Find Emergency Covers' script attached to it from this Ai agent's hierarchy. Emergency Alert Radius Component Drag and drop Emergency covers finder game object with 'Emergency Alert Radius' script attached to it from this Ai agent's hierarchy. Choose Closest Emergency Covers In case this checkbox is active then Ai agent will find closest emergency covers during emergency state. Min Range To Find Emergency Cover Specifies the minimum emergency covers detection radius. Max Range To Find Emergency Cover Specifies the maximum emergency covers detection radius. Min Time Behind Emergency Cover Minimum time to hide behind emergency cover before beginning but not during advancing towards supposed enemy position. Max Time Behind Emergency Cover Maximum time to hide behind emergency cover before beginning but not during advancing towards supposed enemy position. Min Emergency Cover Occupation Distance Minimal Emergency Cover occupation distance reaching which Ai agent will stop moving towards it and start hiding behaviour. Max Emergency Cover Occupation Distance Maximum Emergency Cover occupation distance reaching which Ai agent will stop moving towards it and start hiding behaviour. Min Emergency Alert Radius Activation Delay Minimum amount in seconds of Ai agent's Emergency Alert Radius Trigger Activation delay. Max Emergency Alert Radius Activation Delay Maximum amount in seconds of Ai agent's Emergency Alert Radius Trigger Activation delay. Pose Transition Duration The duration, in seconds, it takes for the AI agent to rotate and focus on emergency cover or shooting points during emergency state. A lower value indicates a faster rotation, while a higher value results in a slower rotation. Post First Emergency Cover Behaviour Activity Select any of the options from this drop down list that contains various behaviours for Ai agent to perform after expiration of the initial Emergency cover occupation timer. Ai Fleeing Behaviour This Subsection regulates the parameters of fleeing behaviour when Ai agent sprints away from danger zone when find himself in the emergency situation. Advancing Between Covers Fields of this subsection are regulating various aspects of Ai agent's advancing between covers towards enemy supposed coordinates. ZigZag Advancing This subsection sets the coordinate for the final destination of zigzag sprinting and regulates the amplitude of the zigzag sprinting pattern. Emergency Shooting This subsection regulates various aspects of Emergency Shooting behaviour which if activated will make Ai agent to fire his weapon in general direction of the enemy situated outside of enemy detection parameters of this Ai agent."},{"location":"AIEmergencyState_FriendlyDeath%26PavementEffectEmergency_Part6.html#ai-dying-sound-radius","title":"AI Dying Sound Radius","text":"<p>This script activates the trigger collider on top of the Ai agent at the time when it is dead and helps sends the message to other Ai agents who enters this trigger to move to the nearest emergency covers.</p> <p>First create an empty gameObject to be the child of the Soldier Mesh and rename it to be 'Dying Sound Radius' and within the gameObject add a sphere Collider and two scripts to it called 'Dying Sound Radius' and 'Time Based Deactivation'.[See the Image Below]</p> <p></p> <p></p> <p>Adding this script will allow the Dying AI agent to notify his friendly AI agent to get into the emergency state and using another script called 'Time Based Deactivation' script it will get deactivated after certain period of time using the value provided in the field 'Time to Deactive'.</p> <p>Lastly,Make sure to drag and drop the gameObject in the field called 'Dying Sound Radius' exist in the 'Humanoid AI Health Script'.[See the image below]</p> <p></p>"},{"location":"AIEmergencyState_OtherScenarios_Part7.html","title":"Emergency State(Other Scenarios) Part-7","text":""},{"location":"AIEmergencyState_OtherScenarios_Part7.html#introduction","title":"Introduction","text":"<p>This is the Part-7 of AI Emergency State and in this part you will learn about some other scenarios during emergency state. These scenarios are the following that are mentioned in the video:</p> <p>1.What happen If you uncheck choose closest covers?</p> <p>2.What happen if there is only 1 cover but 2 AI agents?</p> <p>3.How the enemy AI agent can provoke emergency state on other AI agents?</p> <p>4.Which emergency Behaviour AI agent overrites in case when the path to the player position is incomplete and impossible to reach? </p>"},{"location":"AIEmergencyState_OtherScenarios_Part7.html#what-happen-if-you-uncheck-choose-closest-covers","title":"What happen If you uncheck choose closest covers?","text":""},{"location":"AIEmergencyState_OtherScenarios_Part7.html#answer","title":"ANSWER","text":"<p>The AI agents in such a situation move to any random cover which are within the Min/Max range to find the covers. </p>"},{"location":"AIEmergencyState_OtherScenarios_Part7.html#what-happen-if-there-is-only-1-cover-but-2-ai-agents","title":"What happen if there is only 1 cover but 2 AI agents?","text":""},{"location":"AIEmergencyState_OtherScenarios_Part7.html#answer_1","title":"ANSWER","text":"<p>Only 1 Agent will be allowed to take the cover (in case only one valid cover point is available) while the other AI agent will be performing the flee behaviour and as soon as the cover becomes vacant the AI agent who is performing the flee behaviour will take that available cover and will perform emergency shooting from that cover.</p>"},{"location":"AIEmergencyState_OtherScenarios_Part7.html#how-the-enemy-ai-agent-can-provoke-emergency-state-on-other-ai-agents","title":"How the enemy AI agent can provoke emergency state on other AI agents.","text":""},{"location":"AIEmergencyState_OtherScenarios_Part7.html#answer_2","title":"ANSWER","text":"<p>Just by creating a Team1 Soldier and placing it as mentioned (in the video above) with one shot of Team1 AI agent towards its enemies can provoke the emergency state on Team2 agents.</p>"},{"location":"AIEmergencyState_OtherScenarios_Part7.html#which-emergency-behaviour-ai-agent-overrites-in-case-when-the-path-to-the-player-position-is-incomplete-and-impossible-to-reach","title":"Which emergency Behaviour AI agent overrites in case when the path to the player position is incomplete and impossible to reach?","text":""},{"location":"AIEmergencyState_OtherScenarios_Part7.html#answer_3","title":"ANSWER","text":"<p>When the path to the player position is considered as incomplete as well as path to the closest coordinate to the player is also invalid/incomplete in such a case when there is no way to reach the player. the enemies will overrite there 'Post First Emergency Behaviour Activity' to only with 'Emergency Shooting' and will be performing 'Emergency Shooting' until the combat behaviour starts.</p>"},{"location":"AIEmergencyState_ZigZagAdvancing_Part1.html","title":"Emergency State(Zig Zag Advancing) Part-1","text":""},{"location":"AIEmergencyState_ZigZagAdvancing_Part1.html#introduction","title":"Introduction","text":"<p>This is the Part-1 of AI Emergency State and in this part you will learn about how the AI react in emergency state and perform 'Zig Zag Advancing' towards the enemy supposed postion.</p>"},{"location":"AIEmergencyState_ZigZagAdvancing_Part1.html#enable-emergency-alert","title":"Enable Emergency Alert","text":"<p>To enable emergency alert behaviour on AI agent you need to check the checkbox 'Enable Emergency Alerts' and enabling this checkbox will show the paragraph below called 'AI Emergency State'.</p> <p></p>"},{"location":"AIEmergencyState_ZigZagAdvancing_Part1.html#ai-emergency-state","title":"AI Emergency State","text":"<p>This paragraph is responsible for Ai agent behaviour in life threatening situations where he cannot detect the source of the threat and takes several measures to save his life and locate the threat. Most common emergency state triggering situations are when Ai agent will hear bullet impacts near him or will hear dying sound of friendly Ai agent or when he will see another friendly Ai agent in emergency state.All those conditions will result in Emergency behaviour that Ai agent will execute in a various forms depending on two major conditions.When Ai agent gets into Emergency state he will be provided with the coordinate of the supposed enemy position. After that Navmesh path is calculated towards this coordinate.If navmesh path is complete then Ai agent will hide behind available emergency covers for specified time and when this hiding time is expired then Ai agent will advance between emergency covers towards supposed enemy position.If there are no more available emergency covers left for Ai agent on his way to supposed enemy position then Ai agent will start run in a zigzag pattern towards those coordinates to increase survival chances.If navmesh path is incomplete towards supposed enemy position(i.e if supposed enemy coordinate is on the roof of a different building or on the other side of the river etc.) then Ai agent will perform Emergency hiding and shooting in a general direction of the supposed enemy position.This behaviour can be set up that way so that Ai agent could switch emergency covers or stay at the first occupied emergency cover without ever leaving it.</p> <p></p> Fields Info Emergency Cover Finder Component Drag and drop Emergency covers finder game object with 'Find Emergency Covers' script attached to it from this Ai agent's hierarchy. Emergency Alert Radius Component Drag and drop Emergency covers finder game object with 'Emergency Alert Radius' script attached to it from this Ai agent's hierarchy. Choose Closest Emergency Covers In case this checkbox is active then Ai agent will find closest emergency covers during emergency state. Min Range To Find Emergency Cover Specifies the minimum emergency covers detection radius. Max Range To Find Emergency Cover Specifies the maximum emergency covers detection radius. Min Time Behind Emergency Cover Minimum time to hide behind emergency cover before beginning but not during advancing towards supposed enemy position. Max Time Behind Emergency Cover Maximum time to hide behind emergency cover before beginning but not during advancing towards supposed enemy position. Min Emergency Cover Occupation Distance Minimal Emergency Cover occupation distance reaching which Ai agent will stop moving towards it and start hiding behaviour. Max Emergency Cover Occupation Distance Maximum Emergency Cover occupation distance reaching which Ai agent will stop moving towards it and start hiding behaviour. Min Emergency Alert Radius Activation Delay Minimum amount in seconds of Ai agent's Emergency Alert Radius Trigger Activation delay. Max Emergency Alert Radius Activation Delay Maximum amount in seconds of Ai agent's Emergency Alert Radius Trigger Activation delay. Pose Transition Duration The duration, in seconds, it takes for the AI agent to rotate and focus on emergency cover or shooting points during emergency state. A lower value indicates a faster rotation, while a higher value results in a slower rotation. Post First Emergency Cover Behaviour Activity Select any of the options from this drop down list that contains various behaviours for Ai agent to perform after expiration of the initial Emergency cover occupation timer. Ai Fleeing Behaviour This Subsection regulates the parameters of fleeing behaviour when Ai agent sprints away from danger zone when find himself in the emergency situation. Advancing Between Covers Fields of this subsection are regulating various aspects of Ai agent's advancing between covers towards enemy supposed coordinates. ZigZag Advancing This subsection sets the coordinate for the final destination of zigzag sprinting and regulates the amplitude of the zigzag sprinting pattern. Emergency Shooting This subsection regulates various aspects of Emergency Shooting behaviour which if activated will make Ai agent to fire his weapon in general direction of the enemy situated outside of enemy detection parameters of this Ai agent."},{"location":"AIEmergencyState_ZigZagAdvancing_Part1.html#zig-zag-advancing-paragraph","title":"Zig Zag Advancing Paragraph","text":"<p>This subsection sets the coordinate for the final destination of zigzag sprinting and regulates the amplitude of the zigzag sprinting pattern.</p> <p></p> Fields Info Coordinate Creator Drag and Drop an empty gameobject which will rotate and look at the enemy to generate a coordinate towards the path where the enemy is located. This will make sure that the coordinate always created towards the enemy path to make it look natural. This field will also make sure that the coordinate generated is in the forward direction and towards the enemy path. Min Enemy Supposed Position Offset Minimum radius to create a coordinate from the enemy position. Max Enemy Supposed Position Offset Maximum radius to create a coordinate from the enemy position. Zigzag Turns Amount Specify how many coordinates to generate when moving towards the enemy. The coordinates generated will be in a V-Direction and the Ai agent has to reach these generated coordinates one by one, which will result in a zig zag movement. Once all the coordinates are reached then the Ai agent will move directly towards the coordinate created around the enemy."},{"location":"AIEmergencyState_ZigZagAdvancing_Part1.html#create-emergency-covers","title":"Create Emergency Covers","text":"<p>First you need to select the 'Covers' that we created in the previous part of 'AI Covers' and than duplicate all 'Cover Points - 1,2,3,4' and rename it to 'Emergency Cover Point - 1,2,3,4'.After this select all the 4 Emergency Cover Point and remove the component 'Cover Node' and Add the component 'Emergency Cover Node'. Choose the Emegency Cover Type based on the cover for example - If it is a Crouch cover than choose 'Crouch Emergency Cover' and in case Stand cover than choose 'Stand Emergency Cover'.</p>"},{"location":"AIEmergencyState_ZigZagAdvancing_Part1.html#emergency-cover-node","title":"Emergency Cover Node","text":"<p>Emergency Cover is designed for the non combat cover behaviour. For example  when Ai agents are under the threat but can not detect and locate the attackers which is required for them to enter the combat state.In this case they will sprint towards emergency cover and will hide there for some specified amount of time before moving out towards supposed enemy position by performing movement between emergency covers and sprinting in a zigzag pattern to increase their survival chances. </p>"},{"location":"AIFiringPoint_Part1.html","title":"Firing Point Part-1","text":""},{"location":"AIFiringPoint_Part1.html#introduction","title":"Introduction","text":"<p>This is the Part-1 of Humanoid AI Firing Point Behaviour and in this part we have covered the topic called how to create a firing point and use it. You will also going to learn how to use the Stop and shoot behaviour when moving to firing point.</p>"},{"location":"AIFiringPoint_Part1.html#create-a-firing-point","title":"Create a Firing Point","text":"<p>To create the firing point you just need to create an empty gameObject and add a box collider to it.After that you need to change the layer of the gameObject to be 'IgnoreRaycast' and just add the script called 'Firing Point' to it.</p> <p> </p> Fields Info Debug Firing Point Status If checked than Ai agent will debug firing point status if it is occupied or vacant. Debug Info Text UI This field is responsible for debugging firing point state in a form of text whether it is vacant or occupied. Debug Info Text UI Offset Adjust text UI horizontally or vertically by tweaking values in this field. Enable Crouch Firing If checked than Ai agent will crouch and shoot on this firing point position. Specific Team Firing Point If checked than this firing point can only be available to one Team. Team Name If the above field name 'SpecificTeamCover' is checked than it is required to enter the TeamName for which this firing point can be available too."},{"location":"AIFiringPoint_Part1.html#use-the-firing-point","title":"Use The Firing Point","text":"<p>To use the created firing point you need to enable the checkbox called 'Use Firing Points' in 'Combat state behaviours' of the Core AI behaviour script. This will allow the humanoid AI agent to use the Firing point in the game.</p> <p> </p>"},{"location":"AIFiringPoint_Part1.html#understand-the-firing-point","title":"Understand The Firing Point","text":"<p>When you enable the 'Use Firing Points' in 'Combat state behaviours' this will show you a paragraph below called 'Ai Firing Points'.  more info about each field can be found below. </p> <p> </p> Fields Info Firing Point Detection Behaviour Fields in this subsection will allow tweaking for AI agent to move towards the firing point. Sprinting Behaviour Fields in this subsection will allow Ai agent to sprint towards the firing point in case structured that way. Open Fire Behaviour Fields in this subsection are setting Ai agent's weapon firing behaviour while he is moving towards or between covers. This subsection is reused in 3 different combat related paragraphs. Those are - Ai Charging, Ai Covers and Ai firing points. And in each of those cases this subsection is defining Open Fire Behaviour in relation to parent paragraphs subject. In 'Ai Charging' paragraph fields will define shooting behaviour in relation to enemies. In case of 'AI Covers' paragraph those fields are used in relation to covers. And in 'Ai Firing Points' paragraph in relation to Firing points. Firing Points Finder Drag and drop the child gameObject of this Ai agent which have a script named attached called 'FindFiringPoints' from the hierarchy into this field. Find Closest Firing Point If enabled than the Ai agent will find the closest firing point from his current position. In case if this checkbox is disabled than Ai agent will take random firing point within the Range specified in the field name 'RangeToFindAFiringPoint' Switching Firing Points Probability The slider value below indicate what would be the probability of the Ai agent to switch new firing point. In case the value in the slider is 100 than the Ai agent will switch between different firing point around him. In case this value is 0 than the Ai agent will not switch between any new firing point after taking his first firing point and will make sure to stay in his first firing point only for the duration of combat. Depending on the probability Ai agent will decide whether to pick a new firing point or stay at the currently picked one. Range To Find A Firing Point A Radius within which Ai agent can find random firing point from its current position to be able to move around. Min Time Between Firing Points Minimum time needed to find a random firing point from the current position within the range defined in 'Range to Find Firing a Point' field. Max Time Between Firing Points Maximum time needed to find a random firing point from the current position within the range defined in 'Range to Find Firing a Point' field. Distance To Stop Before Firing Point Distance to stop before occupying a valid firing point. Min Stop And Shoot Cancel Distance To Firing Point Minimum distance To cancel Stop and shoot behaviour if the distance with the cover is less than or equal to the value specified in this field. Max Stop And Shoot Cancel Distance To Firing Point Maximum distance To cancel Stop and shoot behaviour if the distance with the cover is less than or equal to the value specified in this field. Enable Sprinting If enabled Ai agent will be allowed to sprint towards the destination. Min Remaining Distance To Firing Point To Stop Sprinting Minimum distance to stop sprinting towards the firing point. Max Remaining Distance To Firing Point To Stop Sprinting Maximum distance to stop sprinting towards the firing point. Stop And Shoot Probability This slider sets the probability of 'Stop And Shoot' behaviour while Ai agent is moving towards or between covers. Strafing Probability This slider sets the probability of 'Strafing' behaviour while Ai agent is moving towards or between covers. Min Stop And Shoot Distance To Enemy Or To Cover Minimal distance towards the cover to activate Stop&amp;Shoot behaviour. Max Stop And Shoot Distance To Enemy Or To Cover Maximum distance towards the cover to activate Stop&amp;Shoot behaviour. Min Time Till Stop And Shoot Behaviour Minimum time since Ai agent decided to go towards or between covers till he starts Stop&amp;Shoot behaviour. Max Time Till Stop And Shoot Behaviour Maximum time since Ai agent decided to go towards or between covers till he starts Stop&amp;Shoot behaviour. Min Stop And Shoot Duration Minimum duration in seconds of the Stop&amp;Shoot behaviour. Max Stop And Shoot Duration Maximum duration in seconds of the Stop&amp;Shoot behaviour."},{"location":"AIFiringPoint_Part2.html","title":"Firing Point Part-2","text":""},{"location":"AIFiringPoint_Part2.html#introduction","title":"Introduction","text":"<p>This is the Part-2 of Humanoid AI Firing Point Behaviour and in this part we have talked about how AI agent behaves when there are multiple firing points.We have also talked about how multiple Humanoid AI agent select firing point for them,How to create the firing point for a specific team and enable pillbox on firing point to make it visually appear like a cover.</p>"},{"location":"AIFiringPoint_Part2.html#add-the-pillbox","title":"Add The Pillbox","text":"<p>You can add a pillbox to the firing point just by going to project&lt; Mobile Action Kit &lt; Art &lt; Covers &lt; PillBox. Drag and drop the pillbox to the firing point as a child and check the checkbox 'Static'. After this you just need to bake the navmesh for the Humanoid AI agent and this will create a path to the firing point inside the pillbox and when the agent will use it. It will visually appear like a cover.</p> <p> </p>"},{"location":"AIFiringPoint_Part2.html#important-things-to-note","title":"Important Things To Note","text":"<p>1.When firing points are placed from top of the navmesh (and not on the navmesh) than this will considered as a invalid firing point for the Humanoid AI agent which will result in the agent not able to reach them and will be only performing his default behaviour for example: Strafing or stationed shooting.</p> <p>2.When the firing points are placed on the navmesh but the path to the firing point is incomplete or not available for example: On Top of a building [See the image below]. In this case this will also  result in the agent not able to reach them and will be only performing his default behaviour for example: Strafing or stationed shooting.</p> <p>3.If there is only one firing point but two Humanoid AI agents than if one of them have taken the firing point than this will also result in the agent to be only performing his default behaviour for example: Strafing or stationed shooting.</p> <p>4.When the distance to the firing point is further than the distance to the enemy this will also result in the agent to be only performing his default behaviour for example: Strafing or stationed shooting. But as while strafing the distance to the firng point gets closer than the distance to the enemy this will allow agent to use the firing points.</p> <p></p>"},{"location":"AIFootstepSounds.html","title":"FootStep Sounds Part-1","text":""},{"location":"AIFootstepSounds.html#introduction","title":"Introduction","text":"<p>In this tutorial you will how to setup footstep sounds for the AI agent.</p>"},{"location":"AIFootstepSounds.html#humanoid-ai-audio-player","title":"Humanoid Ai Audio Player","text":"<p>The script is responsible for playback of different sounds and phrases in various situations. When Ai agent is wounded or dying or reloading weapons or engaging his enemy etc.</p> <p></p> <p>Drag and drop the 'FootStep' AudioSource Component from the hierarchy into this field located in the hierarchy of this AI agent.[See the image below] </p> <p></p>"},{"location":"AIFootstepSounds.html#setup-footstep-event-in-the-animation-window","title":"Setup FootStep event in the Animation Window","text":"<p>To play the footstep audio each time the AI agent foot touches the ground. First Open the Animation window by going to 'Window &lt; Animation &lt; Animation'. After this Check each frame where the Ai agent foot is touching the ground.[See the image below]</p> <p></p> <p>At each frame where the foot is touching the ground you need to add the event and choose the function 'FootStep Sound'. Do the same for all the other animation clips where the agent is moving for example: Sprinting ,Running, Walking etc..</p>"},{"location":"AIFootstepSounds.html#setup-footstep-sounds-based-on-surfaces","title":"Setup FootStep Sounds Based On Surfaces","text":"<p>There are two ways you can setup the footstep sounds based on the surface using the trigger collider or using the Raycast.</p>"},{"location":"AIFootstepSounds.html#humanoid-ai-surfaces-trigger-collider","title":"Humanoid AI Surfaces (Trigger Collider)","text":"<p>To Setup this up create an empty gameObject and add a primitive collider to it like: Box,Sphere collider etc.. and adjust it in the scene where you want the AI agent footstep sound to get changed like in sand or grass area. Make sure to check 'Is Trigger' Checkbox. After this add a script to it called 'Humanoid AI Surfaces'.[See the image below]</p> <p></p>"},{"location":"AIFootstepSounds.html#humanoid-ai-surfaces-script","title":"Humanoid AI Surfaces Script","text":"<p>This Script replaces Humanoid AI foot step Sounds within the trigger that should be placed in a certain Surface Area. When Ai agent will enter such trigger then its default footstep sounds will be replaced by the particular sound in the field named 'Foot Step Audio' of this script. For Example : Metal Surface , Grass Surface etc... </p> Fields Info FootStep Audio Drag and drop the desired audio clip from the project into this field to playback this distinct footstep audio clip for the duration of HumanoidAI agents inside this trigger (e.g., for grass, metal, wood surfaces etc)."},{"location":"AIFootstepSounds.html#humanoid_ai-surface-detector-script","title":"Humanoid_AI Surface Detector Script","text":"<p>First create an empty gameObject to be the child of the AI agent and rename it to be 'Surface Detector' and in this gameObject Add component called 'Humanoid_AI Surface Detector'. Select any 3D Mesh gameObject like grass or sand and change its tag to 'Grass' or 'Sand'.After this in the script you need to write the name of the tag and provide an audio clip to it. </p> <p>The HumanoidAI_SurfaceDetector script offers a sophisticated solution for enhancing AI behavior through dynamic footstep sound adjustments based on terrain/Mesh types. By employing tags and raycasting, this approach continuously checks ahead of the AI agent at intervals set by Min/Max timers. It provides detailed environmental responsiveness, allowing AI characters to interact realistically with various surfaces like grass, concrete, or wood. However, due to its continuous raycasting nature, developers should consider performance implications, particularly on mobile platforms where it may slightly impact FPS. For smaller environments, alternative script like 'HumanoidAISurfaces' which do collider-based detection may be more performance-efficient, ensuring optimal gameplay experience across different device capabilities.</p> <p></p> Fields Info Raycast Length Length of the raycast that detects surfaces in front of the AI character. Adjust this value based on how far ahead you want the AI to detect surfaces. Min Time To Raycast Minimum time interval between consecutive raycasts. Controls how often the script performs raycast checks. Max Time To Raycast Maximum time interval between consecutive raycasts. Controls how often the script performs raycast checks. Ignored Layers Layers to ignore during raycasting. Objects on these layers will not trigger surface detections. Useful for ignoring irrelevant objects like UI elements or other AI agents. Debug Raycast Toggle to enable or disable visual debugging of raycasts in the Scene view. When enabled (true), the raycast is visualized with raycastColor, during development and testing. Raycast Color Color used to visualize the raycast in the Scene view. Helps developers see where the raycast is directed during debugging. Custom FootStep Sounds Class Class for custom footstep sounds. Tag The tag representing a specific surface type (e.g., 'Grass', 'Concrete'). Assign tags to game objects in Unity to differentiate surfaces. FootStep Audio Clip Audio clip to play when the AI walks on surfaces with the corresponding tag. For example, assign a rustling sound for 'Grass' or a hard impact sound for 'Concrete'. Custom FootStep Sounds List of custom footstep sounds for different surface tags. Populate this list with tags and corresponding audio clips to simulate realistic footstep behavior based on terrain type. <p>You can choose any one of the option provided above based on your requirements.</p>"},{"location":"AIInvestigationNearTheDeadBody.html","title":"Investigation Near DeadBody","text":""},{"location":"AIInvestigationNearTheDeadBody.html#introduction","title":"Introduction","text":"<p>In this tutorial you will going to learn how the AI agent investigate near the friendly deadbody.</p>"},{"location":"AIInvestigationNearTheDeadBody.html#enable-deadbody-alert","title":"Enable DeadBody Alert","text":"<p>To enable DeadBody alert behaviour on AI agent you need to check the checkbox 'Enable DeadBody Alerts' and enabling this checkbox will show the paragraph below called 'AI DeadBody Alerts'.</p> <p></p>"},{"location":"AIInvestigationNearTheDeadBody.html#ai-deadbody-alerts","title":"AI DeadBody Alerts","text":"<p>This subsection is for the case when AI agent finds dead body of a friendly AI agent, that was already there for some time(if it only has active 'Dead Body Radius' collider).</p> <p></p> Fields Info Investigation Alert Radius Drag and drop an empty gameobject named 'Dead Body Radius' with a sphere collider attached to it into this field. Enable 'Is Trigger' on that sphere collider and tweak its 'Radius' field value to specify how large this trigger should be. If any friendly Ai agent collides with this trigger, it will immediately enter into Dead Body Investigation state, which in turn will activate its own Dead Body Investigation state to notify nearby friendlies of current Investigation. Min Investigation Radius From The Dead Body A value within which Ai agent will investigate from the point where the dead body is found (for example: if the value is 10, then the Ai agent will investigate within 10 meters radius from the point where the dead body was located). Max Investigation Radius From The Dead Body A value within which Ai agent will investigate from the point where the dead body is found (for example: if the value is 10, then the Ai agent will investigate within 10 meters radius from the point where the dead body was located). Min Stopping Distance From The Dead Body Minimum stopping distance from the dead body. Max Stopping Distance From The Dead Body Maximum stopping distance from the dead body. Min Time To Stay Near Dead Body This field determines how long Ai agent will stay near the dead body. Max Time To Stay Near Dead Body This field determines how long Ai agent will stay near the dead body. Min Dead Body Investigation Radius Activation Delay This field determines how long it will take Ai agent to activate the investigation radius on top of him. Max Dead Body Investigation Radius Activation Delay This field determines how long it will take Ai agent to activate the investigation radius on top of him."},{"location":"AIInvestigationNearTheDeadBody.html#investigation-radius-component","title":"Investigation Radius Component","text":"<p>This script activates investigation radius on  the Ai agent at the first time when it detects a dead body so that other Ai agents who are within this trigger would get into investigation state as well. Investigating Agents will move within proximity of dead body to get within distance specified in  the 'Core AI Behaviour script' that has paragraph called 'AI Investigation Alerts' where field called 'Investigation Radius From The Dead Body' is located.Activation of investigation trigger on some AI agents will cause similar activation for other Ai agents who will happen to be within resulted investigation triggers which will create chain reaction or domino effect for all affected agents.If same dead body is encoutered for the second time then by same agents thaen they will not react to it and will not get into investigation state. </p> <p>First create an empty gameObject to be the child of the Alert Radius gameobject Mesh and rename it to be 'Investigation Alert Radius' and within the gameObject add a sphere Collider and a script to it called 'Investigation Radius'.[See the Image Below]</p> <p></p> Fields Info Display Ai Agents Display friendlies AI agents who are within emergency state. <p>Adding this script will allow the DeadBody of Friendly AI agent to notify his other friendly AI agent to get into the investigation state.</p> <p>Lastly,Make sure to drag and drop the gameObject in the field called 'Investigation Alert Radius' exist in the 'AI DeadBody Alerts'.[See the image below]</p> <p></p>"},{"location":"AILeader%26Follower_Part1.html","title":"Leader and Followers Part-1","text":""},{"location":"AILeader%26Follower_Part1.html#introduction","title":"Introduction","text":"<p>This is the Part-1 of AI Leader and follower and in this part you will learn about how the AI agent moves between destination points with his followers.</p>"},{"location":"AILeader%26Follower_Part1.html#enable-ai-as-leader","title":"Enable AI As Leader","text":"<p>First make sure to enable the AI agent as leader by selecting the AI agent and than expand the 'Core AI Behaviour' script and change the Agent Role to be 'Leader'. This will enable/add the script to the AI agent root object called 'AI Guide' using this script we can control the AI agent behaviour as 'Leader'.</p> <p></p>"},{"location":"AILeader%26Follower_Part1.html#ai-guide","title":"AI Guide","text":"<p>This script turns Ai agent to a leader of Player and/or other AI agents, that guides player and/or other AI agents to certain destination point.</p> <p></p> Fields Info Destination Points Ai Leader will go through destination points in the order they are listed below. Starting from the point in 'Element 0' field. If Ai Leader encounters any resistance on his way, he will switch to other behaviors depending on the state those situations might put him into. As soon as all interrupting factors are eliminated and Ai Leader is no longer distracted, he will resume his destination-following behavior. After reaching the last destination point, Leader will switch to its default behavior (wandering, patrolling, etc.). Player Follower Script Drag and drop 'PlayerFollower' component attached to Player from the hierarchy into this field. Adding 'PlayerFollower' component will allow this Ai agent to become the leader of the Player and not get too far from the player while moving towards the destination. Follower Agents Drag and drop into this field one or multiple Ai agents from the hierarchy window (with their role set as the 'Follower' inside the 'core Ai behavior' script). This functionality is designed to work with AI agents that are pre-placed in the level by the mission designer. It is not intended to work with spawned AI agents. NavMesh Agent Component Drag and drop this agent's root gameobject with 'NavMeshAgent' component attached to it into this field. Sprint to Destination Decide whether the Ai agent will sprint towards the destination points or only run between destination points. Min Run Distance Specifies remaining distance to the destination point to switch from walking or sprinting to running towards it. Max Run Distance Specifies remaining distance to the destination point to switch from walking or sprinting to running towards it. Min Walk Distance Specifies remaining distance to the destination point to switch from running or sprinting to walking towards it. Max Walk Distance Specifies remaining distance to the destination point to switch from running or sprinting to walking towards it. Stopping Distance to Destination Point Specifies the value at which distance the Ai agent will register the destination point as reached and look for the new one (if there are more of them) - Recommended Range (1,3). Min Time to Check on Followers Minimum time interval to check distance with followers in case the followers are getting far behind from this Ai agent leader. Max Time to Check on Followers Maximum time to check distance with followers in case the followers are getting far behind from this Ai agent leader. Stop and Wait Distance If Ai Leader exceeds the specified distance, Ai agent will stop and wait until all the followers catch up again."},{"location":"AILeader%26Follower_Part1.html#enable-ai-as-follower","title":"Enable AI As Follower","text":"<p>First make sure to enable the AI agent as follower by selecting the AI agent and than expand the 'Core AI Behaviour' script and change the Agent Role to be 'Follower'. This will enable/add the script to the AI agent root object called 'AI Follower' using this script we can control the AI agent behaviour as 'Follower'.</p> <p></p>"},{"location":"AILeader%26Follower_Part1.html#ai-follower","title":"AI Follower","text":"<p>If you want this Ai agent to become the follower of another friendly Ai agent or the Player than this script is required to be attached with the field name 'Follower Agents' located in the script called 'AiGuide' Or the 'PlayerGuide' script.</p> <p></p> Fields Info Min Stopping Distance to Leader Minimum distance between the leader and this Ai agent to maintain. Max Stopping Distance to Leader Maximum distance between the leader and this Ai agent to maintain. Min Running Distance to Leader Minimum distance before starting to run towards the commander. Max Running Distance to Leader Maximum distance before starting to run towards the commander. Min Walking Distance to Leader Minimum distance before starting to walk towards the commander. Max Walking Distance to Leader Maximum distance before starting to walk towards the commander. Min Sprinting Distance to Leader Minimum distance to trigger sprinting towards the commander if the distance becomes greater. Max Sprinting Distance to Leader Maximum distance to trigger sprinting towards the commander if the distance becomes greater."},{"location":"AILeader%26Follower_Part1.html#player-follower","title":"Player Follower","text":"<p>This script allows the player to become a follower of the friendly AI agent. Simply drag and drop the player follower script onto the AI guide component. This will ensure that the AI waits for the player when moving towards destinations.</p> <p></p> Fields Info Min Near Distance To Leader Specify the minimum distance to the leader to continue moving towards the destination. Max Near Distance To Leader Specify the maximum distance to the leader to continue moving towards the destination."},{"location":"AILeader%26Follower_Part1.html#create-destination-points","title":"Create Destination Points","text":"<p>To create the destination points for AI agent leader you need to create 3D Cube in the hierarchy and place it wherever you want the AI agent leader to move to. Make sure that this gameObject is close to the navmesh as much as possible. After setting it up you can remove/disable the 'Mesh Renderer' component and drag and drop this gameObject to the AI Guide script field name 'Destination Points'.</p>"},{"location":"AILeader%26Follower_Part2.html","title":"Leader and Followers Part-2","text":""},{"location":"AILeader%26Follower_Part2.html#introduction","title":"Introduction","text":"<p>This is the Part-2 of AI Leader and follower and in this part you will learn about how the AI use the halt point between destinations.</p>"},{"location":"AILeader%26Follower_Part2.html#create-halt-point","title":"Create Halt Point","text":"<p>To create a halt point for the AI Agent Leader you need to add a component to the destination point called as 'AI Leader Halt Point'. [See the Image Below]</p> <p></p>"},{"location":"AILeader%26Follower_Part2.html#ai-leader-halt-point","title":"AI Leader Halt Point","text":"<p>Halt points are designed as an additional stop points between destination points and  placed at a certain locations(street corners, gates, entrances etc. ) This script sets the various parameters for the Leader at the halt point.</p> <p></p> Fields Info Halt Pose Animation Animation Clip to be played back by the Leader at the halt point. Min Halt Time Minimum halt time in case followers are within separation limit. In case they are not it will be prolonged until they catch up with the Leader. Max Halt Time Maximum halt time in case followers are within separation limit. In case they are not it will be prolonged until they catch up with the Leader. Halt Pose Left Rotation Value of the leader's rotational offset at the Halt point in degrees to the left from the direction he was facing when approaching this halt point. Halt Pose Right Rotation Value of the leader's rotational offset at the Halt point in degrees to the right from the direction he was facing when approaching this halt point. Halt Pose Neutral Rotation Value of the leader's rotational offset at the Halt point in degrees to the neutral from the direction he was facing when approaching this halt point. Rotational Offset Duration Time it takes for the Leader to turn in the specified direction."},{"location":"AIMaintainingSpawner.html","title":"AI Maintaining Spawner","text":""},{"location":"AIMaintainingSpawner.html#introduction","title":"Introduction","text":"<p>In this tutorial you will learn how to setup AI maintaining spawner and spawn AI agents within a spawn point and collider volume. We will make sure to spawn agents on the NavMesh Surface and will also make sure to maintain a certain number of agents in the game.</p>"},{"location":"AIMaintainingSpawner.html#ai-maintaining-spawner_1","title":"AI Maintaining Spawner","text":"Fields Info ShowGizmosInTheScene Draw the gizmos of the spawning areas in the Unity scene view. GizmosColor Set the colour of the spawning area gizmos in the Unity scene view. TriggeringGameObject Drag &amp; drop the gameobject (usually player) from the hierarchy into this field to trigger spawn events. SpawnerActivationType Choose one of the types of the 'AiMaintainingSpawner' activation. If 'SpawnOnTriggerEnter' is chosen, AI Agents will be spawned only if the 'TriggeringGameObject' (usually player) enters the trigger collider attached to the 'AiMaintainingSpawner' game object. If 'SpawnOnStart' is chosen, the spawner will start functioning with the start of the game after a specified delay. SpawnWithinVolume If checked, then AI agents will spawn within the volume of the trigger collider attached to the child game object of this 'AiMaintainingSpawner' named 'SpawnVolume'. You will need to create, add a trigger collider to it, and set up its dimensions to ensure that agents spawn only within certain rooms or other enclosed spaces. SpawnVolume Drag and drop 'SpawnVolume' child game object with the trigger collider attached to it into this field. UseAgentsListScript If checked, it will spawn agents listed inside the 'AiToSpawnList' script that can hold various types of AI agents. The spawner then randomly spawns AI agents from that list. AiAgentsListScript Drag and drop 'AiToSpawnList' game object with 'AiAgentsListScript' attached to it into this field from the hierarchy of the 'AiMaintainingSpawner' game object. Agents This dropdown list is an alternative to 'AiToSpawnList' for AI agents assignment. It can be set to the desired number of fields that would hold AI agent prefabs to be spawned. Drag and drop AI agents from the project into these fields. SpawnPoint Drag and drop the child game object named 'SpawnPoint' into this field. MaxNumberOfAgentsToSpawn Number of agents this spawner script can spawn in total. SpawnOnStartDelay This slider delays the spawning of AI agents. The minimal value of the delay can be 0.01 seconds, and the maximal value can be 600 seconds. UseAiMaintainingSpawnersGlobalAiList If checked, this script will use 'AiMaintainingSpawnersGlobalAiList' to store its spawned agents. If unchecked, this script will store its spawned agents itself. AiMaintainingSpawnersGlobalAiListScript Drag and drop 'TriggerSpawnersGlobalAiList' script from the hierarchy into this field. UsePreciseSpawnPoints If checked, AI agents will spawn at the specified spawn points that should be placed in the 'SpawnPoint' fields. PreciseSpawnPoints Set the number of preplaced Spawn points used for this wave. Drag and drop those spawn points to be used for this wave from the hierarchy tab into this field. MinCasualtiesCheckTime Minimum time to check the number of alive AI agents. MaxCasualtiesCheckTime Maximum time to check the number of alive AI agents. maxSpawnAttemptsPerObstacle Number of maximum attempts to spawn per obstacle. AiUpdaterScript Drag and drop the AI Updater game object from the hierarchy with 'AiUpdater' script attached to it into this field. AgentsToMaintainInGame Number of alive agents to keep in the game. This number will be replenished by this spawner as long as there are enough agents in 'MaxNumberOfAgentsToSpawn' for that. SpawnPointRadius Radius within limits of which AI Agents will be spawned. DisplaySpawnedAgentsList List of AI Agents to be displayed in this subsection for debugging purposes."},{"location":"AINonCombatChatter.html","title":"Non Combat Chatter Part-3","text":""},{"location":"AINonCombatChatter.html#introduction","title":"Introduction","text":"<p>In this tutorial you will how to setup Non combat chatter script for AI agent.</p>"},{"location":"AINonCombatChatter.html#non-combat-chatter","title":"Non Combat Chatter","text":"<p>Select the Non Combat Chatter gameObject which is the child of the AI agent. Within this gameObject by default you will find following components attached- Ai Non Combat Chatter Scipt, Sphere Collider and Audiosource Component.[See the image below]</p> <p></p>"},{"location":"AINonCombatChatter.html#ai-non-combat-chatter","title":"Ai Non Combat Chatter","text":"<p>This script is responsible for playing back AudioClips(usually conversations or radio chatter) whenever Player gets within a certain range that is defined by the sphere collider attached to this gameobject. Audio clips from the 'ChatterAudioClips' list and will be played sequentially in the order they are listed. If player will get outside of the trigger and then will re-enter it then the Chatter playback sequence will resume from the next clip in the list. The list of chatter audio clips is played only once for the duration of the player`s presence within the trigger. </p> Fields Info CoreAiBehaviourScript Drag&amp;Drop root gameobject of this AI agent with CoreAiBehaviour script attached to it into this field. ChatterTriggerObject Drag&amp;Drop gameobject (usually the Player) that will trigger the playback of the AiNonCombatChatter audio clips. MinChatterDelay Minimum delay before playing the chatter audio clips. MaxChatterDelay Maximum delay before playing the chatter audio clips. AudioSourceComponent Drag&amp;Drop Audio Source component attached to this gameobject into this field. NoElementReplayOnTriggerReEnter If checked, the audio clip will continue playing until all clips have finished, even if the player exits the trigger collider. If unchecked, the audio clip will stop and resume from where it left off if the player re-enters the trigger collider. This ensures the player hears all audio clips in the list properly. ChatterAudioClips List of Audio clips to play sequentially in the order they are listed. MinTimeIntervalBetweenChatterClips Minimal time interval between playback of the Audio Clips from the list. MaxTimeIntervalBetweenChatterClips Maximal time interval between playback of the Audio Clips from the list."},{"location":"AINonCombatChatter.html#speaker","title":"Speaker","text":"<p>When there are more than one AI agent in the game and you may want only one agent to playback assigned audio clips while other agents to listen to the playing audio clips for this case you need to add a script called 'Speaker' to only one of the agent and drag and drop the other Ai agents in the field name 'Listeners'.[See the image below] This will allow all the AI agent to wait playing the default behaviour until the 'Speaker' has completed the playback of all assigned audio clips.</p>"},{"location":"AINonCombatChatter.html#speaker-script","title":"Speaker Script","text":"<p>This script is assigned to Ai agent to make him a speaker for the duration of NonCombatChatter. So that other AI agents that are assigned to the list of Listeners would not be able to speak and thus interrupt the speaker. This is achieved by preventing the AiNonCombatChatter script on those listeners agents from playing back any audio clips from their 'ChatterAudioClips' lists. And after the 'Speaker' Ai agent will finish playback of all the audio clips from his list then Speaker as well as all his Listeners will begin performing their default behaviours and playback audio clips from 'DefaultBehaviourAudioClips' list located inside 'HumanoidAiAudioPlayer' script.</p> Fields Info Listeners Drag and drop all the 'AI agents' listening to this AI agent."},{"location":"AIRecurringAndNonRecurringSounds.html","title":"Recurring &amp; Non Recurring Sounds Part-2","text":""},{"location":"AIRecurringAndNonRecurringSounds.html#introduction","title":"Introduction","text":"<p>In this tutorial you will how to setup Recurring and Non Recurring Sounds for the AI agent.</p>"},{"location":"AIRecurringAndNonRecurringSounds.html#humanoid-ai-audio-player","title":"Humanoid Ai Audio Player","text":"<p>The script is responsible for playback of different sounds and phrases in various situations. When Ai agent is wounded or dying or reloading weapons or engaging his enemy etc.</p> <p></p> Fields Info AudioSourceComponent Drag and drop audio source component which is the child of this Ai agent from the hierarchy into this field. DyingAudioClips Drag and drop one or more dying sound clips from the project into this field. FireSoundAudioSourceComponent Drag and drop audio source component which is the child of this Ai agent from the hierarchy into this field. ReloadSoundAudioSourceComponent Drag and drop audio source component which is the child of this Ai agent from the hierarchy into this field. WeaponShotAudioClip Drag and drop 'Fire sound clip' from the project window into this field. WeaponReloadAudioClip Drag and drop the Reload Sound clip from the project window into this field. FootStepsAudioSourceComponent Drag and drop audio source component which is the child of this Ai agent from the hierarchy into this field. FootStepAudioClip Drag and drop 'Footstep sound clip' from the project window into this field. AudioSourceComponent (Replayable Voices) Drag and drop the audio source component which is the child of this AI agent from the hierarchy into this field. DefaultBehaviourAudioClips Drag and drop default behavior audio clips from the project window into this field. EngagingTheEnemyAudioClips Drag and drop engaging the enemy audio clips from the project window into this field. FollowerAudioClips Drag and drop follower audio clips from the project window into this field. LeaderAudioClips Drag and drop leader audio clips from the project window into this field. MinTimeBetweenRecurringAudioClips Minimum time interval between recurring audio clips. Example: '1.0' seconds. MaxTimeBetweenRecurringAudioClips Maximum time interval between recurring audio clips. Example: '2.0' seconds. MinRecurringAudioClipsDelayAfterInterruption Minimum delay after interruption before recurring audio clips can play again. Example: '2.0' seconds. MaxRecurringAudioClipsDelayAfterInterruption Maximum delay after interruption before recurring audio clips can play again. Example: '4.0' seconds. AudioSourceComponent (OneTime Voices) Drag and drop the audio source component which is the child of this AI agent from the hierarchy into this field. OnceReloadingAudioClips Drag and drop reloading audio clips from the project window into this field. OnceMeleeAudioClips Drag and drop melee audio clips from the project window into this field. OnceEmergencyAudioClips Drag and drop emergency audio clips from the project window into this field. OnceDeadBodyInvestigationAudioClips Drag and drop dead body investigation audio clips from the project window into this field. OnceHearingInvestigationAudioClips Drag and drop hearing investigation audio clips from the project window into this field. OnceWoundedAudioClips Drag and drop wounded audio clips from the project window into this field. OnceEnemyLostAudioClips Drag and drop enemy lost audio clips from the project window into this field. OnceTargetKilledAudioClips Drag and drop target killed audio clips from the project window into this field. OnceGrenadeAlertAudioClips Drag and drop grenade alert audio clips from the project window into this field. OnceThrowingGrenadeAudioClips Drag and drop throwing grenade audio clips from the project window into this field. OnceLeaderAtHaltPointAudioClips Drag and drop leader at halt point audio clips from the project window into this field. MinNonRecurringAudioClipsDelay Minimum delay between non-recurring audio clips. Example: '1.0' seconds. MaxNonRecurringAudioClipsDelay Maximum delay between non-recurring audio clips. Example: '2.0' seconds. RecurringSounds Settings for recurring sound clips based on time intervals. Example: 'Default behavior sounds that play at random intervals while the AI is patrolling.' NonRecurringSounds Settings for non-recurring sound clips that play once under specific conditions. Example: 'Emergency state sound that plays once when the AI enters an emergency state.' DyingSounds Settings for dying sound clips that play when the AI agent dies. WeaponSounds Settings for weapon sound clips that play during firing and reloading actions. DefaultFootStepSounds Settings for footstep sound clips that play when the AI agent moves."},{"location":"AISoundAlertBehaviour_Part1.html","title":"Sound Alert Behaviour Part-4","text":""},{"location":"AISoundAlertBehaviour_Part1.html#introduction","title":"Introduction","text":"<p>In this tutorial you will learn about AI agent reaction towards alert sounds. Basically alert sounds are fire sound, Grenade explosion etc.. </p>"},{"location":"AISoundAlertBehaviour_Part1.html#alerting-sound-activator","title":"Alerting Sound Activator","text":"<p>This Script activates the alerting sound and specifies if this sound will travel with its parent game object.[See the image below]</p> <p></p> Fields Info AlertingSoundScript Drag and drop Sound Source (Alerting Sound) child game object of this Sound Activator into this field. KeepSoundAsChild If checked, 'AlertingSound' gameObject will stay with its parent 'SoundActivator' gameobject, thus will be able to move together with it. This will result in a dynamic trigger for something like a drone, rocket, or car creating fly-by or drive-by kind of sound that would affect all AI agents touched by the moving sound trigger. In case unchecked, the Sound gameObject will get unparented and will not follow the root gameObject. For example, weapon shot or explosion sound. MinInitialDelayBeforeActivation Minimum Delay before activating the 'AlertingSound' gameObject. MaxInitialDelayBeforeActivation Maximum Delay before activating the 'AlertingSound' gameObject."},{"location":"AISoundAlertBehaviour_Part1.html#alerting-sound","title":"Alerting Sound","text":"<p>This component alerts humanoid Ai agents as well as other AI types (drones etc.) within its collider to react to it. This reaction can be performed in a few ways.And this script can alter some of the parameters of this reaction behaviour.</p> <p></p> Fields Info AlertingSoundReactions Choose one of the 2 behavioural responses of Ai agents affected by this sound alert. 'GoNearSoundCoordinates' to go towards the coordinate of this sound, or choose 'ForceEmergencyState' for Ai agent to go into emergency state. TeamAffectedBySound Choose the team which will be affected by this sound. TeamName Type the name of the team to be affected by this sound. SoundInvestigationError This field represents the sound location mistake the Ai agent will make. The greater the number, the further away the resulted investigation coordinate will get from the initial coordinate of the alerting sound. TimeToDeactivate Specify the time to deactivate this alerting sound game object. OverriteOtherAiApproach If checked, it will override the approach style of sound investigating Ai agents. If only one of those options is checked, then it will force itself on the way Ai agent will approach the sound and it will discard all the other approach styles. If two of those options are checked, then they will discard unchecked approach styles altogether. Quick Note - If all of checkboxes are checked, it will have the same effect as if none of them were checked, i.e., it will not take any effect over initial approach settings. AllowSprinting Allows only selected approach styles. If all or none of these options are selected, then default approach values will not be overridden. AllowRunning Allows only selected approach styles. If all or none of these options are selected, then default approach values will not be overridden. AllowWalking Allows only selected approach styles. If all or none of these options are selected, then default approach values will not be overridden."},{"location":"AISoundAlertBehaviour_Part1.html#ai-hearing","title":"AI Hearing","text":"<p>This paragraph contains fields related to AI agent reactions to alerting sounds.</p> <p></p> Fields Info SoundAlertProbability This slider sets the probability of this AI agent to react to sound alerts. MoveTowardsSoundCoordinate If checked, then Ai agent will move towards the alerting coordinate. Otherwise, he will look in the direction of that sound for a specified amount of time. RecieveFriendlySoundCoordinate If checked, then AI agent will join his friendly in alerting sound investigation if that friendly affects this agent with his sound alert radius. That secondary sound alert radius communicates the sound alert to all agents that got within this radius (even in cases when those agents are having zero probability to move out towards initial alerting sound that they heard themselves). ShareSoundCoordinatesComponent Reference to the component responsible for sharing sound coordinates. EnableSprintingTowardsSoundCoordinate Enable/disable sprinting towards sound coordinates. MinSprintDistance Minimal remaining distance to initial sound alert coordinate for the switch from walking or running to sprinting towards it. MaxSprintDistance Maximal remaining distance to initial sound alert coordinate for the switch from walking or running to sprinting towards it. MinRunDistance Minimal remaining distance to initial sound alert coordinate for the switch from walking or sprinting to running towards it. MaxRunDistance Maximal remaining distance to initial sound alert coordinate for the switch from walking or sprinting to running towards it. MinWalkDistance Minimal remaining distance to initial sound alert coordinate for the switch from running or sprinting to walking towards it. MaxWalkDistance Maximal remaining distance to initial sound alert coordinate for the switch from running or sprinting to walking towards it. MinNearStoppingDistance Minimum remaining distance to stop near the initial sound alert coordinate and to consider it as reached. MaxNearStoppingDistance Maximum remaining distance to stop near the initial sound alert coordinate and to consider it as reached. MinTimeAtSoundAlertPoint Set the minimum time the AI agent waits at the initial sound alert coordinate before returning to idle state. MaxTimeAtSoundAlertPoint Set the maximum time the AI agent waits at the initial sound alert coordinate before returning to idle state. MinTimeToLookAtSoundAlertPoint Set the minimum time the Stationary AI agent or agent with zero probability of moving towards initial sound alert coordinate, will look in the direction of the initial sound alert coordinate before returning to idle state. MaxTimeToLookAtSoundAlertPoint Set the maximum time the Stationary AI agent or agent with zero probability of moving towards initial sound alert coordinate, will look in the direction of the initial sound alert coordinate before returning to idle state."},{"location":"AISoundAlertBehaviour_Part2.html","title":"Sound Alert Behaviour Part-5","text":""},{"location":"AISoundAlertBehaviour_Part2.html#introduction","title":"Introduction","text":"<p>In this tutorial you will learn how AI agent share sound coordinate with his friendly AI agent and how to customise AI agent approach towards the sound coordinate.</p>"},{"location":"AISoundAlertBehaviour_Part2.html#share-sound-coordinate","title":"Share Sound Coordinate","text":"<p>This script will share alerting sound coordinate that this Ai agent has with other Ai agents that will get affected by the trigger collider attached to 'SoundInvestigationRadius' game object. Thus making those agents to join the sound investigation.Those Agents that didn`t hear the alerting sound but joined the investigation will also enable their own 'SoundInvestigationRadius' colliders to affect other unaware Ai agents of this investigation.Such design allows for a domino effect where first alerted Ai agent is alerting other nearby Ai agents.</p> <p></p>"},{"location":"AISoundAlertBehaviour_Part2.html#sound-investigating-approach-style-reset","title":"Sound Investigating Approach Style Reset","text":"<p>Default approach style can be overwritten by the values stored in the 'AlertingSound'script attached to Alerting sound activator. 'SoundInvestigatingApproachReset'  decides if to restore or not the approach style of the sound investigating Ai agents towards alerting sound coordinate to default values that are set inside 'Ai Hearing' paragraph of the 'CoreAiBehaviour'script. 'InvestigatingApproachReset' gets activated for a brief moment upon Ai agent's death and checks if there are alive friendly Ai agents in the combat state as well as approaching sound alert investigators within it's collider radius.If there are alive friendly Ai agents that are in combat state within this collider at the moment of this check then no approach style reset is applied to investigators inside this collider. If there are no alive friendly Ai agents in combat state at the moment of check then approach style reset will be made to investigators inside this collider.</p> <p></p>"},{"location":"AISoundAlertBehaviour_Part2.html#alerting-sound","title":"Alerting Sound","text":"<p>This component alerts humanoid Ai agents as well as other AI types (drones etc.) within its collider to react to it. This reaction can be performed in a few ways.And this script can alter some of the parameters of this reaction behaviour.</p> <p></p> Fields Info AlertingSoundReactions Choose one of the 2 behavioural responses of Ai agents affected by this sound alert. 'GoNearSoundCoordinates' to go towards the coordinate of this sound, or choose 'ForceEmergencyState' for Ai agent to go into emergency state. TeamAffectedBySound Choose the team which will be affected by this sound. TeamName Type the name of the team to be affected by this sound. SoundInvestigationError This field represents the sound location mistake the Ai agent will make. The greater the number, the further away the resulted investigation coordinate will get from the initial coordinate of the alerting sound. TimeToDeactivate Specify the time to deactivate this alerting sound game object. OverriteOtherAiApproach If checked, it will override the approach style of sound investigating Ai agents. If only one of those options is checked, then it will force itself on the way Ai agent will approach the sound and it will discard all the other approach styles. If two of those options are checked, then they will discard unchecked approach styles altogether. Quick Note - If all of checkboxes are checked, it will have the same effect as if none of them were checked, i.e., it will not take any effect over initial approach settings. AllowSprinting Allows only selected approach styles. If all or none of these options are selected, then default approach values will not be overridden. AllowRunning Allows only selected approach styles. If all or none of these options are selected, then default approach values will not be overridden. AllowWalking Allows only selected approach styles. If all or none of these options are selected, then default approach values will not be overridden."},{"location":"AISoundAlertBehaviour_Part2.html#ai-hearing","title":"AI Hearing","text":"<p>This paragraph contains fields related to AI agent reactions to alerting sounds.</p> <p></p> Fields Info SoundAlertProbability This slider sets the probability of this AI agent to react to sound alerts. MoveTowardsSoundCoordinate If checked, then Ai agent will move towards the alerting coordinate. Otherwise, he will look in the direction of that sound for a specified amount of time. RecieveFriendlySoundCoordinate If checked, then AI agent will join his friendly in alerting sound investigation if that friendly affects this agent with his sound alert radius. That secondary sound alert radius communicates the sound alert to all agents that got within this radius (even in cases when those agents are having zero probability to move out towards initial alerting sound that they heard themselves). ShareSoundCoordinatesComponent Reference to the component responsible for sharing sound coordinates. EnableSprintingTowardsSoundCoordinate Enable/disable sprinting towards sound coordinates. MinSprintDistance Minimal remaining distance to initial sound alert coordinate for the switch from walking or running to sprinting towards it. MaxSprintDistance Maximal remaining distance to initial sound alert coordinate for the switch from walking or running to sprinting towards it. MinRunDistance Minimal remaining distance to initial sound alert coordinate for the switch from walking or sprinting to running towards it. MaxRunDistance Maximal remaining distance to initial sound alert coordinate for the switch from walking or sprinting to running towards it. MinWalkDistance Minimal remaining distance to initial sound alert coordinate for the switch from running or sprinting to walking towards it. MaxWalkDistance Maximal remaining distance to initial sound alert coordinate for the switch from running or sprinting to walking towards it. MinNearStoppingDistance Minimum remaining distance to stop near the initial sound alert coordinate and to consider it as reached. MaxNearStoppingDistance Maximum remaining distance to stop near the initial sound alert coordinate and to consider it as reached. MinTimeAtSoundAlertPoint Set the minimum time the AI agent waits at the initial sound alert coordinate before returning to idle state. MaxTimeAtSoundAlertPoint Set the maximum time the AI agent waits at the initial sound alert coordinate before returning to idle state. MinTimeToLookAtSoundAlertPoint Set the minimum time the Stationary AI agent or agent with zero probability of moving towards initial sound alert coordinate, will look in the direction of the initial sound alert coordinate before returning to idle state. MaxTimeToLookAtSoundAlertPoint Set the maximum time the Stationary AI agent or agent with zero probability of moving towards initial sound alert coordinate, will look in the direction of the initial sound alert coordinate before returning to idle state."},{"location":"AISoundInvestigation%26EmergencyBehaviour.html","title":"Sound Investigation &amp; Emergency Behaviour Part-6","text":""},{"location":"AISoundInvestigation%26EmergencyBehaviour.html#introduction","title":"Introduction","text":"<p>In this tutorial you will learn how AI agent overrites sound investigation when emergency state activate.</p>"},{"location":"AISoundInvestigation%26EmergencyBehaviour.html#alerting-sound-reaction","title":"Alerting Sound Reaction","text":"<p>When the option 'Force Emergency State' is selected, if an AI agent is moving towards a sound coordinate and enters a trigger radius where the 'Alerting Sound Reaction' is set to 'Force Emergency State,' the AI agent will immediately enter the emergency state and stop moving towards the sound coordinate.</p> <p></p>"},{"location":"AISoundInvestigation%26EmergencyBehaviour.html#ai-hearing","title":"AI Hearing","text":"<p>This paragraph contains fields related to AI agent reactions to alerting sounds.</p> <p></p> Fields Info SoundAlertProbability This slider sets the probability of this AI agent to react to sound alerts. MoveTowardsSoundCoordinate If checked, then Ai agent will move towards the alerting coordinate. Otherwise, he will look in the direction of that sound for a specified amount of time. RecieveFriendlySoundCoordinate If checked, then AI agent will join his friendly in alerting sound investigation if that friendly affects this agent with his sound alert radius. That secondary sound alert radius communicates the sound alert to all agents that got within this radius (even in cases when those agents are having zero probability to move out towards initial alerting sound that they heard themselves). ShareSoundCoordinatesComponent Reference to the component responsible for sharing sound coordinates. EnableSprintingTowardsSoundCoordinate Enable/disable sprinting towards sound coordinates. MinSprintDistance Minimal remaining distance to initial sound alert coordinate for the switch from walking or running to sprinting towards it. MaxSprintDistance Maximal remaining distance to initial sound alert coordinate for the switch from walking or running to sprinting towards it. MinRunDistance Minimal remaining distance to initial sound alert coordinate for the switch from walking or sprinting to running towards it. MaxRunDistance Maximal remaining distance to initial sound alert coordinate for the switch from walking or sprinting to running towards it. MinWalkDistance Minimal remaining distance to initial sound alert coordinate for the switch from running or sprinting to walking towards it. MaxWalkDistance Maximal remaining distance to initial sound alert coordinate for the switch from running or sprinting to walking towards it. MinNearStoppingDistance Minimum remaining distance to stop near the initial sound alert coordinate and to consider it as reached. MaxNearStoppingDistance Maximum remaining distance to stop near the initial sound alert coordinate and to consider it as reached. MinTimeAtSoundAlertPoint Set the minimum time the AI agent waits at the initial sound alert coordinate before returning to idle state. MaxTimeAtSoundAlertPoint Set the maximum time the AI agent waits at the initial sound alert coordinate before returning to idle state. MinTimeToLookAtSoundAlertPoint Set the minimum time the Stationary AI agent or agent with zero probability of moving towards initial sound alert coordinate, will look in the direction of the initial sound alert coordinate before returning to idle state. MaxTimeToLookAtSoundAlertPoint Set the maximum time the Stationary AI agent or agent with zero probability of moving towards initial sound alert coordinate, will look in the direction of the initial sound alert coordinate before returning to idle state."},{"location":"AISystem.html","title":"\ud83c\udfae\ud83d\udc64PLAYER","text":""},{"location":"AISystem.html#weapon-setup","title":"Weapon Setup","text":"<p>The AI provided in the kit is really cool, and you should learn how to create your own AI system.Hello Mr.Sourav jain </p>"},{"location":"AISystem.html#setting-up-pistol","title":"Setting up Pistol","text":"<p>This section is essential. Tutorials For AI</p>"},{"location":"AISystem.html#emergency-cover","title":"Emergency Cover","text":"<p>This section is about emergency behavior.</p> <p></p>"},{"location":"AISystem.html#combat-covers","title":"Combat Covers","text":"<p>This section is about combat behavior. Great</p>"},{"location":"AISystem.html#emergency-covers","title":"Emergency Covers","text":"<p>This is emergency cover</p>"},{"location":"AI_Covers_Explanation.html","title":"Covers Fields Explanation","text":""},{"location":"AI_Covers_Explanation.html#introduction","title":"Introduction","text":"<p>This is the Part-5 of Humanoid AI Covers and in this part you will learn about fields in the paragraph called 'Ai Covers' located in the 'Core AI Behaviour'.</p>"},{"location":"AI_Covers_Explanation.html#ai-covers","title":"AI Covers","text":"<p>Fields in this section will take effect if AI agent will be structured the way that allows him take covers during combat.i.e If Ai agent is not configured to be stationary and 'Use Covers' checkbox is checked.Ai Agent detects cover assemblies by the colliders of their child cover points.And then creates the list of all covers within specified range. And then does requests to cover assemblies of interest during the combat state.</p> Fields Info Cover Finder Drag and drop the child gameObject of this Ai agent which has a script named 'FindCovers' from the hierarchy into this field. Choose Closest Covers If enabled, the Ai agent will find the closest covers from his current position. If this checkbox is disabled, the Ai agent will take a random cover within the range specified in the field 'RangeToFindCoverPoint'. Switching Covers Probability The slider value below indicates the probability of the Ai agent switching to new covers. If the value is 100, the Ai agent will switch between different covers around him. If the value is 0, the Ai agent will not switch to any new cover after taking his first cover and will stay in his first cover for the duration of combat. Depending on the probability, the Ai agent will decide whether to pick a new cover or stay at the currently picked one. If the taken cover becomes invalid, the Ai agent will switch to another valid cover. Range to Find Existing Cover Points Range within which the Ai agent will find cover points to hide behind. Enable Sprinting Between Covers If unchecked, the AI agent will perform an assault by walking and shooting its target. Min Sprinting Distance Minimal value for remaining distance to target to set the shortest limit for random value. Max Sprinting Distance Maximal value for remaining distance to target to set the longest limit for random value. Min Time to Check for Covers Minimum time the AI agent will check for cover availability. If an AI agent cannot find a suitable cover at the start of the game, he will check for free cover. If the AI agent is already behind cover, he will not consider checking for cover again, even if the cover time has expired. Max Time to Check for Covers Maximum time the AI agent will check for cover availability. If an AI agent cannot find a suitable cover at the start of the game, he will check for free cover. If the AI agent is already behind cover, he will not consider checking for cover again, even if the cover time has expired. Min Time Between Covers Minimum time the AI agent will spend behind the current cover before taking another available cover point. Max Time Between Covers Maximum time the AI agent will spend behind the current cover before taking another available cover point. Min Time at Open Fire Point Minimum time that the AI agent will stay at the Open Fire point before returning to the cover point, or leaving the cover if other combat behavior comes into effect. Max Time at Open Fire Point Maximum time that the AI agent will stay at the Open Fire point before returning to the cover point, or leaving the cover if other combat behavior comes into effect. Transition Speed to Stand Cover Speed at which the AI agent will be procedurally rotated to the stand hiding pose. Taken Cover Proximity Distance Remaining distance to cover point at which the AI agent registers himself occupying it. Enable Reloading Behind Hide Covers If enabled, the AI agent will be able to reload his weapon when behind the hide cover, e.g., Stand Hide Cover, Crouch Hide Cover. Reload Delay Behind Stand Hide Cover Delay value to allow for AI agent rotation and playback of stand hide cover animation before reloading his weapon. Reload Delay Behind Crouch Hide Cover Delay value to allow for AI agent playback of crouch hide cover animation before reloading his weapon. To prevent reloading animation from previous state (like running or walking/strafing). Reload If Ammo Left in Magazine Is Less Than Allows the AI agent to reload his weapon while he is at stand or crouch hide cover points even if the magazine is not yet empty. Min Stop and Shoot Cancel Distance to Cover Minimum distance to cancel Stop and Shoot behavior if the distance to the cover is less than or equal to the value specified in this field. Max Stop and Shoot Cancel Distance to Cover Maximum distance to cancel Stop and Shoot behavior if the distance to the cover is less than or equal to the value specified in this field. Open Fire Behaviour Fields in this subsection are setting the AI agent's weapon firing behavior while he is moving towards or between covers. This subsection is reused in three different combat-related paragraphs: Ai Charging, Ai Covers, and Ai Firing Points. In each case, this subsection defines Open Fire Behavior in relation to the parent paragraph's subject. In the 'Ai Charging' paragraph, fields will define shooting behavior in relation to enemies. In the 'AI Covers' paragraph, those fields are used in relation to covers. In the 'Ai Firing Points' paragraph, in relation to Firing points. The value in this field is related to cover instead of enemy or the Fire Point. Stop and Shoot Probability This slider sets the probability of 'Stop and Shoot' behavior while the AI agent is moving towards or between covers. Strafing Probability This slider sets the probability of 'Strafing' behavior while the AI agent is moving towards or between covers. Min Stop and Shoot Distance to Enemy or Cover Minimal distance towards the cover to activate Stop&amp;Shoot behavior. Max Stop and Shoot Distance to Enemy or Cover Maximum distance towards the cover to activate Stop&amp;Shoot behavior. Min Time Till Stop and Shoot Behaviour Minimum time since the AI agent decided to go towards or between covers till he starts Stop&amp;Shoot behavior. Max Time Till Stop and Shoot Behaviour Maximum time since the AI agent decided to go towards or between covers till he starts Stop&amp;Shoot behavior. Min Stop and Shoot Duration Minimum duration in seconds of the Stop&amp;Shoot behavior. Max Stop and Shoot Duration Maximum duration in seconds of the Stop&amp;Shoot behavior."},{"location":"AI_CrouchFiringCover.html","title":"Crouch Firing Cover","text":""},{"location":"AI_CrouchFiringCover.html#introduction","title":"Introduction","text":"<p>This is the Part-2 of Humanoid AI Covers and in this part you will learn about how to setup the crouch firing cover.</p>"},{"location":"AI_CrouchFiringCover.html#crouch-firing-cover_1","title":"Crouch Firing Cover","text":"<p>To setup the crouch firing cover first you need to drag and drop the model from the project to the hierarchy and rename it  to 'Crouch Firing Cover' and than follow the steps below :</p> <p>1.First Add the primitive collider to this model(renamed to crouch firing cover) example - Box,Capsule Collider etc.. whichever is more suitable.</p> <p>2.Add the 'Nav Mesh Obstacle' component to the crouch firing cover gameObject and adjust it.</p> <p>3.Add the 'AI Cover script' component.</p> <p>4.Add the 'Debug Cover State' component to it.</p> <p>5.After this you need to create an empty gameObject as a child of the crouch firing cover gameObject and call it as 'Cover Point' and in that gameObject add a capsule collider and set it to be is trigger.</p> <p>6.Add the 'Cover Node' component to this child gameObject.</p> <p> </p>"},{"location":"AI_CrouchFiringCover.html#setup-open-fire-points","title":"Setup Open Fire Points","text":"<p>Open Fire Points allow the agent to stand Or crouch and shoot at his enemy after occupying the cover point.This behaviour may be set the way so that Ai agent would cycle between cover point and open fire point (i.e return to the cover point after open fire point's timer is expired and vice versa) for entirety of combat state unless this cover becomes invalid.Open fire points are of stand type by default.If you want open fire point to be of crouch type then you have to setup open fire point to be crouch type by selecting its tag to be 'CrouchFirePoint'.</p> <p>To setup the open fire points you need to right click to create an empty gameObject as a child of the crouch firing cover gameObject and call it as 'Open Fire Point' and place it in the scene view wherever you want but just make sure it is close to the NavMesh and after that if you want to use it follow the steps provided below :</p> <p>1.Select the cover point and check the checkbox 'Use Open Fire Points' located in the script 'Cover Node'.</p> <p>2.Drag and drop the 'Open Fire Point' to the array list called 'Open Fire Points'.</p> <p>TO MAKE THE OPEN FIRE POINT TO BE CROUCHING FIRE POINT FOR THE AGENT YOU JUST NEED TO CHANGE THE 'Open Fire Point' GAMEOBJECT TAG OF TO BE 'CrouchFirePoint'.</p>"},{"location":"AI_CrouchFiringCover.html#setup-secondary-open-fire-points","title":"Setup Secondary Open Fire Points","text":"<p>'Secondary Open Fire Point' is a backup option for the cases when predefined 'Open Fire Point' is unavailable(occupied coz same OpenFirePoint can be setup to be shared between few cover nodes,or not provided at all for this cover node). It can be  created within specified radius from this cover node.In case this would not be desirable option due to the possibility for Ai agent to pick bad spot like in front of the cover if the value of that radius is big enough to allow that,then this value can be made small enough to force Ai agent to just stand up from the 'Crouch Cover Point' and shoot his weapon (If this node is setup to be crouch cover type).If none of the solutions above are suitable for the cover you are making,then you can create an empty game object, position it the way you like and drag and drop it into this field.This way the radius for the random OpenFirePoint will be created from that game object instead of cover node itself.</p> <p>To setup the secondary open fire point you need to right click to create an empty gameObject as a child of the crouch firing cover gameObject and call it as 'Secondary Open Fire Point' and place it in the scene view wherever you want but just make sure it is close to the NavMesh and after that if you want to use it follow the steps provided below :</p> <p>There will be two sitations where the agent will going to prefer using the 'Secondary Open Fire Point'. </p> <p>1.When the 'Open Fire Point' is not defined in the game.</p> <p>2.When the 'Open Fire Point' is defined but other agent friendly agent is already occupying it. </p>"},{"location":"AI_CrouchFiringCover.html#ai-cover-script","title":"AI Cover Script","text":"<p>This is the cover assembly parent script.It is defining accessibility of the various child cover nodes based on the enemy visibility conditions for those cover points.There are 5 types of cover nodes that can be assembled in any combination to provide general cover behaviour for combat situations. 4 of the 5 cover points are used during AI agents  combat state.When request is made to the cover assembly for availability of it`s child cover nodes then the visibility check is done by all cover points in the assembly.Those cover points that have Ai agents current closest enemy within their field of view(240 degrees) are discarded as invalid. The remaining valid cover points ar then sorted by AI agent and best cover point is selected. It is the cover point that has the biggest angle to turn towards current enemy of interest  directly.In other words the on that is closest to being directly opposite to the current closest enemy of Ai agent who made cover request.Fifth cover node type is called 'Emergency Cover' and is designed for the non combat or pre-combat cover behaviour.For example  when Ai agents are under the threat but can not detect and locate the attackers.In this case they will sprint towards emergency cover and will hide there for some specified amount of time before moving out towards supposed enemy position by performing movement between available emergency covers and/or sprinting  in a zigzag pattern to increase their survival chances.</p> Fields Info Single Agent Cover This checkbox limits the cover assembly capacity to only one AI agent at a time regardless of how many child cover nodes it has. Universal Hiding Cover Enables this cover assembly to become available for all AI agents of both opposing teams. This allows opposing Ai agents to occupy opposite Hide Cover nodes of the same Cover assembly. Specific Team Cover Specifies team that is allowed to access this cover assembly.Useful for saving  performance in cases when  there is no possible way for second team to reach and  occupy this cover assembly that is on the roof of the building for example or any other isolated area.If checked then additional 'Team Name' field will appear to enter the name of the designated team. Team Name If the above field name 'SpecificTeamCover' is checked than it is required to enter the TeamName for which this whole cover can be available too."},{"location":"AI_CrouchFiringCover.html#debug-cover-state-script","title":"Debug Cover State Script","text":"<p>The 'DebugCoverState' script is designed to assist in debugging the cover system, specifically for Humanoid AI agents. It provides visual feedback on the state of cover points (vacant, occupied, or invalid) by displaying debug information using TextMeshPro components.</p> Fields Info Enable Debugging Toggle to activate or deactivate debugging features. Debug Info Text UI Drag and drop TextMeshPro prefab named 'DebugInfoUI_Covers &amp; FirePoints' from the project window into this field. This field is responsible for debugging cover state in a form of text whether it is vacant, occupied, or invalid. It is displaying the responses of the cover points to AI agent requests. Debug text is displayed for a specified amount of time right after a request is made from an Ai agent for available cover points of this assembly. The shorter you set the time for the debug text to stay, the more subsequent responses it will be able to display. Debug Info Text UI Offset Sets the position of debugging text relative to the cover node. Min Debug Text Visibility Time Minimum Time of Debug Text Visibility. If you configure the text display time to be very short, it will have a better chance to indicate more responses from Cover Points to AI agents for available covers of this cover assembly. Max Debug Text Visibility Time Maximum Time of Debug Text Visibility. If you configure the text display time to be very short, it will have a better chance to indicate more responses from Cover Points to AI agents for available covers of this cover assembly. Debug Text Colors Configure text colors based on the state of the cover points. Team Name Type in the name of the team you came up with into this field. Occupying Text Color This text is displayed on top of the cover point as soon as the Ai agent made a request to this cover assembly and got approved with a cover point. Text will start to be displayed immediately after the cover point gets assigned to Ai agent even before said Agent will reach that cover point. Vacant Text Color 'Vacant' text is displayed right after Ai agent's request for the available cover points on top of the points not chosen by AI agent but are still valid for the time being. In this case, another Ai agent from the same team might make his own request to this cover assembly for the cover and will be provided with those remaining 'Vacant' cover points for him to choose the most suitable one to be occupied. Invalid Text Color Invalid text is displayed right after Ai agent's request for the available cover points on top of the points when they are invalid and can't be registered at that moment. It will display on those cover points which are invalid at that moment."},{"location":"AI_CrouchFiringCover.html#cover-node-script","title":"Cover Node Script","text":"<p>This script allows for creation of 4 types of cover nodes. First type of cover node is called 'Crouch Firing Cover'. Its forcing AI agent to crouch while occupying it. And allows AI agent to perform crouch fire at the enemies.Second crouch type of cover node(point) is called 'Crouch Hiding cover'.Its also forcing occupying AI Agent to crouch but does not allow Ai agent to shoot.Third and fourth cover nodes (points) types are called 'Stand Firing Cover' and 'Stand Hiding Cover'. They are the same as the first two crouching nodes with the only difference being is that they are forcing covering Ai agents to stand.</p> Fields Info Choose Cover Type Select one of the available cover types (that are described in the script info) for this cover node. Use Open Fire Points Allows the use of additional 'Open Fire Points' for Ai agent behind cover. Game object named 'Open Fire Point' is the auxiliary element of the cover assembly that can be useful to both Firing and Hiding cover variations. For Firing covers - as an additional firing point for variety of firing behaviour of Ai agent in Firing covers. And for Hiding covers it is the only possible way for Ai agent behind those covers to be able to shoot at enemies. There is a set of timers in 'Core Ai Behaviour' script's paragraph named 'Ai Covers' that regulate covering related behaviours including Open Fire Points related parameters. Open Fire Points Add one or more 'Open Fire Point(s)' to this cover assembly for Ai agent(s) to use after cover occupying time is expired. This behaviour may be set the way so that Ai agent would cycle between cover point and open fire point (i.e return to the cover point after open fire point's timer is expired and vice versa) for entirety of combat state unless this cover becomes invalid. Open fire points are of stand type by default. If you want open fire point to be of crouch type then you have to setup open fire point to be crouch type by selecting its tag to be 'CrouchFirePoint'. Secondary Open Fire Point 'Secondary Open Fire Point' is a backup option for the cases when predefined 'Open Fire Point' is unavailable (occupied because same OpenFirePoint can be setup to be shared between few cover nodes, or not provided at all for this cover node). It can be created within specified radius from this cover node. In case this would not be desirable option due to the possibility for Ai agent to pick bad spot like in front of the cover if the value of that radius is big enough to allow that, then this value can be made small enough to force Ai agent to just stand up from the 'Crouch Cover Point' and shoot his weapon (If this node is setup to be crouch cover type). If none of the solutions above are suitable for the cover you are making, then you can create an empty game object, position it the way you like and drag and drop it into this field. This way the radius for the random OpenFirePoint will be created from that game object instead of cover node itself. Secondary Open Fire Point Radius Value of this field sets the limit for 'Procedural Open Fire Point Radius' within which open fire point coordinate will be created. Stand Hide Cover Directions This list of up to 3 hiding directions or hiding positions for Ai agent to assume when occupying Hiding cover. Neutral, Left, and Right. All 3 directions may be useful in case of a 3D object for this Cover assembly being something like a column or a pillar. Ai agent then will orient himself in any of the available directions depending on closer to which side of the cover the closest enemy currently is situated. Stand Hide Cover Animation Player In case chosen cover node type is 'Stand Hiding Cover' and Stand Hide Cover Directions are set in the fields above, than this list will provide animation clips to be played back by AI agent occupying this Stand Hiding Cover for each respected direction. Which one of those 3 hiding directions will be selected and which one of the 3 corresponding stand hiding animations will be used by hiding AI agent is decided by the direction of the closest enemy that Ai agent will be hiding from. Stand Hiding Cover node can have 3, 2 or as little as one hiding direction based on near what kind of 3d object this node is placed. If it is a column or a pillar like 3d object then you might set all 3 hiding directions. If it is something like edge of the wall or side of the gates or the corner of the building then 2 hiding directions will be enough. You can get away with only one 'Neutral' hiding posture for the Ai agent if you'd like. It is not mandatory to have all 3 or 2 directions for any given 'Stand Hiding Cover' node."},{"location":"AI_CrouchHidingCover.html","title":"Crouch Hiding Cover","text":""},{"location":"AI_CrouchHidingCover.html#introduction","title":"Introduction","text":"<p>This is the Part-1 of Humanoid AI Covers and in this part you will learn about how to setup the crouch hiding cover.</p>"},{"location":"AI_CrouchHidingCover.html#crouch-hiding-cover_1","title":"Crouch Hiding Cover","text":"<p>To setup the crouch hiding cover first you need to drag and drop the model from the project to the hierarchy and rename it  to 'Crouch Hiding Cover' and than follow the steps below :</p> <p>1.First Add the primitive collider to this model(renamed to crouch hiding cover) example - Box,Capsule Collider etc.. whichever is more suitable.</p> <p>2.Add the 'Nav Mesh Obstacle' component to the crouch hiding cover gameObject and adjust it.</p> <p>3.Add the 'AI Cover script' component.</p> <p>4.Add the 'Debug Cover State' component to it.</p> <p>5.After this you need to create an empty gameObject as a child of the crouch hiding cover gameObject and call it as 'Cover Point' and in that gameObject add a capsule collider and set it to be is trigger.</p> <p>6.Add the 'Cover Node' component to this child gameObject.</p> <p> </p>"},{"location":"AI_CrouchHidingCover.html#setup-open-fire-points","title":"Setup Open Fire Points","text":"<p>Open Fire Points allow the agent to stand Or crouch and shoot at his enemy after occupying the cover point.This behaviour may be set the way so that Ai agent would cycle between cover point and open fire point (i.e return to the cover point after open fire point's timer is expired and vice versa) for entirety of combat state unless this cover becomes invalid.Open fire points are of stand type by default.If you want open fire point to be of crouch type then you have to setup open fire point to be crouch type by selecting its tag to be 'CrouchFirePoint'.</p> <p>To setup the open fire points you need to right click to create an empty gameObject as a child of the crouch hiding cover gameObject and call it as 'Open Fire Point' and place it in the scene view wherever you want but just make sure it is close to the NavMesh and after that if you want to use it follow the steps provided below :</p> <p>1.Select the cover point and check the checkbox 'Use Open Fire Points' located in the script 'Cover Node'.</p> <p>2.Drag and drop the 'Open Fire Point' to the array list called 'Open Fire Points'.</p> <p>TO MAKE THE OPEN FIRE POINT TO BE CROUCHING FIRE POINT FOR THE AGENT YOU JUST NEED TO CHANGE THE 'Open Fire Point' GAMEOBJECT TAG OF TO BE 'CrouchFirePoint'.</p>"},{"location":"AI_CrouchHidingCover.html#setup-secondary-open-fire-points","title":"Setup Secondary Open Fire Points","text":"<p>'Secondary Open Fire Point' is a backup option for the cases when predefined 'Open Fire Point' is unavailable(occupied coz same OpenFirePoint can be setup to be shared between few cover nodes,or not provided at all for this cover node). It can be  created within specified radius from this cover node.In case this would not be desirable option due to the possibility for Ai agent to pick bad spot like in front of the cover if the value of that radius is big enough to allow that,then this value can be made small enough to force Ai agent to just stand up from the 'Crouch Cover Point' and shoot his weapon (If this node is setup to be crouch cover type).If none of the solutions above are suitable for the cover you are making,then you can create an empty game object, position it the way you like and drag and drop it into this field.This way the radius for the random OpenFirePoint will be created from that game object instead of cover node itself.</p> <p>To setup the secondary open fire point you need to right click to create an empty gameObject as a child of the crouch hiding cover gameObject and call it as 'Secondary Open Fire Point' and place it in the scene view wherever you want but just make sure it is close to the NavMesh and after that if you want to use it follow the steps provided below :</p> <p>There will be two sitations where the agent will going to prefer using the 'Secondary Open Fire Point'. </p> <p>1.When the 'Open Fire Point' is not defined in the game.</p> <p>2.When the 'Open Fire Point' is defined but other agent friendly agent is already occupying it. </p>"},{"location":"AI_CrouchHidingCover.html#ai-cover-script","title":"AI Cover Script","text":"<p>This is the cover assembly parent script.It is defining accessibility of the various child cover nodes based on the enemy visibility conditions for those cover points.There are 5 types of cover nodes that can be assembled in any combination to provide general cover behaviour for combat situations. 4 of the 5 cover points are used during AI agents  combat state.When request is made to the cover assembly for availability of it`s child cover nodes then the visibility check is done by all cover points in the assembly.Those cover points that have Ai agents current closest enemy within their field of view(240 degrees) are discarded as invalid. The remaining valid cover points ar then sorted by AI agent and best cover point is selected. It is the cover point that has the biggest angle to turn towards current enemy of interest  directly.In other words the on that is closest to being directly opposite to the current closest enemy of Ai agent who made cover request.Fifth cover node type is called 'Emergency Cover' and is designed for the non combat or pre-combat cover behaviour.For example  when Ai agents are under the threat but can not detect and locate the attackers.In this case they will sprint towards emergency cover and will hide there for some specified amount of time before moving out towards supposed enemy position by performing movement between available emergency covers and/or sprinting  in a zigzag pattern to increase their survival chances.</p> Fields Info Single Agent Cover This checkbox limits the cover assembly capacity to only one AI agent at a time regardless of how many child cover nodes it has. Universal Hiding Cover Enables this cover assembly to become available for all AI agents of both opposing teams. This allows opposing Ai agents to occupy opposite Hide Cover nodes of the same Cover assembly. Specific Team Cover Specifies team that is allowed to access this cover assembly.Useful for saving  performance in cases when  there is no possible way for second team to reach and  occupy this cover assembly that is on the roof of the building for example or any other isolated area.If checked then additional 'Team Name' field will appear to enter the name of the designated team. Team Name If the above field name 'SpecificTeamCover' is checked than it is required to enter the TeamName for which this whole cover can be available too."},{"location":"AI_CrouchHidingCover.html#debug-cover-state-script","title":"Debug Cover State Script","text":"<p>The 'DebugCoverState' script is designed to assist in debugging the cover system, specifically for Humanoid AI agents. It provides visual feedback on the state of cover points (vacant, occupied, or invalid) by displaying debug information using TextMeshPro components.</p> Fields Info Enable Debugging Toggle to activate or deactivate debugging features. Debug Info Text UI Drag and drop TextMeshPro prefab named 'DebugInfoUI_Covers &amp; FirePoints' from the project window into this field. This field is responsible for debugging cover state in a form of text whether it is vacant, occupied, or invalid. It is displaying the responses of the cover points to AI agent requests. Debug text is displayed for a specified amount of time right after a request is made from an Ai agent for available cover points of this assembly. The shorter you set the time for the debug text to stay, the more subsequent responses it will be able to display. Debug Info Text UI Offset Sets the position of debugging text relative to the cover node. Min Debug Text Visibility Time Minimum Time of Debug Text Visibility. If you configure the text display time to be very short, it will have a better chance to indicate more responses from Cover Points to AI agents for available covers of this cover assembly. Max Debug Text Visibility Time Maximum Time of Debug Text Visibility. If you configure the text display time to be very short, it will have a better chance to indicate more responses from Cover Points to AI agents for available covers of this cover assembly. Debug Text Colors Configure text colors based on the state of the cover points. Team Name Type in the name of the team you came up with into this field. Occupying Text Color This text is displayed on top of the cover point as soon as the Ai agent made a request to this cover assembly and got approved with a cover point. Text will start to be displayed immediately after the cover point gets assigned to Ai agent even before said Agent will reach that cover point. Vacant Text Color 'Vacant' text is displayed right after Ai agent's request for the available cover points on top of the points not chosen by AI agent but are still valid for the time being. In this case, another Ai agent from the same team might make his own request to this cover assembly for the cover and will be provided with those remaining 'Vacant' cover points for him to choose the most suitable one to be occupied. Invalid Text Color Invalid text is displayed right after Ai agent's request for the available cover points on top of the points when they are invalid and can't be registered at that moment. It will display on those cover points which are invalid at that moment."},{"location":"AI_CrouchHidingCover.html#cover-node-script","title":"Cover Node Script","text":"<p>This script allows for creation of 4 types of cover nodes. First type of cover node is called 'Crouch Firing Cover'. Its forcing AI agent to crouch while occupying it. And allows AI agent to perform crouch fire at the enemies.Second crouch type of cover node(point) is called 'Crouch Hiding cover'.Its also forcing occupying AI Agent to crouch but does not allow Ai agent to shoot.Third and fourth cover nodes (points) types are called 'Stand Firing Cover' and 'Stand Hiding Cover'. They are the same as the first two crouching nodes with the only difference being is that they are forcing covering Ai agents to stand.</p> Fields Info Choose Cover Type Select one of the available cover types (that are described in the script info) for this cover node. Use Open Fire Points Allows the use of additional 'Open Fire Points' for Ai agent behind cover. Game object named 'Open Fire Point' is the auxiliary element of the cover assembly that can be useful to both Firing and Hiding cover variations. For Firing covers - as an additional firing point for variety of firing behaviour of Ai agent in Firing covers. And for Hiding covers it is the only possible way for Ai agent behind those covers to be able to shoot at enemies. There is a set of timers in 'Core Ai Behaviour' script's paragraph named 'Ai Covers' that regulate covering related behaviours including Open Fire Points related parameters. Open Fire Points Add one or more 'Open Fire Point(s)' to this cover assembly for Ai agent(s) to use after cover occupying time is expired. This behaviour may be set the way so that Ai agent would cycle between cover point and open fire point (i.e return to the cover point after open fire point's timer is expired and vice versa) for entirety of combat state unless this cover becomes invalid. Open fire points are of stand type by default. If you want open fire point to be of crouch type then you have to setup open fire point to be crouch type by selecting its tag to be 'CrouchFirePoint'. Secondary Open Fire Point 'Secondary Open Fire Point' is a backup option for the cases when predefined 'Open Fire Point' is unavailable (occupied because same OpenFirePoint can be setup to be shared between few cover nodes, or not provided at all for this cover node). It can be created within specified radius from this cover node. In case this would not be desirable option due to the possibility for Ai agent to pick bad spot like in front of the cover if the value of that radius is big enough to allow that, then this value can be made small enough to force Ai agent to just stand up from the 'Crouch Cover Point' and shoot his weapon (If this node is setup to be crouch cover type). If none of the solutions above are suitable for the cover you are making, then you can create an empty game object, position it the way you like and drag and drop it into this field. This way the radius for the random OpenFirePoint will be created from that game object instead of cover node itself. Secondary Open Fire Point Radius Value of this field sets the limit for 'Procedural Open Fire Point Radius' within which open fire point coordinate will be created. Stand Hide Cover Directions This list of up to 3 hiding directions or hiding positions for Ai agent to assume when occupying Hiding cover. Neutral, Left, and Right. All 3 directions may be useful in case of a 3D object for this Cover assembly being something like a column or a pillar. Ai agent then will orient himself in any of the available directions depending on closer to which side of the cover the closest enemy currently is situated. Stand Hide Cover Animation Player In case chosen cover node type is 'Stand Hiding Cover' and Stand Hide Cover Directions are set in the fields above, than this list will provide animation clips to be played back by AI agent occupying this Stand Hiding Cover for each respected direction. Which one of those 3 hiding directions will be selected and which one of the 3 corresponding stand hiding animations will be used by hiding AI agent is decided by the direction of the closest enemy that Ai agent will be hiding from. Stand Hiding Cover node can have 3, 2 or as little as one hiding direction based on near what kind of 3d object this node is placed. If it is a column or a pillar like 3d object then you might set all 3 hiding directions. If it is something like edge of the wall or side of the gates or the corner of the building then 2 hiding directions will be enough. You can get away with only one 'Neutral' hiding posture for the Ai agent if you'd like. It is not mandatory to have all 3 or 2 directions for any given 'Stand Hiding Cover' node."},{"location":"AI_GrenadeAlerts.html","title":"Grenade Alerts Part-3","text":""},{"location":"AI_GrenadeAlerts.html#introduction","title":"Introduction","text":"<p>This is the Part-3 of AI Grenades and in this part you will learn about how the AI agent get alerted when the grenade lands near him.</p>"},{"location":"AI_GrenadeAlerts.html#enable-grenade-alerts","title":"Enable Grenade Alerts","text":"<p>To make Humanoid AI agent to be alerted by a grenade. You need to enable grenade alert checkbox by going to 'Core AI Behaviour' script and than under  'Combat state behaviours' check the checkbox 'Enable Grenade Alerts'.</p> <p></p>"},{"location":"AI_GrenadeAlerts.html#humanoid-grenade-alerts","title":"Humanoid Grenade Alerts","text":"<p>Set of AI agent`s properties for grenade alert behaviour.</p> <p></p> Fields Info Grenade Detector Drag and drop grenade detector gameObject from the hierarchy of this AI agent into this field. Visible Layers Specify which layers will be visible when detecting incoming grenades. Choose Alert Type Choose one of the options from the list provided below. If 'MoveAwayFromLandedGrenades' is selected then the AI agent will 100% move away from the grenades if he is within the trigger area. In case the second option is chosen 'RandomizeMoveFromLandedGrenades' then the AI agent will have a 50/50 chance to decide whether to move away from landed grenades or not. Retreat Points Drag and drop retreat point child game objects of AI agent in this list. Retreat Point Radius After getting world coordinates of a retreat point another second world coordinate is created within the retreat point radius. AI agent runs towards this second world coordinate instead of the initial world coordinate of a retreat point. The bigger this value is the more unpredictable the resulted retreat direction and distance will get. Retreat Timer Value in this field is defining allowed time for the AI agent to perform retreat behavior. When this value is expired the AI agent will get back to the previous behavior. In case the fight was over while AI agent was performing retreat behavior then the AI agent will get back to whatever state he was in before this fight started."},{"location":"AI_GrenadeNoThrowArea.html","title":"Grenade No Throw Area Part-4","text":""},{"location":"AI_GrenadeNoThrowArea.html#introduction","title":"Introduction","text":"<p>This is the Part-4 of AI Grenades and in this part you will learn about how the AI agent refrain from throwing grenades upon entering the trigger area of the firing points.</p>"},{"location":"AI_GrenadeNoThrowArea.html#setup-no-throw-area","title":"Setup No Throw Area","text":"<p>1.Right-click in the Hierarchy window.Select Create Empty.Rename the GameObject to something like NoGrenadeZone for clarity.</p> <p>2.With the NoGrenadeZone GameObject selected, go to the Inspector window Click Add Component.Type Box Collider in the search bar and select Box Collider from the list.Set the Box Collider is Trigger to be checked</p> <p>3.In the Inspector, find the Layer dropdown (usually located near the top).Click the dropdown and select IgnoreRaycast.If Ignore Raycast is not available, you can add it by selecting Add Layer..., then creating a new layer named IgnoreRaycast.</p> <p>4.With the NoGrenadeZone GameObject still selected, click Add Component again.Select New Script and name the new script Humanoid_AI_NoGrenadeThrowArea.Click Create and Add.</p> <p></p>"},{"location":"AI_GrenadeNoThrowArea.html#humanoid_ai_no-grenade-throw-area","title":"Humanoid_AI_No Grenade Throw Area","text":"<p>This script enables Humanoid AI agents to refrain from throwing grenades upon entering the trigger area of this collider.</p> <p></p>"},{"location":"AI_GrenadeSetup.html","title":"Grenade Setup Part-1","text":""},{"location":"AI_GrenadeSetup.html#introduction","title":"Introduction","text":"<p>This is the Part-1 AI Grenades and in this part you will learn how to setup grenade for the 'Humanoid AI Agent' to throw at enemies.</p>"},{"location":"AI_GrenadeSetup.html#ai-grenade-setup","title":"AI Grenade Setup","text":"<p>To be able to setup the grenade you need to follow the above tutorial which will guide you step by step on how to setup the grenade.</p>"},{"location":"AI_GrenadeSetup.html#explosive-collision","title":"Explosive Collision","text":"<p>This script adds rigidbody to explosive just before it is about to collide any static or dynamic object along it`s trajectory.After adding rigidbody it applies the momentum force in the forward direction of the explosive specified in the field called 'Force Momentum'.For convenience reasons this script has fields that allow to set the properties of the rigidbody prior to its creation.</p> <p></p> Fields Info Explosive Device Component Drag and drop explosive explosion script attached with this gameObject from the hierarchy or within the inspector into this field. Explosive Rigidbody Mass Specify the value for Explosive rigidbody mass. Explosive Rigidbody Drag Specify the value for Explosive rigidbody drag. Explosive Rigidbody Angular Drag Specify the value for Explosive angular drag. Explosive Rigidbody Use Gravity If checked, rigidbody will use gravity. Explosive Rigidbody Is Kinematic If checked, rigidbody will be set as kinematic. Explosive Rigidbody Interpolate Specify the rigidbody interpolation. Explosive Rigidbody Collision Detection Mode Choose one of the collision detection modes for the rigidbody. Force Momentum On Collision Determines the force momentum applied to the grenade in the forward direction when it collides with an object such as a wall or roof. Example: If set to 10, the grenade will experience a forward impulse force of 10 units upon collision."},{"location":"AI_GrenadeSetup.html#explosive-device","title":"Explosive Device","text":"<p>This script contains parameters  of the explosion.</p> <p></p> Fields Info Explosive Mesh Drag and drop the Explosive gameObject from the hierarchy into this field to deactivate when it will explode. Explosion Vfx Drag and drop Explosive`s child VFX explosion prefab into this field. Explosion Sound Drag and drop explosion sound from the project tab. Delay Explosion Specify delay before explosion. Kill Radius Drag and drop the component called 'Kill radius' from the hierarchy into this field. Injury Radius Drag and drop the component called 'Injury radius' from the hierarchy into this field. Explosive Notificator Drag and drop the gameobject component called 'Explosive Notificator' with the script called 'Explosive Notificator' from the Explosive hierarchy into this field. Explosive Notificator On Ground Only If enabled than Ai agent may or may not react to the incoming Explosive depending on the situation and in case the Explosive alert behaviour is activated on that Ai agent or not. If enabled then 'ExplosiveNotificator' will be activated only after Explosive is landed on the surface. Min Time To Activate Explosive Notificator Minimum time to wait before activating ExplosiveNotificator radius. Max Time To Activate Explosive Notificator Maximum time to wait before activating ExplosiveNotificator radius. Explosive Sound Alert Radius Drag and drop game object named 'ExplosiveSoundAlertRadius' with Sound Manager Script attached to it from the Explosive hierarchy into this field. Can Explode In Air If checked than the explosion timer will start from the launch of the Explosive, but if unchecked than the timer will start only upon landing of the Explosive. Explosive Rigidbody Mass Specify the value for Explosive rigidbody mass. Explosive Rigidbody Drag Specify the value for Explosive rigidbody drag. Explosive Rigidbody Angular Drag Specify the value for Explosive angular drag. Explosive Rigidbody Use Gravity If checked, rigidbody will use gravity. Explosive Rigidbody Is Kinematic If checked, rigidbody will be set as kinematic. Explosive Rigidbody Interpolate Specify the rigidbody interpolation. Explosive Rigidbody Collision Detection Mode Choose one of the collision detection modes for the rigidbody. Force Momentum On Collision Determines the force momentum applied to the grenade in the forward direction when it collides with an object such as a wall or roof. Example: If set to 10, the grenade will experience a forward impulse force of 10 units upon collision."},{"location":"AI_GrenadeSetup.html#explosive-notificator","title":"Explosive Notificator","text":"<p>This script is responsible for explosion behaviour of the grenade and also thus notify other humanoid Ai agent's about incoming grenade.This script is responsible to notify other humanoid Ai agent to sprint away from the incoming grenade based upon the configuration of the humanoid Ai agent.</p> <p></p>"},{"location":"AI_GrenadeSetup.html#explosive-damage","title":"Explosive Damage","text":"<p>This script is responsible for explosion behaviour of the grenade and also thus notify other humanoid Ai agent's about incoming grenade.This script is responsible for grenade damage behaviour to other entites in game like - Player or Ai.</p> <p></p> Fields Info Explosive Device Component Drag and drop 'ExplosiveDevice' script from the hierarchy into this field. Damage Specify the damage the grenade will give to other entities if touched by this trigger. In case target is behind a wall or cover then this value will not be used. Min Explosive Force Minimum explosive force value will be applied to other Humanoid AI agents on grenade explosion. The higher the value, the higher the humanoid AI agent will fly if caught in the grenade trap. For the player, this value is not true, but you can add a camera shaker effect script to the player's camera and tweak the values there, which will shake the player's camera. Max Explosive Force Maximum explosive force value will be applied to other Humanoid AI agents on grenade explosion. The higher the value, the higher the humanoid AI agent will fly if caught in the grenade trap. For the player, this value is not true, but you can add a camera shaker effect script to the player's camera and tweak the values there, which will shake the player's camera. Explosion Radius Explosive radius value will be applied to other Humanoid AI agents on grenade explosion if they are within the explosion radius. The higher the value, the higher the humanoid AI agent will fly if caught in the grenade trap. For the player, this value is not true, but you can add a camera shaker effect script to the player's camera and tweak the values there, which will shake the player's camera. Time To Deactivate Time to deactivate the grenade damage script. Debug Raycast From Origin To Target Position If enabled, then before explosion, this script will draw a raycast from the origin point to the target destination. Enemy Raycaster Drag and drop the enemy raycaster gameObject from the hierarchy into this field. Object Detector Drag and drop the object detector gameObject from the hierarchy into this field. Ignored Layers Specify the layers to be ignored when raycasting using 'EnemyRaycaster' and 'ObjectDetector'. Randomise Damage Behind Cover If enabled, then either the 'MinDamageBehindCover' will be applied or the 'MaxDamageBehindCover' on grenade explosion. If disabled, then only 'MinDamageBehindCover' will be applied. Min Damage Behind Cover Specify the minimum damage to give to the target behind cover. Max Damage Behind Cover Specify the maximum damage to give to the target behind cover."},{"location":"AI_GrenadeThrow.html","title":"Grenade Throw Part-2","text":""},{"location":"AI_GrenadeThrow.html#introduction","title":"Introduction","text":"<p>This is the Part-2 of AI Grenades and in this part you will learn about fields inside the 'Humanoid Grenade Thrower' script.</p>"},{"location":"AI_GrenadeThrow.html#use-grenades","title":"Use Grenades","text":"<p>To make Humanoid AI agent to be able to throw grenades at his enemies. You need to enable use grenades checkbox by going to 'Core AI Behaviour' script and than under  'Combat state behaviours' check the checkbox 'Use Grenades'.</p> <p></p>"},{"location":"AI_GrenadeThrow.html#humanoid-grenade-thrower","title":"Humanoid Grenade Thrower","text":"<p>This script lets humanAI agent to throw grenades at enemies.</p> <p></p> Fields Info Randomise Grenades Equipment If checked then spawned AI agent will or will not have grenades to throw for his entire lifespan. Throwing Grenades Probability If set to 100 AI agent will always throw grenades at enemies if within grenade throwing range. AI Animator Component Drag and drop animator that includes a grenade throwing animation clip. Grenade Throw Animation Speed Speed of the grenade throw animation. Spawn Type Lets you choose which of the two available grenade spawning methods will be used. First option is 'Spawn using object pooler' for optimizing processor performance by allocating a couple of megabytes of RAM for storage of a predefined amount of grenades to be pooled from the memory. Second option is 'Spawn Using Instantiation' which does not require extra RAM allocation and relies entirely on the CPU and contributes to garbage collection process. Choose one of the two options depending on the target device or platform. Usually first option is more preferable for mobile devices. In the case of consoles or desktop, it will not make any noticeable difference. If spawn using object pooler option is selected, then the user has to specify the overall amount of grenades inside the object pooler script. Grenade Collision Raycast Delay Specify the time when Grenade collision raycasting will be enabled when the grenade is thrown by the AI agent. Show Grenade Collision Raycast Display raycast from origin point in 6 directions - Forward, backward, right, left, Up, and down to detect colliders. Grenade Collision Check Raycast Distance Distance to create raycast from origin point in 6 directions - Forward, backward, right, left, Up, and down to detect colliders. Prelanding Rigidbody Activation Distance The Distance when the thrown grenade will activate rigidbody on it. Enemy Ground Proximity Check This field helps AI agent to know if the enemy is a viable target for a hand grenade. To prevent the agent from spending his grenades trying to destroy aerial targets that are above the specified altitude. Min Grenade Throwing Range Min allowed distance towards the enemy for throwing grenades. As soon as enemies are within the specified distance AI agent will be able to throw the grenades. Max Grenade Throwing Range Max allowed distance towards the enemy for throwing grenades. As soon as enemies are within the specified distance AI agent will be able to throw the grenades. Number Of Grenades Amount of grenades carried by AI agent. Grenade Name This field becomes relevant if 'Spawn using object pooler' option is selected. Name in the field should match the name of grenade prefab in object pooler for AI agent to be able to spawn grenades for the grenade attacks. If 'Spawn Using Instantiation' option is selected then Grenade Prefab field which is located below becomes relevant for grenade throwing ability. Find Enemies Script Drag and drop 'Find enemies' component from the top of the inspector into this field. Throw Angle Defines the trajectory of the thrown grenade. Grenade Spawn Delay Delays grenade spawn to match animation length and spawn it at the right moment of grenade throw animation. Throw Accuracy Error Affect how close or far away grenade will land from the target. The bigger the value the bigger the distance from the target to the place where the grenade lands. Grenade Prefab Drag and drop grenade prefab from the project folder into this field. Different AI agent types can have their own unique grenade. Grenade Spawn Point Drag and drop skeletal bone or its child object for grenade origin point at spawn. Left Hand Thumb Drag and drop Left hand thumb bone which is the child of the pelvis bone from the hierarchy into this field. AI Weapon Drag and drop weapons which are the child of the pelvis bone from the hierarchy into this field. Delay Weapon Default Parenting Delay time for weapon to be set back to its default parenting. Min Check Time For Throw To set minimum time intervals for AI agent to check if conditions are suitable for grenade throw. Max Check Time For Throw To set maximum time intervals for AI agent to check if conditions are suitable for grenade throw. Grenade Throw Animation Clip This field is responsible for applying the correct delay before grenade spawn when AI agent is performing grenade throw. It is referencing the time length of the grenade throw animation clip being played inside the animator controller. This functionality is achieved by putting the same animation clip that is played inside the animator controller into this field. Grenade Animation State Name Copy the name of the animation state from GRENADE layer inside the animator controller and paste it into this field. Grenade thrower script is referencing the name of the animation state inside the GRENADE layer of the animator controller to playback whatever animation clip is within that state. Make sure that the text in this field is exactly the same as the name of the animation state this field is referencing. Do Raycast Checks Before Grenade Throw Enable this checkbox only if you want the AI agent to do raycast checks before throwing a grenade towards the enemy. If your level is simple where you want the AI agent to throw a grenade in every situation you can disable this checkbox i.e fighting on 2 sides of the roof. Whereas if your level is complicated i.e construction site where lots of geometry is involved like stairs. You can enable this checkbox which will then make sure that AI agent does proper raycast checks towards the enemy before grenade throw. Roof Check Raycaster Drag and drop 'Roof Check Raycaster' gameObject attached as a child of this AI agent. Direct Enemy Raycaster Drag and drop 'Enemy Raycaster' gameObject attached as a child of this AI agent. Horizontal Raycaster Drag and drop 'Horizontal Raycaster' gameObject attached as a child of this AI agent. Upwards Raycast Distance Specify what would be the highest point the raycast will be drawn to detect obstacles before deciding whether to throw the grenade or not. While this is not the only condition for AI agent to check for before deciding whether to throw the grenade or not. Suppose if this condition is true meaning there is a roof above AI agent but the enemy is clearly visible to AI agent according to 'Enemy Raycaster' then AI agent will throw the grenade. One of the conditions should be true before deciding whether to throw the grenade or not."},{"location":"AI_StandFiringCover.html","title":"Stand Firing Cover","text":""},{"location":"AI_StandFiringCover.html#introduction","title":"Introduction","text":"<p>This is the Part-3 of Humanoid AI Covers and in this part you will learn about how to setup the Stand firing cover.</p>"},{"location":"AI_StandFiringCover.html#stand-firing-cover_1","title":"Stand Firing Cover","text":"<p>To setup the stand firing cover first you need to drag and drop the model from the project to the hierarchy and rename it  to 'Stand Firing Cover' and than follow the steps below :</p> <p>1.First Add the primitive collider to this model(renamed to stand firing cover) example - Box,Capsule Collider etc.. whichever is more suitable.</p> <p>2.Add the 'Nav Mesh Obstacle' component to the stand firing cover gameObject and adjust it.</p> <p>3.Add the 'AI Cover script' component.</p> <p>4.Add the 'Debug Cover State' component to it.</p> <p>5.After this you need to create an empty gameObject as a child of the stand firing cover gameObject and call it as 'Cover Point' and in that gameObject add a capsule collider and set it to be is trigger.</p> <p>6.Add the 'Cover Node' component to this child gameObject.</p> <p> </p>"},{"location":"AI_StandFiringCover.html#setup-open-fire-points","title":"Setup Open Fire Points","text":"<p>Open Fire Points allow the agent to stand Or crouch and shoot at his enemy after occupying the cover point.This behaviour may be set the way so that Ai agent would cycle between cover point and open fire point (i.e return to the cover point after open fire point's timer is expired and vice versa) for entirety of combat state unless this cover becomes invalid.Open fire points are of stand type by default.If you want open fire point to be of crouch type then you have to setup open fire point to be crouch type by selecting its tag to be 'CrouchFirePoint'.</p> <p>To setup the open fire points you need to right click to create an empty gameObject as a child of the stand firing cover gameObject and call it as 'Open Fire Point' and place it in the scene view wherever you want but just make sure it is close to the NavMesh and after that if you want to use it follow the steps provided below :</p> <p>1.Select the cover point and check the checkbox 'Use Open Fire Points' located in the script 'Cover Node'.</p> <p>2.Drag and drop the 'Open Fire Point' to the array list called 'Open Fire Points'.</p> <p>TO MAKE THE OPEN FIRE POINT TO BE CROUCHING FIRE POINT FOR THE AGENT YOU JUST NEED TO CHANGE THE 'Open Fire Point' GAMEOBJECT TAG OF TO BE 'CrouchFirePoint'.</p>"},{"location":"AI_StandFiringCover.html#setup-secondary-open-fire-points","title":"Setup Secondary Open Fire Points","text":"<p>'Secondary Open Fire Point' is a backup option for the cases when predefined 'Open Fire Point' is unavailable(occupied coz same OpenFirePoint can be setup to be shared between few cover nodes,or not provided at all for this cover node). It can be  created within specified radius from this cover node.In case this would not be desirable option due to the possibility for Ai agent to pick bad spot like in front of the cover if the value of that radius is big enough to allow that,then this value can be made small enough to force Ai agent to just stand up from the 'Crouch Cover Point' and shoot his weapon (If this node is setup to be crouch cover type).If none of the solutions above are suitable for the cover you are making,then you can create an empty game object, position it the way you like and drag and drop it into this field.This way the radius for the random OpenFirePoint will be created from that game object instead of cover node itself.</p> <p>To setup the secondary open fire point you need to right click to create an empty gameObject as a child of the stand firing cover gameObject and call it as 'Secondary Open Fire Point' and place it in the scene view wherever you want but just make sure it is close to the NavMesh and after that if you want to use it follow the steps provided below :</p> <p>There will be two sitations where the agent will going to prefer using the 'Secondary Open Fire Point'. </p> <p>1.When the 'Open Fire Point' is not defined in the game.</p> <p>2.When the 'Open Fire Point' is defined but other agent friendly agent is already occupying it. </p>"},{"location":"AI_StandFiringCover.html#ai-cover-script","title":"AI Cover Script","text":"<p>This is the cover assembly parent script.It is defining accessibility of the various child cover nodes based on the enemy visibility conditions for those cover points.There are 5 types of cover nodes that can be assembled in any combination to provide general cover behaviour for combat situations. 4 of the 5 cover points are used during AI agents  combat state.When request is made to the cover assembly for availability of it`s child cover nodes then the visibility check is done by all cover points in the assembly.Those cover points that have Ai agents current closest enemy within their field of view(240 degrees) are discarded as invalid. The remaining valid cover points ar then sorted by AI agent and best cover point is selected. It is the cover point that has the biggest angle to turn towards current enemy of interest  directly.In other words the on that is closest to being directly opposite to the current closest enemy of Ai agent who made cover request.Fifth cover node type is called 'Emergency Cover' and is designed for the non combat or pre-combat cover behaviour.For example  when Ai agents are under the threat but can not detect and locate the attackers.In this case they will sprint towards emergency cover and will hide there for some specified amount of time before moving out towards supposed enemy position by performing movement between available emergency covers and/or sprinting  in a zigzag pattern to increase their survival chances.</p> Fields Info Single Agent Cover This checkbox limits the cover assembly capacity to only one AI agent at a time regardless of how many child cover nodes it has. Universal Hiding Cover Enables this cover assembly to become available for all AI agents of both opposing teams. This allows opposing Ai agents to occupy opposite Hide Cover nodes of the same Cover assembly. Specific Team Cover Specifies team that is allowed to access this cover assembly.Useful for saving  performance in cases when  there is no possible way for second team to reach and  occupy this cover assembly that is on the roof of the building for example or any other isolated area.If checked then additional 'Team Name' field will appear to enter the name of the designated team. Team Name If the above field name 'SpecificTeamCover' is checked than it is required to enter the TeamName for which this whole cover can be available too."},{"location":"AI_StandFiringCover.html#debug-cover-state-script","title":"Debug Cover State Script","text":"<p>The 'DebugCoverState' script is designed to assist in debugging the cover system, specifically for Humanoid AI agents. It provides visual feedback on the state of cover points (vacant, occupied, or invalid) by displaying debug information using TextMeshPro components.</p> Fields Info Enable Debugging Toggle to activate or deactivate debugging features. Debug Info Text UI Drag and drop TextMeshPro prefab named 'DebugInfoUI_Covers &amp; FirePoints' from the project window into this field. This field is responsible for debugging cover state in a form of text whether it is vacant, occupied, or invalid. It is displaying the responses of the cover points to AI agent requests. Debug text is displayed for a specified amount of time right after a request is made from an Ai agent for available cover points of this assembly. The shorter you set the time for the debug text to stay, the more subsequent responses it will be able to display. Debug Info Text UI Offset Sets the position of debugging text relative to the cover node. Min Debug Text Visibility Time Minimum Time of Debug Text Visibility. If you configure the text display time to be very short, it will have a better chance to indicate more responses from Cover Points to AI agents for available covers of this cover assembly. Max Debug Text Visibility Time Maximum Time of Debug Text Visibility. If you configure the text display time to be very short, it will have a better chance to indicate more responses from Cover Points to AI agents for available covers of this cover assembly. Debug Text Colors Configure text colors based on the state of the cover points. Team Name Type in the name of the team you came up with into this field. Occupying Text Color This text is displayed on top of the cover point as soon as the Ai agent made a request to this cover assembly and got approved with a cover point. Text will start to be displayed immediately after the cover point gets assigned to Ai agent even before said Agent will reach that cover point. Vacant Text Color 'Vacant' text is displayed right after Ai agent's request for the available cover points on top of the points not chosen by AI agent but are still valid for the time being. In this case, another Ai agent from the same team might make his own request to this cover assembly for the cover and will be provided with those remaining 'Vacant' cover points for him to choose the most suitable one to be occupied. Invalid Text Color Invalid text is displayed right after Ai agent's request for the available cover points on top of the points when they are invalid and can't be registered at that moment. It will display on those cover points which are invalid at that moment."},{"location":"AI_StandFiringCover.html#cover-node-script","title":"Cover Node Script","text":"<p>This script allows for creation of 4 types of cover nodes. First type of cover node is called 'Crouch Firing Cover'. Its forcing AI agent to crouch while occupying it. And allows AI agent to perform crouch fire at the enemies.Second crouch type of cover node(point) is called 'Crouch Hiding cover'.Its also forcing occupying AI Agent to crouch but does not allow Ai agent to shoot.Third and fourth cover nodes (points) types are called 'Stand Firing Cover' and 'Stand Hiding Cover'. They are the same as the first two crouching nodes with the only difference being is that they are forcing covering Ai agents to stand.</p> Fields Info Choose Cover Type Select one of the available cover types (that are described in the script info) for this cover node. Use Open Fire Points Allows the use of additional 'Open Fire Points' for Ai agent behind cover. Game object named 'Open Fire Point' is the auxiliary element of the cover assembly that can be useful to both Firing and Hiding cover variations. For Firing covers - as an additional firing point for variety of firing behaviour of Ai agent in Firing covers. And for Hiding covers it is the only possible way for Ai agent behind those covers to be able to shoot at enemies. There is a set of timers in 'Core Ai Behaviour' script's paragraph named 'Ai Covers' that regulate covering related behaviours including Open Fire Points related parameters. Open Fire Points Add one or more 'Open Fire Point(s)' to this cover assembly for Ai agent(s) to use after cover occupying time is expired. This behaviour may be set the way so that Ai agent would cycle between cover point and open fire point (i.e return to the cover point after open fire point's timer is expired and vice versa) for entirety of combat state unless this cover becomes invalid. Open fire points are of stand type by default. If you want open fire point to be of crouch type then you have to setup open fire point to be crouch type by selecting its tag to be 'CrouchFirePoint'. Secondary Open Fire Point 'Secondary Open Fire Point' is a backup option for the cases when predefined 'Open Fire Point' is unavailable (occupied because same OpenFirePoint can be setup to be shared between few cover nodes, or not provided at all for this cover node). It can be created within specified radius from this cover node. In case this would not be desirable option due to the possibility for Ai agent to pick bad spot like in front of the cover if the value of that radius is big enough to allow that, then this value can be made small enough to force Ai agent to just stand up from the 'Crouch Cover Point' and shoot his weapon (If this node is setup to be crouch cover type). If none of the solutions above are suitable for the cover you are making, then you can create an empty game object, position it the way you like and drag and drop it into this field. This way the radius for the random OpenFirePoint will be created from that game object instead of cover node itself. Secondary Open Fire Point Radius Value of this field sets the limit for 'Procedural Open Fire Point Radius' within which open fire point coordinate will be created. Stand Hide Cover Directions This list of up to 3 hiding directions or hiding positions for Ai agent to assume when occupying Hiding cover. Neutral, Left, and Right. All 3 directions may be useful in case of a 3D object for this Cover assembly being something like a column or a pillar. Ai agent then will orient himself in any of the available directions depending on closer to which side of the cover the closest enemy currently is situated. Stand Hide Cover Animation Player In case chosen cover node type is 'Stand Hiding Cover' and Stand Hide Cover Directions are set in the fields above, than this list will provide animation clips to be played back by AI agent occupying this Stand Hiding Cover for each respected direction. Which one of those 3 hiding directions will be selected and which one of the 3 corresponding stand hiding animations will be used by hiding AI agent is decided by the direction of the closest enemy that Ai agent will be hiding from. Stand Hiding Cover node can have 3, 2 or as little as one hiding direction based on near what kind of 3d object this node is placed. If it is a column or a pillar like 3d object then you might set all 3 hiding directions. If it is something like edge of the wall or side of the gates or the corner of the building then 2 hiding directions will be enough. You can get away with only one 'Neutral' hiding posture for the Ai agent if you'd like. It is not mandatory to have all 3 or 2 directions for any given 'Stand Hiding Cover' node."},{"location":"AI_StandHidingCover.html","title":"Stand Hiding Cover","text":""},{"location":"AI_StandHidingCover.html#introduction","title":"Introduction","text":"<p>This is the Part-4 of Humanoid AI Covers and in this part you will learn about how to setup the Stand Hiding cover.</p>"},{"location":"AI_StandHidingCover.html#stand-hiding-cover_1","title":"Stand Hiding Cover","text":"<p>To setup the stand hiding cover first you need to drag and drop the model from the project to the hierarchy and rename it  to 'Stand Hiding Cover' and than follow the steps below :</p> <p>1.First Add the primitive collider to this model(renamed to stand Hiding cover) example - Box,Capsule Collider etc.. whichever is more suitable.</p> <p>2.Add the 'Nav Mesh Obstacle' component to the stand hiding cover gameObject and adjust it.</p> <p>3.Add the 'AI Cover script' component.</p> <p>4.Add the 'Debug Cover State' component to it.</p> <p>5.After this you need to create an empty gameObject as a child of the stand hiding cover gameObject and call it as 'Cover Point' and in that gameObject add a capsule collider and set it to be is trigger.</p> <p>6.Add the 'Cover Node' component to this child gameObject and rename it to 'Cover Point'.</p> <p>7.In this 'Cover Point' gameObject you need add 4 gameObjects named as:Rotation Controller,Neutral,Left Turn Direction and Right Turn Direction [See the image below]. Setup these points as shown in the video above.</p> <p> </p>"},{"location":"AI_StandHidingCover.html#setup-open-fire-points","title":"Setup Open Fire Points","text":"<p>Open Fire Points allow the agent to stand Or crouch and shoot at his enemy after occupying the cover point.This behaviour may be set the way so that Ai agent would cycle between cover point and open fire point (i.e return to the cover point after open fire point's timer is expired and vice versa) for entirety of combat state unless this cover becomes invalid.Open fire points are of stand type by default.If you want open fire point to be of crouch type then you have to setup open fire point to be crouch type by selecting its tag to be 'CrouchFirePoint'.</p> <p>To setup the open fire points you need to right click to create an empty gameObject as a child of the stand firing cover gameObject and call it as 'Open Fire Point' and place it in the scene view wherever you want but just make sure it is close to the NavMesh and after that if you want to use it follow the steps provided below :</p> <p>1.Select the cover point and check the checkbox 'Use Open Fire Points' located in the script 'Cover Node'.</p> <p>2.Drag and drop the 'Open Fire Point' to the array list called 'Open Fire Points'.</p> <p>TO MAKE THE OPEN FIRE POINT TO BE CROUCHING FIRE POINT FOR THE AGENT YOU JUST NEED TO CHANGE THE 'Open Fire Point' GAMEOBJECT TAG OF TO BE 'CrouchFirePoint'.</p>"},{"location":"AI_StandHidingCover.html#setup-secondary-open-fire-points","title":"Setup Secondary Open Fire Points","text":"<p>'Secondary Open Fire Point' is a backup option for the cases when predefined 'Open Fire Point' is unavailable(occupied coz same OpenFirePoint can be setup to be shared between few cover nodes,or not provided at all for this cover node). It can be  created within specified radius from this cover node.In case this would not be desirable option due to the possibility for Ai agent to pick bad spot like in front of the cover if the value of that radius is big enough to allow that,then this value can be made small enough to force Ai agent to just stand up from the 'Crouch Cover Point' and shoot his weapon (If this node is setup to be crouch cover type).If none of the solutions above are suitable for the cover you are making,then you can create an empty game object, position it the way you like and drag and drop it into this field.This way the radius for the random OpenFirePoint will be created from that game object instead of cover node itself.</p> <p>To setup the secondary open fire point you need to right click to create an empty gameObject as a child of the stand firing cover gameObject and call it as 'Secondary Open Fire Point' and place it in the scene view wherever you want but just make sure it is close to the NavMesh and after that if you want to use it follow the steps provided below :</p> <p>There will be two sitations where the agent will going to prefer using the 'Secondary Open Fire Point'. </p> <p>1.When the 'Open Fire Point' is not defined in the game.</p> <p>2.When the 'Open Fire Point' is defined but other agent friendly agent is already occupying it. </p>"},{"location":"AI_StandHidingCover.html#ai-cover-script","title":"AI Cover Script","text":"<p>This is the cover assembly parent script.It is defining accessibility of the various child cover nodes based on the enemy visibility conditions for those cover points.There are 5 types of cover nodes that can be assembled in any combination to provide general cover behaviour for combat situations. 4 of the 5 cover points are used during AI agents  combat state.When request is made to the cover assembly for availability of it`s child cover nodes then the visibility check is done by all cover points in the assembly.Those cover points that have Ai agents current closest enemy within their field of view(240 degrees) are discarded as invalid. The remaining valid cover points ar then sorted by AI agent and best cover point is selected. It is the cover point that has the biggest angle to turn towards current enemy of interest  directly.In other words the on that is closest to being directly opposite to the current closest enemy of Ai agent who made cover request.Fifth cover node type is called 'Emergency Cover' and is designed for the non combat or pre-combat cover behaviour.For example  when Ai agents are under the threat but can not detect and locate the attackers.In this case they will sprint towards emergency cover and will hide there for some specified amount of time before moving out towards supposed enemy position by performing movement between available emergency covers and/or sprinting  in a zigzag pattern to increase their survival chances.</p> Fields Info Single Agent Cover This checkbox limits the cover assembly capacity to only one AI agent at a time regardless of how many child cover nodes it has. Universal Hiding Cover Enables this cover assembly to become available for all AI agents of both opposing teams. This allows opposing Ai agents to occupy opposite Hide Cover nodes of the same Cover assembly. Specific Team Cover Specifies team that is allowed to access this cover assembly.Useful for saving  performance in cases when  there is no possible way for second team to reach and  occupy this cover assembly that is on the roof of the building for example or any other isolated area.If checked then additional 'Team Name' field will appear to enter the name of the designated team. Team Name If the above field name 'SpecificTeamCover' is checked than it is required to enter the TeamName for which this whole cover can be available too."},{"location":"AI_StandHidingCover.html#debug-cover-state-script","title":"Debug Cover State Script","text":"<p>The 'DebugCoverState' script is designed to assist in debugging the cover system, specifically for Humanoid AI agents. It provides visual feedback on the state of cover points (vacant, occupied, or invalid) by displaying debug information using TextMeshPro components.</p> Fields Info Enable Debugging Toggle to activate or deactivate debugging features. Debug Info Text UI Drag and drop TextMeshPro prefab named 'DebugInfoUI_Covers &amp; FirePoints' from the project window into this field. This field is responsible for debugging cover state in a form of text whether it is vacant, occupied, or invalid. It is displaying the responses of the cover points to AI agent requests. Debug text is displayed for a specified amount of time right after a request is made from an Ai agent for available cover points of this assembly. The shorter you set the time for the debug text to stay, the more subsequent responses it will be able to display. Debug Info Text UI Offset Sets the position of debugging text relative to the cover node. Min Debug Text Visibility Time Minimum Time of Debug Text Visibility. If you configure the text display time to be very short, it will have a better chance to indicate more responses from Cover Points to AI agents for available covers of this cover assembly. Max Debug Text Visibility Time Maximum Time of Debug Text Visibility. If you configure the text display time to be very short, it will have a better chance to indicate more responses from Cover Points to AI agents for available covers of this cover assembly. Debug Text Colors Configure text colors based on the state of the cover points. Team Name Type in the name of the team you came up with into this field. Occupying Text Color This text is displayed on top of the cover point as soon as the Ai agent made a request to this cover assembly and got approved with a cover point. Text will start to be displayed immediately after the cover point gets assigned to Ai agent even before said Agent will reach that cover point. Vacant Text Color 'Vacant' text is displayed right after Ai agent's request for the available cover points on top of the points not chosen by AI agent but are still valid for the time being. In this case, another Ai agent from the same team might make his own request to this cover assembly for the cover and will be provided with those remaining 'Vacant' cover points for him to choose the most suitable one to be occupied. Invalid Text Color Invalid text is displayed right after Ai agent's request for the available cover points on top of the points when they are invalid and can't be registered at that moment. It will display on those cover points which are invalid at that moment."},{"location":"AI_StandHidingCover.html#cover-node-script","title":"Cover Node Script","text":"<p>This script allows for creation of 4 types of cover nodes. First type of cover node is called 'Crouch Firing Cover'. Its forcing AI agent to crouch while occupying it. And allows AI agent to perform crouch fire at the enemies.Second crouch type of cover node(point) is called 'Crouch Hiding cover'.Its also forcing occupying AI Agent to crouch but does not allow Ai agent to shoot.Third and fourth cover nodes (points) types are called 'Stand Firing Cover' and 'Stand Hiding Cover'. They are the same as the first two crouching nodes with the only difference being is that they are forcing covering Ai agents to stand.</p> Fields Info Choose Cover Type Select one of the available cover types (that are described in the script info) for this cover node. Use Open Fire Points Allows the use of additional 'Open Fire Points' for Ai agent behind cover. Game object named 'Open Fire Point' is the auxiliary element of the cover assembly that can be useful to both Firing and Hiding cover variations. For Firing covers - as an additional firing point for variety of firing behaviour of Ai agent in Firing covers. And for Hiding covers it is the only possible way for Ai agent behind those covers to be able to shoot at enemies. There is a set of timers in 'Core Ai Behaviour' script's paragraph named 'Ai Covers' that regulate covering related behaviours including Open Fire Points related parameters. Open Fire Points Add one or more 'Open Fire Point(s)' to this cover assembly for Ai agent(s) to use after cover occupying time is expired. This behaviour may be set the way so that Ai agent would cycle between cover point and open fire point (i.e return to the cover point after open fire point's timer is expired and vice versa) for entirety of combat state unless this cover becomes invalid. Open fire points are of stand type by default. If you want open fire point to be of crouch type then you have to setup open fire point to be crouch type by selecting its tag to be 'CrouchFirePoint'. Secondary Open Fire Point 'Secondary Open Fire Point' is a backup option for the cases when predefined 'Open Fire Point' is unavailable (occupied because same OpenFirePoint can be setup to be shared between few cover nodes, or not provided at all for this cover node). It can be created within specified radius from this cover node. In case this would not be desirable option due to the possibility for Ai agent to pick bad spot like in front of the cover if the value of that radius is big enough to allow that, then this value can be made small enough to force Ai agent to just stand up from the 'Crouch Cover Point' and shoot his weapon (If this node is setup to be crouch cover type). If none of the solutions above are suitable for the cover you are making, then you can create an empty game object, position it the way you like and drag and drop it into this field. This way the radius for the random OpenFirePoint will be created from that game object instead of cover node itself. Secondary Open Fire Point Radius Value of this field sets the limit for 'Procedural Open Fire Point Radius' within which open fire point coordinate will be created. Stand Hide Cover Directions This list of up to 3 hiding directions or hiding positions for Ai agent to assume when occupying Hiding cover. Neutral, Left, and Right. All 3 directions may be useful in case of a 3D object for this Cover assembly being something like a column or a pillar. Ai agent then will orient himself in any of the available directions depending on closer to which side of the cover the closest enemy currently is situated. Stand Hide Cover Animation Player In case chosen cover node type is 'Stand Hiding Cover' and Stand Hide Cover Directions are set in the fields above, than this list will provide animation clips to be played back by AI agent occupying this Stand Hiding Cover for each respected direction. Which one of those 3 hiding directions will be selected and which one of the 3 corresponding stand hiding animations will be used by hiding AI agent is decided by the direction of the closest enemy that Ai agent will be hiding from. Stand Hiding Cover node can have 3, 2 or as little as one hiding direction based on near what kind of 3d object this node is placed. If it is a column or a pillar like 3d object then you might set all 3 hiding directions. If it is something like edge of the wall or side of the gates or the corner of the building then 2 hiding directions will be enough. You can get away with only one 'Neutral' hiding posture for the Ai agent if you'd like. It is not mandatory to have all 3 or 2 directions for any given 'Stand Hiding Cover' node."},{"location":"FriendlyFire.html","title":"Friendly Fire","text":""},{"location":"FriendlyFire.html#introduction","title":"Introduction","text":"<p>This video guides you on how to setup the friendly fire for the player. </p>"},{"location":"FriendlyFire.html#add-the-scripts","title":"Add The Scripts","text":"<p>Select the Player and add two scripts - Friendly Fire and Cross hair color changer and assign the necessary gameObjects and components like shown in the video tutorial above.Your setup should look like this.</p> <p></p>"},{"location":"FriendlyFire.html#activate-the-soldier-ai","title":"Activate the Soldier AI","text":"<p>First,you need to activate back the soldier AI from the hierarchy and change its Team ID to be 'Team1' to match the Player Team ID. Change the health of the AI agent to be 100.</p> <p></p>"},{"location":"FriendlyFire.html#friendly-fire_1","title":"Friendly Fire","text":"<p>This script regulates friendly fire and its consequences to player.</p> Fields Info FriendlyFireOptions Select one of the available options for Friendly Fire: <ul> <li>GameOver: Ends the game as soon as the player shoots a friendly AI.</li> <li>PlayerBecomesTraitor: Friendly AI agents will shoot back at the player after a specified number of shots.</li> <li>DisableShootingFriendlies: Stops weapon functionality when pointing at friendly AI agents.</li> <li>FriendliesDoNotReact: Allows friendly fire without consequences for the player.</li> </ul> TargetsScript Drag and drop the Target script into this field. DefaultGameOverPanel Drag and drop the default Game Over panel from the hierarchy into this field. FriendlyFireGameOverPanel Drag and drop the Friendly Fire Game Over panel from the hierarchy into this field. WarningsToPlayer Number of times the player can shoot friendlies without being punished. MakePlayerTraitorImmediatelyIfFriendlyDie If enabled, the player becomes a traitor immediately after a nearby friendly dies. FriendlyFireGameOverUIActivationDelay Delay (in seconds) before activating the Game Over panel. RestartGameUIButton Drag and drop the respective button from the UI Canvas. AudioSourceComponent Audio source component used to play sounds based on friendly distance. AudioClipsToPlaybackBasedOnFriendlyDistance List of audio clips to play based on the distance of friendlies, with customizable ranges and volumes."},{"location":"FriendlyFire.html#cross-hair-color-changer","title":"Cross hair color changer","text":"<p>This script sets default crosshair color and  changes the color of the crosshair to the specified colors for the cases when crosshair is on friendly or  enemy Ai agents.</p> Fields Info FriendlyFireScript Drag and drop Player root game object with FriendlyFire script attached to it into this field. CrossHair Drag and drop crosshair image UI elements into this list. PlayerManagerComponent Drag and drop Player Manager from player's hierarchy into this field. DefaultCrossHairColor Choose a default color to use when not aiming at friendlies or enemies, such as when looking at the environment or props. OnEnemyCrosshairColor Choose a color for crosshair to change when aiming at an enemy. OnFriendlyCrossHairColor Choose a color for crosshair to change when aiming at a friendly."},{"location":"GetStarted.html","title":"Welcome To Mobile Action Kit","text":""},{"location":"GetStarted.html#introduction","title":"Introduction","text":"<p>Welcome to Mobile Action Kit, the ultimate toolkit for creating advanced mobile games! Whether you're developing a first-person shooter, a zombie survival game, or action-packed AI-driven missions, Mobile Action Kit has you covered. This comprehensive package is designed to save you time and accelerate your game development process while delivering professional-grade results.  </p>"},{"location":"GetStarted.html#features","title":"Features","text":""},{"location":"GetStarted.html#advanced-ai-systems","title":"\ud83e\udde0 Advanced AI Systems","text":"<ol> <li>Soldier AI </li> <li>Includes 54 tutorials for building advanced AI inspired by Gameloft\u2019s Modern Combat 5.  </li> <li> <p>Soldiers can fight as teams or individuals, take cover, follow leaders, and even react to player sounds.  </p> </li> <li> <p>Zombie AI </p> </li> <li>Features 15 detailed tutorials to create complex zombie behaviors.  </li> <li> <p>Zombies can swarm, hunt players, and behave differently based on game scenarios.  </p> </li> <li> <p>Turret AI </p> </li> <li>Turrets interact seamlessly with players, Soldier AI, and Zombie AI.  </li> <li>Perfect for creating automated defenses or offensive support.  </li> </ol>"},{"location":"GetStarted.html#player-systems","title":"\ud83c\udfae Player Systems","text":"<ul> <li>Includes 26 tutorials for setting up a fully customizable player system.  </li> <li>Features include:  </li> <li>Weapon setups.  </li> <li>Advanced controls.  </li> <li>Smooth first-person movement and interaction.  </li> </ul>"},{"location":"GetStarted.html#shop-menu-system","title":"\ud83d\uded2 Shop Menu System","text":"<ul> <li>Create dynamic menus for purchasing:  </li> <li>Weapons.  </li> <li>Player outfits.  </li> <li>Upgrades for your FPS game.  </li> <li>Fully customizable for your specific needs.  </li> </ul>"},{"location":"GetStarted.html#dynamic-ai-behavior","title":"\u2694\ufe0f Dynamic AI Behavior","text":"<ul> <li>AI soldiers can be friendly or enemies.  </li> <li>Behaviors include:  </li> <li>Taking cover under fire.  </li> <li>Dodging grenades.  </li> <li>Reacting to sounds.  </li> <li>Entering emergency defensive states.  </li> </ul>"},{"location":"GetStarted.html#cross-platform-support","title":"\ud83d\udca5 Cross-Platform Support","text":"<ul> <li>Designed specifically for mobile platforms but can also be adapted for PC.  </li> </ul>"},{"location":"GetStarted.html#bonus-assets","title":"Bonus Assets","text":"<p>As a Mobile Action Kit customer, you\u2019ll receive two free bonus assets:  </p> <ol> <li>Mobile Monetization Pro </li> <li>Automatically included for all buyers.  </li> <li> <p>Helps you implement effective monetization strategies in your games.  </p> </li> <li> <p>PC Input System </p> </li> <li>Available for free to customers interested in porting their games to PC.  </li> </ol>"},{"location":"GetStarted.html#why-choose-mobile-action-kit","title":"Why Choose Mobile Action Kit?","text":"<ul> <li>Save hundreds of hours with pre-made systems and tutorials.  </li> <li>Create AAA-quality features for your mobile or PC games.  </li> <li>Ideal for developers of all experience levels, from beginners to seasoned professionals.  </li> </ul> <p>Get started today and bring your vision to life with Mobile Action Kit!  </p>"},{"location":"Helibase.html","title":"\ud83c\udfae\ud83d\udc64HELI","text":""},{"location":"Helibase.html#weapon-setup","title":"Weapon Setup","text":"<p>The AI provided in the kit is really cool, and you should learn how to create your own AI system.    </p>"},{"location":"Helibase.html#setting-up-pistol","title":"Setting up Pistol","text":"<p>This section is essential. Tutorials For AI</p>"},{"location":"Helibase.html#emergency-cover","title":"Emergency Cover","text":"<p>This section is about emergency behavior.</p>"},{"location":"HumanoidAIBodyHits.html","title":"Humanoid Body Hits","text":""},{"location":"HumanoidAIBodyHits.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to enable and setup body hit animation for the humanoid AI agent.</p>"},{"location":"HumanoidAIBodyHits.html#enable-impact-animations","title":"Enable Impact Animations","text":"<p>First check the checkbox 'Use Impact Animations' located in the combat state behaviour.[See the image below] </p> <p></p> <p>Enabling this checkbox will enable the 'HumanoidBodyHits' script below.</p> <p> </p> Fields Info Animator Component Drag and drop into this field 'Animator' component located above in the inspector. Humanoid Ai Health Drag and drop into this field 'Humanoid Ai Health' component located above in the inspector. Min Time To Wait Until Next Animation Minimum time to wait until the next animation. Max Time To Wait Until Next Animation Maximum time to wait until the next animation. Play Combined Body Hit Animations Enable to play combined upper and lower body hit animations. Lower Body Hit Configuration for lower body hit animations. Lower Body Animations To Play Specify number of animations to add for this humanoid AI agent. Lower Body Animation Names Put the number of animation clips for AI agent to play when being hit by a bullet. Copy and paste names of those clips into the fields.To introduce visual variety and to avoid repetitive animations this list can have any amount of animation clips.Each time Ai agent is hit by a bullet random animation from this list will be played.  Lower Body Colliders Drag and drop all the bones from the lower body into this list. As long as all intended bones are in this list, the script will register all the hits to those colliders on those bones and will play respective animation clips. Upper Body Hit Configuration for upper body hit animations. Upper Body Animations To Play Specify number of animations to add for this humanoid AI agent. Upper Body Animation Names Put the number of animation clips for AI agent to play when being hit by a bullet. Copy and paste names of those clips into the fields.To introduce visual variety and to avoid repetitive animations this list can have any amount of animation clips.Each time Ai agent is hit by a bullet random animation from this list will be played. Upper Body Colliders Drag and drop all the bones from the upper body into this list. As long as all intended bones are in this list, the script will register all the hits to those colliders on those bones and will play respective animation clips."},{"location":"HumanoidAICharging.html","title":"Charging Behaviour","text":""},{"location":"HumanoidAICharging.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to achieve 'Charging' behaviour on the humanoid AI agent during combat state.</p>"},{"location":"HumanoidAICharging.html#ai-charging","title":"AI Charging","text":"<p>First enable 'Ai Charging' located in the combat state behaviour.[See the image below] </p> <p></p> <p>Enabling it will show Strafing options in the script which you can tweak to achieve the desired behaviour.</p> <p></p> Fields Info Enable Sprinting If unchecked, AI agent will perform assault by Walking/Running/Sprinting and shooting its target. Min Sprint Distance Minimal remaining distance to pursue point for the switch from walking or running to sprinting towards it. Max Sprint Distance Maximum distance for sprinting towards coordinate. Min Run Distance Minimal remaining distance to pursue point for the switch from walking or sprinting to running towards it. Max Run Distance Maximal remaining distance to pursue point for the switch from walking or sprinting to running towards it. Min Closest Distance To Stop Minimal closest distance to stop. Max Closest Distance To Stop Maximal closest distance to stop. Open Fire Behaviour Fields in this subsection are setting Ai agent's weapon firing behaviour while he is moving towards or between covers. This subsection is reused in 3 different combat related paragraphs: Ai Charging, Ai Covers, and Ai Firing Points. In each of these cases, this subsection defines Open Fire Behaviour in relation to the parent paragraph's subject. Stop And Shoot Probability This slider sets the probability of 'Stop And Shoot' behaviour while Ai agent is moving towards or between covers. Strafing Probability This slider sets the probability of 'Strafing' behaviour while Ai agent is moving towards or between covers. Min Stop And Shoot Distance To Enemy Or To Cover Minimal distance towards the cover to activate Stop&amp;Shoot behaviour. Max Stop And Shoot Distance To Enemy Or To Cover Maximum distance towards the cover to activate Stop&amp;Shoot behaviour. Min Time Till Stop And Shoot Behaviour Minimum time since Ai agent decided to go towards or between covers till he starts Stop&amp;Shoot behaviour. Max Time Till Stop And Shoot Behaviour Maximum time since Ai agent decided to go towards or between covers till he starts Stop&amp;Shoot behaviour. Min Stop And Shoot Duration Minimum duration in seconds of the Stop&amp;Shoot behaviour. Max Stop And Shoot Duration Maximum duration in seconds of the Stop&amp;Shoot behaviour. Debug Distances Values in this section will display the distance to target as well as random value between Min/Max SprintDistance and RunDistance. Debug Distance To Target Display the current distance to target. Debug Sprint Distance Display the random value of Min/Max SprintDistance. Debug Run Distance Display the random value of Min/Max RunDistance."},{"location":"HumanoidAIHeadRotation.html","title":"Head Rotations","text":""},{"location":"HumanoidAIHeadRotation.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to achieve head rotations on humanoid AI agent in Non combat behaviour.Firstly, you need to make sure to have the same Team ID as the player so we can test this behaviour on Humanoid AI agent.You can simply copy the Team ID from the target script attached with the player and paste it to the humanoid AI agent.[See the image]</p> <p></p>"},{"location":"HumanoidAIHeadRotation.html#enable-head-rotations","title":"Enable Head Rotations","text":"<p>To enable the head rotation select the Core AI Behaviour script and than expand the Non combat behaviour and check the checkbox 'Enable Head Rotations'.Checking this checkbox will enable the HeadIK script below where you can tweak the values to achieve the desired behaviour.</p> <p></p>"},{"location":"HumanoidAIHeadRotation.html#headik-script","title":"HeadIK Script","text":"Fields Info CoreAiBehaviour Script Drag and drop the 'CoreAiBehaviour' component attached with this Ai agent from the hierarchy into this field. Min Head Turning Speed The minimum speed with which the head bone of the Ai agent will turn towards LookAt points. Max Head Turning Speed The maximum speed with which the head bone of the Ai agent will turn towards LookAt points. Min Stare Time Minimum time to stare at LookAt point before turning towards another LookAt point. Max Stare Time Maximum time to stare at LookAt point before turning towards another LookAt point. Unlink LookAt Points If checked it will keep the head turning independent of scanning turns directions and unsync with them. Random Rotation If enabled than Ai agents head will rotate and look at the points randomly.If disabled then Ai agent will look at them in recurring fashion (0,1,2,0,1,2 etc). LookAt Points Assign child LookAtPoints from the hierarchy of this Ai agent to this list.They can be child game objects of Ai agent named and positioned according to their direction name(front, left, right, down, up, front up, left up, etc.)In which case the Ai agent head will be turning between them.Alternatively those LookAt points can be independently placed at a certain spots on the level and would not be child game objects of Ai agent.This would force Ai agent to focus on those independent LookAt points thus ensuring that Ai agent will concentrate on those directions.This would be useful for example for sniper bot observing only few particular areas of the level(certain building or a crossroad etc.)."},{"location":"HumanoidAIHealth.html","title":"Agent Health","text":""},{"location":"HumanoidAIHealth.html#introduction","title":"Introduction","text":"<p>This video will help you understand about 'Health Script' of the Humanoid AI agent.</p>"},{"location":"HumanoidAIHealth.html#health-script","title":"Health Script","text":"Fields Info Health Health of the Ai agent which get decreased when the Ai agent takes damage. Weak Point Damage Multiplier Multiplies the damage of the bullet or grenade with the value in this field. Enable Health Bar Enable this checkbox to spawn the 'Healthbar UI' on top of the Ai agent. Health Bar Prefab Drag and drop 'Healthbar UI' prefab from the project into this field. Stand Health Bar UI Offset Adjust the position of the spawned 'HealthBar UI' during the time Ai agent is standing. Crouch Health Bar UI Offset Adjust the position of the spawned 'HealthBar UI' during the time Ai agent is crouching. Enable Ragdoll If enabled for Ai agent than it will use the ragdoll physics when it dies. If disabled Ai agent will use random animation clips. Animator Component Drag and drop the animator component attached with this Ai agent from the hierarchy into this field. Stand Dying Animation State Names You can put one or several animation state names into the fields below for the Ai to playback when it dies during stand shooting.Names you put into the fields should precisely match the names of the animation states inside animator controller. Crouch Dying Animation State Names You can put one or several animation state names into the fields below for the Ai to playback when it dies during crouch shooting.Names you put into the fields should precisely match the names of the animation states inside animator controller. Head Bone Collider Drag and drop the collider attached with the 'HeadBone' which is the child of this Ai agent pelvis bone from the hierarchy into this field. Stand HeadShot Dying Animation State Names You can put one or several animation state names into the fields below for the Ai to playback when it dies during stand shooting.Names you put into the fields should precisely match the names of the animation states inside animator controller. Crouch HeadShot Dying Animation State Names You can put one or several animation state names into the fields below for the Ai to playback when it dies during crouch shooting.Names you put into the fields should precisely match the names of the animation states inside animator controller. Keep DeadBody If Enabled other components will be destroy and the mesh will be unparent. DeadBody Mesh In case developers will want to keep dead body of killed Ai agents for sometime after agents die they should drag skinned mesh renderer from Ai hierarchy into this field.When the Ai agent will die his deadbody will appear in the exact pose of the last frame of the ragdoll or dying animation.This DeadBodyMesh is also required to store the coordinates for the investigation after the emergency state has been expired. DeadBody Mesh Items To Attach Add all the additional Items like googles,Mask to attach with the Deadbody Mesh during the time it spawn. Pelvis Bone Transform Drag the Pelvis Bone of the Ai skinned mesh into this field.The pelvic bone of the skinned mesh that you imported does not have to be named - pelvis.In the skinned meshes provided for the kit pelvic bone has a name - hips. TIME_TO_DESTROY_OTHER_COMPONENTS Will destroy all other components (scripts and skeleton) except Humanoid Ai Health script.This field is responsible for creating dead body mesh that will stay in the level for specified amount of time. DeadBody Existence Time The time deadbody will stay visible in the game. TIME_TO_UNPARENT_BODYMESH Unparenting the resulted non skeletal body mesh is necessary to achieve this dead body effect.This delay value should be tweaked so that there would be enough time to inherit skeletal position of the last frame that skeleton existed. Spawn Pickup Items After Death If enabled than the Ai agent will spawn pickup items after death. Pickup Items Drag and drop one or more items from the project window into this field to spawn when the Ai agent deadbody existence time get expired. Reset Pickup Rotation If checked than spawned pickup items will not inherit Ai root object rotation value. Dying Sound Radius This radius is enabled every time Ai agent dies regardless of the reason of his death.It will cause emergency alert state for any Ai agent that will be within dying sound radius. Sound Investigating Approach Style Reset Drag and drop 'SoundInvestigatingApproachStyleReset' script located in the hierarchy of this Agent."},{"location":"HumanoidAIMelee.html","title":"Melee Behaviour","text":""},{"location":"HumanoidAIMelee.html#introduction","title":"Introduction","text":"<p>This video will help you understand how the AI Agent perform Melee Attack against his enemies.</p>"},{"location":"HumanoidAIMelee.html#ai-melee","title":"AI Melee","text":"<p>To Enable the Melee Attack on AI agent you need to select the Humanoid AI agent and inside the 'Core AI Behaviour' expand the Combat state behaviour and Enable Melee Attack. [See the image below]</p> <p></p> <p>This will show you a section below called as Ai Melee Attack.</p> <p></p> Fields Info Enable Time Between Melee Attacks Activate this checkbox to enable time intervals between Melee attacks. Min Time Interval Between Melee Attack Minimum Time interval between Melee Attacks. Max Time Interval Between Melee Attack Maximum time interval between Melee Attacks. Min Distance To Attack Player Minimum required distance to attack player. Max Distance To Attack Player Maximum required distance to attack player. Min Distance To Attack Enemy Ai Agent Minimum required distance to attack enemies Ai agents. Max Distance To Attack Enemy Ai Agent Maximum required distance to attack enemies Ai agents. Animations To Play Use slider to decide how many animations to play for Melee attack. Melee Animation Set of fields to create melee animations for the Ai agent. Melee Attack Choose melee attack animation to be played during the melee attack. If melee attack 1 is selected, check which animation will be used by going to the scene and then clicking on the Tools &lt;&gt; MobileActionKit &lt; HumanoidAi &lt; EditHumanoidAiAnimations. After clicking 'EditHumanoidAiAnimations', you can drag and drop this Humanoid Ai agent into the field named 'Humanoid Ai animator controller' and click import animations. This way, you will be able to see which animation is used in melee attack 1. Melee Animation Clip Provide the same melee attack animation clip that you have used for this Humanoid AI agent. You can check which animation you have used by going to the tools &lt; MobileActionKit &lt; HumanoidAi &lt; EditHumanoidAiAnimations. After clicking 'EditHumanoidAiAnimations', you can drag and drop this Humanoid Ai agent into the field named 'Humanoid Ai animator controller' and click import animations. This way, you will be able to see which animation is used for melee attack. Melee Damage Scripts Activation Delay Set the delay time for activating the melee damage scripts. Ai Melee Damage Scripts Drag and drop the Ai melee damage scripts attached with the child gameObject of this Ai agent."},{"location":"HumanoidAIPatrolBehaviour.html","title":"Patrol Behaviour","text":""},{"location":"HumanoidAIPatrolBehaviour.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to achieve patrol behaviour on humanoid AI agent in Non combat behaviour.Firstly, you need to make sure to have the same Team ID as the player so we can test this behaviour on Humanoid AI agent.You can simply copy the Team ID from the target script attached with the player and paste it to the humanoid AI agent.[See the image]</p> <p></p>"},{"location":"HumanoidAIPatrolBehaviour.html#choosing-patrol-behaviour","title":"Choosing Patrol behaviour","text":"<p>To choose the patrol behaviour select the Core AI Behaviour script and than expand the Non combat behaviour and choose the 'Patrol' behaviour from the dropdown menu.This will enable the patrolling script below where you can tweak the values to achieve the desired behaviour.</p> <p></p>"},{"location":"HumanoidAIPatrolBehaviour.html#create-patrol-point","title":"Create Patrol Point","text":"<p>To create patrol point first right click in the hierarchy and create a cube(this is only for visualisation purpose i.e you can later remove the 'Mesh Renderer' and 'Mesh Filter' when you make a build) rename the cube to be 'Patrol Point' and change its tag to 'PatrolPoint'. Position it in the scene view where you want. Note: To Find the patrol point and store it in a list. It's Important to have a collider attached to it. Any collider is acceptable(Box,Capsule,Sphere etc..)</p> <p></p>"},{"location":"HumanoidAIPatrolBehaviour.html#patrolling-script","title":"Patrolling Script","text":"Fields Info CoreAiBehaviour Script Drag and drop 'CoreAiBehaviour Script' component attached with this gameobject from the hierarchy into this field. Patrol Points Finder Script Drag and drop 'Patrol Points Finder' child game object with the 'Find Patrol Points' Script attached to it from the hierarchy into this field. Patrol Pattern Choose one of the two patrol point selection options from the drop-down list.If 'Closest Patrol Points' option is selected then activated Ai agent will follow the specified route by going from one closest Patrol Point to the next nearest one and thus following a certain path depending on the place of activation of patrolling Ai agent.If 'Random Patrol Points' option is selected then Ai agent will be going between specified patrol points in no particular order. Min Time Between Patrol Points Minimum allowed time to travel from previous patrol point to the next one. Max Time Between Patrol Pointst Maximum allowed time to travel from previous patrol point to the next one. Min Radius To Find Patrol Points The minimum radius within which Ai agent will find a new patrol point. Max Radius To Find Patrol Points The maximum radius within which Ai agent will find a new patrol point. Min Time At Patrol Point Set the minimum time the AI agent waits at the current Patrol point before moving out to the next one.If the 'Min/MaxTimeBetweenPatrolPoints' is smaller than what is needed for Ai agent to reach next Patrol Point, e.i if the next Patrol point is further away than amount of seconds allowed for agent to travel in order to reach it, then the designated 'MinTimeAtPatrolPoint' time will not be utilised because Ai agent will not have a chance to reach that point in the first place.          Max Time At Patrol Point Set the maximum time the AI agent waits at the current Patrol point before moving out to the next one.If the 'Min/MaxTimeBetweenPatrolPoints' is smaller than what is needed for Ai agent to reach next Patrol Point, e.i if the next Patrol point is further away than amount of seconds allowed for agent to travel in order to reach it, then the designated 'MinTimeAtPatrolPoint' time will not be utilised because Ai agent will not have a chance to reach that point in the first place.          Reverse Patrolling Order If enabled then it will make Ai agent to reverse his patrol rout after reaching last Patrol point.If disabled then after reacing last Patrol Point Ai agent will move out to first Patrol point thus performing his patrol behaviour in a loop fashion.For example if there are 3 Patrol points and this checkbox is checked then Ai Agent will go through them as follows 1, 2, 3, 2, 1(so called ping - pong pattern).And if disabled then the order will be 1, 2, 3, 1, 2, 3(so called loop pattern). Patrolling Animation Speed Specify the walking animation speed during Patrolling behaviour. i.e. the speed of the playback of the animation clip. Minimum Stopping Distance The minimum distance to stop near the Patrol point and to consider it as reached. Maximum Stopping Distance The maximum distance to stop near the Patrol point and to consider it as reached."},{"location":"HumanoidAIPostCombatScan.html","title":"Post Combat Scan","text":""},{"location":"HumanoidAIPostCombatScan.html#introduction","title":"Introduction","text":"<p>This video will help you understand about the 'Post Combat Scanning' behaviour of the Humanoid AI agent.</p>"},{"location":"HumanoidAIPostCombatScan.html#enable-post-combat-scan","title":"Enable Post Combat Scan","text":"<p>To enable the post combat scan behaviour select the Core AI Behaviour script and than expand the combat behaviour and check the checkbox 'Enable Post Combat Scan'.Checking this checkbox will display a sub section below called as 'Post Combat Aimed Scan Behaviour' where you can tweak the values to achieve the desired behaviour.</p> <p></p> <p>You can tweak values in this sub section to achieve the desired behaviour.</p> <p></p> Fields Info Post Combat Aimed Scan Behaviour Set of AI agent`s properties for post combat scan behaviour after the combat state. Min Time Between Aimed Turns Minimum time to keep aimed look in the direction that resulted after playing previous aimed animation turn clip, before starting playback of the new turn animation clip. Max Time Between Aimed Turns Maximum time to keep aimed look in the direction that resulted after playing previous aimed animation turn, before starting playback of the new one. Min Scan Completion Time Minimum time to keep aimed scanning before switching to non combat state. Max Scan Completion Time Maximum time to keep aimed scanning before switching to non combat state. Play Animations Sequentially If checked scan animations will playback sequentially. In case unchecked, the scan animations will playback randomly. Aimed Turning Animations Create up to 4 turning directions for AI agent to perform during aimed scanning. Turn Direction Choose one of 4 turning directions from this list. AI agent will play corresponding animation clip from the animation tree that is assigned to this direction. Min Aimed Turn Animation Speed Minimal playback speed of the the turn animation clip. Max Aimed Turn Animation Speed Maximal playback speed of the the turn animation clip."},{"location":"HumanoidAIPursue.html","title":"Pursue Behaviour","text":""},{"location":"HumanoidAIPursue.html#introduction","title":"Introduction","text":"<p>This video will guide you on how to achieve AI agent pursue behaviour in case of enemy lost.There are 2 types of pursue behaviour - Stationed and Approaching.</p>"},{"location":"HumanoidAIPursue.html#pursue-type-stationed","title":"Pursue Type : Stationed","text":"<p>If the selected option is 'Enable Stationed Enemy Pursue' than this humanoid AI agent will be stationed while staring at the last enemy known position for some seconds specified in the Min/Max Stare time fields.</p> <p> </p>"},{"location":"HumanoidAIPursue.html#pursue-type-approaching","title":"Pursue Type : Approaching","text":"<p>If the selected option is 'Enable Approaching Enemy Pursue' than this humanoid AI agent will be approaching at the last enemy known position. After the Enemy Lost, 'Humanoid AI' agent will first stare at the enemy last known position and then after the stare time is completed agent will start approaching towards the last enemy known position.</p> <p></p> <p>Let's talk about three scenarios that can be possible:</p>"},{"location":"HumanoidAIPursue.html#scenario-1-navmeshpath-complete","title":"Scenario 1 : NavMeshPath Complete","text":"<p>When the NavMeshPath to the enemy is completed the 'Humanoid AI' agent will be sprinting,running and than walking towards the enemy last know coordinate based on the distance.</p>"},{"location":"HumanoidAIPursue.html#scenario-2-navmeshpath-partial","title":"Scenario 2 : NavMeshPath Partial","text":"<p>When the NavMeshPath to the enemy is partial(Where the target is on the roof) the 'Humanoid AI' agent will create the closest point on the NavMesh from the current target position which is reachable and will be sprinting,running and than walking towards it based on the distance.</p>"},{"location":"HumanoidAIPursue.html#scenario-3-navmeshpath-invalid","title":"Scenario 3 : NavMeshPath Invalid","text":"<p>When the NavMeshPath to the enemy is invalid(Where both the target and the agent is on the opposite sides of buildings) the 'Humanoid AI' agent will make sure to only stare at the enemy current position until the combat state restarted.</p> <p></p> Fields Info Enemy Pursue Error Radius This slider sets the offset radius from last seen enemy coordinate. Pursuing Ai will set random coordinate to go to within that radius. Aimed Scaning At Enemy Last Known Position This subsection contains the values of aimed turns(scanning) for this agent after arriving at the LastKnownEnemyPosition coordinate. It will playback idle turning clips assigned to respective turning directions for lower body layer inside Animator while playing upper body aiming animation clip for all of those turns. Turn Direction Choose one of 4 turning directions from this list. AI agent will play corresponding animation clip from the animation tree that is assigned to this direction. Min Aimed Turn Animation Speed Minimal playback speed of the the turn animation clip. Max Aimed Turn Animation Speed Maximal playback speed of the the turn animation clip. Min Time Between Aimed Turns Minimum time to keep aimed look in the direction that resulted after playing previous aimed animation turn clip, before starting playback of the new turn animation clip. Max Time Between Aimed Turns Maximum time to keep aimed look in the direction that resulted after playing previous aimed animation turn, before starting playback of the new one. Min Scan Completion Time Minimum time to keep aimed scanning before switching to non combat state. Max Scan Completion Time Maximum time to keep aimed scanning before switching to non combat state. Play Animations Sequentially If checked scan animations will playback sequentially.In case unchecked the scan animations will playback randomly. Aimed Turning Animations Create up to 4 turning directions for Ai agent to perform during aimed scanning. Min Near Stopping Distance Minimum distance to stop near the Pursue point and to consider it as reached. Max Near Stopping Distance Maximum distance to stop near the Pursue point and to consider it as reached. Min Sprint Distance Minimal remaining distance to pursue point for the switch from walking or running to sprinting towards it. Max Sprint Distance Maximum distance for sprinting towards coordinate. Min Run Distance Minimal remaining distance to pursue point for the switch from walking or sprinting to running towards it. Max Run Distance Maximal remaining distance to pursue point for the switch from walking or sprinting to running towards it. Min Walk Distance Minimal remaining distance to pursue point for the switch from running or sprinting to walking towards it. Max Walk Distance Maximal remaining distance to pursue point for the switch from running or sprinting to walking towards it. Min Stare Time At Enemy Last Known Position Minimum staring time of any non Stationed AI agent at the last known position of the enemy before beginning pursue. Max Stare Time At Enemy Last Known Position Maximum staring time of any non Stationed AI agent at the last known position of the enemy before beginning pursue. Debug Pursue Distances This sub section contains values which show the distance to the last known position of the enemy. Debug Distance To Coordinate Debug the distance to coordinate(Enemy Last Known Position) to reach Debug Sprint Distance Debug the sprint distance to coordinate(Enemy Last Known Position) to reach Debug Run Distance Debug the run distance to coordinate(Enemy Last Known Position) to reach Debug Walk Distance Debug the walk distance to coordinate(Enemy Last Known Position) to reach"},{"location":"HumanoidAIScanningBehaviour.html","title":"Stationed &amp; Scan Behaviour","text":""},{"location":"HumanoidAIScanningBehaviour.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to achieve scanning behaviour on humanoid AI agent in Non combat behaviour.Firstly, you need to make sure to have the same Team ID as the player so we can test this behaviour on Humanoid AI agent.You can simply copy the Team ID from the target script attached with the player and paste it to the humanoid AI agent.[See the image]</p> <p></p>"},{"location":"HumanoidAIScanningBehaviour.html#choosing-stationed-behaviour","title":"Choosing Stationed behaviour","text":"<p>To choose the stationed behaviour select the Core AI Behaviour script and than expand the Non combat behaviour and choose the 'Stationary' behaviour from the dropdown menu.This will enable the Stationary behaviour on the AI agent.which in play mode will look like this[See the image].</p> <p></p>"},{"location":"HumanoidAIScanningBehaviour.html#choosing-scan-behaviour","title":"Choosing Scan behaviour","text":"<p>To choose the scan behaviour select the Core AI Behaviour script and than expand the Non combat behaviour and choose the 'Scan' behaviour from the dropdown menu.This will enable the scanning script below where you can tweak the values to achieve the desired behaviour.</p> <p></p>"},{"location":"HumanoidAIScanningBehaviour.html#scanning-script","title":"Scanning Script","text":"Fields Info StopHeadTurnsWhenAiming If checked then it will stop head  rotations during aimed scanning. HeadIK Script Drag and Drop 'Head IK' script into this field. Offset Scan Aim Point If checked then aimed scan point will randomly will be offset during each new aimed scan.The offset values can be set using Change Aimed Scan Point Position sliders. Aimed Scan Point Drag and Drop 'Head IK' script into this field. Scan Aim Point Offset Set of values within which the offset of the ScanAimPoint will happen each time the AimedScan will take place. MinX Minimum X axis value to move the Scan Aim point too. MaxX Maximum X axis value to move the Scan Aim point too. MinY Minimum Y axis value to move the Scan Aim point too. MaxY Maximum Y axis value to move the Scan Aim point too. MinZ Minimum Z axis value to move the Scan Aim point too. MaxZ Maximum Z axis value to move the Scan Aim point too. Randomize Scan Turns If enabled, then AI agent will play turning animations randomly. If disabled, then AI agent will play turning animations in the order that they are placed in the drop down list. Min Time Between Turns Minimum time interval between area scanning turns. Max Time Between Turns Maximum time interval between area scanning turns. Scan Turn Directions You can add up to 4 elements to this list with each element having 4 'ScanTurnDirections'.Names of those directions are Forward, Backward, Left and Right.Those 4 names are stored as events inside animation controller that will play respective turning animation clip whenever any of those directions are selected by Ai agent.You can randomise the speed of each turn as well as speed of each aimed turn within scanning behaviour. Choose Turn Animation Choose any of the provided turn directions. Min Turn Speed Minimal playback speed of the turning animation. Max Turn Speed Maximal playback speed of the turning animation. Min Aimed Turn Speed Minimal playback speed of the aimed turning animation.. Max Aimed Turn Speed Maximal playback speed of the aimed turning animation."},{"location":"HumanoidAIStationedShootPosture.html","title":"Stationed Shoot Posture","text":""},{"location":"HumanoidAIStationedShootPosture.html#introduction","title":"Introduction","text":"<p>This video will guide you on how to achieve 'Stand' and 'Crouch' shooting on this Humanoid AI agent when the agent is Stationary.</p>"},{"location":"HumanoidAIStationedShootPosture.html#stationed-shoot-posture_1","title":"Stationed Shoot Posture","text":"<p>First enable 'Stationed Shoot Posture' located in the combat state behaviour.[See the image below] </p> <p></p> <p>Enabling it will show Stationed Shoot Posture options in the script which you can tweak to achieve the desired behaviour.</p> <p></p> Fields Info Only Crouch Shoot Enable shooting only in crouched position while stationary and in combat. Randomize Crouch Or StandShoot Randomly alternate between sitting and standing while shooting, but only when stationary and in combat. Min Time To Reset Posture Minimum time to reset posture after shooting, applicable when stationary and in combat. Max Time To Reset Posture Maximum time to reset posture after shooting, applicable when stationary and in combat."},{"location":"HumanoidAIStrafing.html","title":"Strafing","text":""},{"location":"HumanoidAIStrafing.html#introduction","title":"Introduction","text":"<p>This video will guide you on how to achieve 'Strafing' behaviour on the humanoid AI agent during combat state.</p>"},{"location":"HumanoidAIStrafing.html#agent-strafing","title":"Agent Strafing","text":"<p>First enable 'Strafing' located in the combat state behaviour.[See the image below] </p> <p></p> <p>Enabling it will show Strafing options in the script which you can tweak to achieve the desired behaviour.</p> <p></p> Fields Info Strafe Animations Select the animation to play when Ai agent is moving forward, backward, right, left, etc., in combat state. Force Custom Strafing If enabled, Ai agent will move between Predefined Custom strafe directions specified in the field 'Custom Strafe Directions'. This becomes very useful when you want the Ai agent to strafe only in one or two directions, for example: strafing right or left. Randomize Between Stop Or Strafe Cycles If enabled, Ai agent will have a 50/50 chance of deciding whether to strafe and shoot or stop and shoot. Min Time Between Stop Or Strafe Cycles Minimum time to perform either Stop and shoot or Strafe and shoot cycles in case the checkbox named 'Randomize Between Stop Or Strafe Cycles' is enabled. Max Time Between Stop Or Strafe Cycles Maximum time to perform either Stop and shoot or Strafe and shoot cycles in case the checkbox named 'Randomize Between Stop Or Strafe Cycles' is enabled. Min Time Till Next Strafe Direction Minimum time to create a new strafe coordinate within the range specified above. Max Time Till Next Strafe Direction Maximum time to create a new strafe coordinate within the range specified above. Enable Shooting Between Strafing Combines shooting and strafing functionalities. Enable Shooting Cycles Enables strafing AI agent to have periods of aiming without actual shooting between shooting cycles. Otherwise, AI agent will continuously shoot at its target until this target is destroyed or no more ammo is left in the magazine, in which case AI agent will reload his weapon and continue firing at its target. Shooting Probability Adjust the slider value and decide what should be the shooting probability of this Ai agent. The bigger the number, the higher the chances of the Ai agent to consider shooting, and the smaller number will result in less chance of shooting. Min Time Between Shooting Cycles Minimal possible period of time for strafing and aiming weapon between shooting cycles (i.e., without actually firing it). Max Time Between Shooting Cycles Maximal possible period of time for strafing and aiming weapon between shooting cycles (i.e., without actually firing it). Min Raycast When Enemy Lost Minimal raycast checks to do if target is not in view during strafing. Max Raycast When Enemy Lost Maximum raycast checks to do if target is not in view during strafing. Min Distance To Stop Charging At Enemy Minimum distance to stop charging at enemy. Max Distance To Stop Charging At Enemy Maximum distance to stop charging at enemy. Custom Strafing Custom Strafing is based on a set of custom strafing points that allows to limit overall number and choice of available strafing directions for AI agent. Strafe Points This section stores all custom strafe points that represent their respective directions and define maximal possible strafing ranges (that can be limited by 'Min/Max time   Till Next Strafe Direction' timer) by their actual distances from AI agent`s root game object.Number of custom strafe points added to AI agent can be as low as one or two or all the way up to eight. Procedural Strafing This solution provides 360 strafing directions to AI agent. Actual distances of those directions will be also limited by 'Min/Max time Till Next Strafe Direction' timer same as custom strafe directions. Procedural strafing is more preferable for cases when AI agent is situated on small isolated Navmesh pieces as it will still allow AI agent to strafe within limited ranges like balcony, watch tower or a small roof or any enclosure of a small space. Min Strafe Range Minimum range to create a strafe coordinate for the Ai agent to move from its current position. Max Strafe Range Maximum range to create a strafe coordinate for the Ai agent to move from its current position."},{"location":"HumanoidAITacticalInteractions.html","title":"Humanoid AI Agent Tactical Interactions","text":""},{"location":"HumanoidAITacticalInteractions.html#introduction","title":"Introduction","text":"<p>This video will help you understand Humanoid AI agent tactial interactions.How the AI agent detection enemies,Rotate spine bone,do enemy visibility checks,switch teams and much more.This video highlights five scripts - FindEnemies Script,Humanoid Visibility Checker,Spine Rotation,Targets and Switch Team.</p>"},{"location":"HumanoidAITacticalInteractions.html#findenemies-script","title":"FindEnemies Script","text":"<p>This component is necessary for the core Ai behaviour script in order to achieve target selection functionality. This script stores all detected enemies and selects nearest enemy by comparing distances from enemy detector gameobject to all detected enemies. There are two ways of detecting enemies.</p> <p>1.Using detection radius i.e automatically detecting all Ai agents and discriminating enemies from friendlies.This method is used as a simpliest detection solution and can be used in situations where more complex solutions are not required. </p> <p>2.Using field of view within detection radius size to imitate human vision. This is more computationally complex solution and used in cases where first solution would not suffice developers due to its primitive nature that is more suitable for arcade gameplay but insufficient for tactical behaviour.Combining these detection methods to optimise mobile performance will have noticeable affect. In case of PC target platform difference in perfomance will have less noticeable.</p> <p></p> Fields Info Detection Radius Radius within which AI agent can detect its enemies. AI agent will sort out closest enemy in any direction within this radius regardless of obstacles in-between like buildings, vehicles, terrain, vegetation etc. If 'Enable Field Of View' checkbox is checked then AI agent will not act upon detected enemies within this radius unless they get within his unobstructed field of view. Min Detection Interval Minimum time between closest enemy visibility checks. Max Detection Interval Maximum time between closest enemy visibility checks. Enable Field Of View This checkbox is conditioning successful detection to a specified angle within detection radius and absence of visual obstacles between AI agent and its enemy. Field Of View GameObject Drag and drop Visual_FieldOfView(just FieldOfView) game object from Ai agent's head bone hierarchy into this field. Hid To Unhid Enemy Switcher Attach the 'Enemy Raycaster' GameObject as a child of this AI agent in the hierarchy and assign it to this field.             Position the Enemy Raycaster further out from the head bone to ensure proper  raycasting for the AI agent towards the closest enemy               allowing it to determine visibility and to abandon current closest enemy if he is he is obscured(not in direct line of sight) and switch to another closest unobscured enemy. Debug Enemy Visibility Raycast Checks If Checked then visibility raycast checks for detected enemies will be drawn in the scene view. Debug Nearest Visible Enemy Name Name of the nearest visible of the detected enemies will be displayed inside this field during runtime."},{"location":"HumanoidAITacticalInteractions.html#targets","title":"Targets","text":"<p>This script is used for the Ai agent to be able to identify other game AI agents and the player as friendlies or hostiles.</p> <p></p> Fields Info My Team Tag Team ID of this Ai agent Debug Other Target Name Debugs the name of the enemy this bot is currently shooting at. My Body Part To Target Drag the Ai agent body part(bone or any other gameobject from Ai hierarchy) into this field for enemy Ai agents to shoot at."},{"location":"HumanoidAITacticalInteractions.html#humanoid-visibility-checker","title":"Humanoid Visibility Checker","text":"<p>This script lets Ai agent to focus on the enemies using the Field of view while making sure to avoid any other obstacles in front using the raycasting.</p> <p></p> Fields Info Raycast Checker This field is responsible for detecting any obstacle between the nearest enemy and this Ai agent.For example: if Ai agent is under combat with the player and the player gets hide behind the building.In that case raycast checker will do number of checks specified in the field named 'NumberOfRaycastChecksToDo' each frame to confirm that Ai agent can't see the Player.After the checks completed Ai agent will go in the Alerted state and will move to the last seen position of the player. Minimum Time To Raycast Minimum time between which a raycast check will be done. Maximum Time To Raycasts Maximum time between which a raycast check will be done. Number Of Raycast Checks To Do Number of checks to do towards the nearest enemy if this Ai agent is unable to see its nearest enemy in a combat state. Debug Raycast Counts Debug the raycast counts towards the nearest enemy if this Ai agent is unable to see its nearest enemy in a combat state. Visible Layers Specify which layers to ignore when doing raycast checks for example: Patrol points with colliders attached that exist in a scene without a mesh needs to be avoided from the raycast checks."},{"location":"HumanoidAITacticalInteractions.html#spine-rotation","title":"Spine Rotation","text":"<p>This Script Is Responsible For Rotating Ai Spine Bone.</p> <p></p> Fields Info Bone To Rotate The bone to be rotated by the Shooting point towards the target in combat state.Select the appropriate bone of the rig somewhere in the middle of the spine.In the rig provided in this kit it is 'chest' bone. Rotational Pivot Bone Drag and drop the spine bone that is located right below the  'BoneToRotate' in the skeleton of Ai agent.This bone will serve as a pivotal point for the rotating bone above it. In other words it will serve as a reference bone relative to which the rotations will be performed by the Shooting Point.It will be parametrically   rotating BoneToRotate  around RotationalPivotBone which serves as a reference gameObject to correctly offset the rotational angle values of 'BoneToRotate'. Scan Aim Adjustment Points Specify vertical and lateral offset of the scan aiming pose for the 3 cases when Ai agent is performing scan aiming during walking, running and standing still to fine-tune the spine bending angle for each of those 3 cases. This improves overall appearance of scan aiming as it helps to fit together the best way the two separate upper body(for the torso) and lower body(for the legs) animations used together for those scanning aims.This random aiming is a part of area scanning functionality of the various non - combat states such as sound and dead body  investigating, following the leader and stationary area scanning while standing.The best overall looking of scan aiming poses is achieved by dragging and dropping those scan aiming points gameobjects into their respective fields and adjusting their position until the aiming pose looks the best it can.         RunScanAimLevel and WalkScanAimLevel are used when Ai agent is on the move.StationaryScanAimLevel is for the cases when Ai agent stands still. Stationary Scan Aim Level The target GameObject that the bone rotator of this humanoid Ai agent assigned in this script will look at during scanning. Walk Scan Aim Level The target GameObject that the bone rotator of this humanoid Ai agent assigned in this script will look at during walking. Run Scan Aim Level The target GameObject that the bone rotator of this humanoid Ai agent assigned in this script will look at during running. Enable Clamping Enable clamping to limit the rotation angle of 'BoneToRotate'. Downward ClampX The minimum downward rotation angle (local X-axis) for 'BoneToRotate'. Upward ClampX The maximum upward rotation angle (local X-axis) for 'BoneToRotate'. Left ClampY The minimum left rotation angle (local Y-axis) for 'BoneToRotate'. Right ClampY The maximum right rotation angle (local Y-axis) for 'BoneToRotate'. RightLean ClampZ The minimum right lean rotation angle (local Z-axis) for 'BoneToRotate'. LeftLean ClampZ The maximum left lean rotation angle (local Z-axis) for 'BoneToRotate'."},{"location":"HumanoidAIWanderBehaviour.html","title":"Wander Behaviour","text":""},{"location":"HumanoidAIWanderBehaviour.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to achieve wander behaviour on humanoid AI agent in Non combat behaviour.Firstly, you need to make sure to have the same Team ID as the player so we can test this behaviour on Humanoid AI agent.You can simply copy the Team ID from the target script attached with the player and paste it to the humanoid AI agent.[See the image]</p> <p></p>"},{"location":"HumanoidAIWanderBehaviour.html#choosing-wander-behaviour","title":"Choosing Wander behaviour","text":"<p>To choose the wander behaviour select the Core AI Behaviour script and than expand the Non combat behaviour and choose the 'Wander' behaviour from the dropdown menu.This will enable the wandering script below where you can tweak the values to achieve the desired behaviour.</p> <p></p>"},{"location":"HumanoidAIWanderBehaviour.html#wandering-script","title":"Wandering Script","text":"Fields Info CoreAiBehaviour Script Drag and drop 'CoreAiBehaviour Script' component attached with this gameobject from the hierarchy into this field. Animator Component Drag and drop 'Animator' component attached with this gameobject from the hierarchy into this field. Path Finder Drag and drop 'AiPathFinder Script' attached with this gameobject from the hierarchy into this field. Min Time Between Wander Points Minimum possible radius for a new wandering point creation on the navmesh.  Note that the Wandering point cannot be created closer than the minimal radius. Max Time Between Wander Pointst Maximum possible radius for a new wandering point creation on the navmesh.Note that the Wandering point cannot be created farther than the maximal radius. Wandering Animation Speed Specify the walking animation speed during wandering behaviour. i.e. the speed of the playback of the animation clip. Minimum Stopping Distance The minimum distance to stop near the wandering point and to consider it as reached. Maximum Stopping Distance The maximum distance to stop near the wandering point and to consider it as reached."},{"location":"HumanoidAIWeaponFiringBehaviour_Part1.html","title":"Weapon Firing Behaviour Part-1","text":""},{"location":"HumanoidAIWeaponFiringBehaviour_Part1.html#introduction","title":"Introduction","text":"<p>This is the Part-1 of Humanoid AI Weapon Firing Behaviour and in this part we have covered following topics - full automatic fire,Semi automatic fire,Reloading,Supression fire, Dropped Weapon lifetime and basic setup required for the weapon to function properly.</p>"},{"location":"HumanoidAIWeaponFiringBehaviour_Part1.html#humanoid-ai-weapon-firing-behaviour","title":"Humanoid AI Weapon Firing Behaviour","text":"Fields Info Raycast Bullet Range This field is applicable to raycast and projectile shooting determining how far this humanoid AI agent weapon can shoot. Muzzle Flash Particle Drag and drop Muzzleflash particles from the hierarchy (child of the Shooting Point gameobject attached to AI agent`s weapon). Use Muzzle Flash Mesh Use mesh instead of particles for muzzle flash effect. Muzzle Flash Mesh Drag and drop MuzzleFlashMesh gameobject from the hierarchy (child of the Shooting Point gameobject attached to AI agent`s weapon). Auto Deactivate Muzzle Flash Mesh Deactivates 'MuzzleFlashMesh' right after weapon shot animation clip playback. Otherwise it will get deactivated after set number of seconds specified in the 'TimeToDeactivateMuzzleMesh' field. Muzzle Flash Duration Muzzle Flash mesh deactivation delay. Min Muzzle Flash Mesh Z Rotation Set the minimal rotational offset angle value for MuzzlFlashMesh to add variations of its appearance with each new shot. Max Muzzle Flash Mesh Z Rotation Set the maximal rotational offset angle value for MuzzlFlashMesh to add variations of its appearance with each new shot. Fire Rate Shots per second parameter of this weapon. Optimize Raycast Shooting If checked, will decrease performance hit by doing raycast shot only once for the first shot at the current closest enemy and after that performing set number of consecutive shots inside field below named 'OptimizedRaycastShots' without actual raycasting until target is killed or another enemy becomes closest target in which case raycast optimization will reset itself for that new closest enemy. Optimized Raycast Shots Specifies how many consecutive shots after first raycast shot (not including it) Ai agent will do at its current target before resuming OptimizeRaycastShooting cycle. Damage To Target Amount of damage points of each raycast shot of this weapon (Does not affect projectiles). Impact Effect Name Enter the exact name of the default impact effect from the object pooler that will be applied to surfaces which do not have their own impact effects specified in 'HitImpactEffect' script attached to them. Semi Automatic Fire If checked, then this weapon will only do single shots and would not be able to do burst (automatic) firing. Min Time Between Semi Auto Shots Minimal time interval between semi-automatic shots. Max Time Between Semi Auto Shots Maximal time interval between semi-automatic shots. Should Eject Bullet Shell If enabled, then bullet shells will be ejected when firing this weapon. Bullet Shell Name Name of the bullet shell effect inside object pooler. Bullet Shell Spawn Point Drag and drop child gameobject of this weapon named 'BulletShellSpawnPoint' from the hierarchy into this field. Bullet shells particle prefabs will then be spawned at the origin of this gameobject and will along the local Z axis of this game object. Projectile Name Copy and paste name of the projectile to be used with this weapon from the 'ObjectPooler' script into this field. Projectiles Per Shot Enter the number of the projectiles of the single shot of this weapon if you want this weapon to be shotgun. The spread of those projectiles is specified in 'BulletSpread' paragraph. Shooting Option Select one of the three available options for the kind of shooting that this weapon will utilise. RaycastShootingWithTracers is an option where those tracers are not dealing damage to targets and are there only for visuals. Min Open Fire Delay Minimum time delay before commencement of the weapon firing behavior. Max Open Fire Delay Maximum time delay before commencement of the weapon firing behavior. Suppression Fire Probability Sets the probability for AI agent to continue firing his weapon (for some time specified in the fields below) at the targets that became hidden behind covers. Min Suppression Fire Duration Specify the minimum duration of the suppressing fire. Max Suppression Fire Duration Specify the maximum duration of the suppressing fire. Min Reload Delay Time Minimal delay time before reloading the weapon after shooting last bullet from magazine or in cases that require manual reload after each single shot. Max Reload Delay Time Maximal delay time before reloading the weapon after shooting last bullet from magazine or in cases that require manual reload after each single shot. Max Ammo Maximum amount of rounds for this weapon that Ai agent will have. Magazine Size Amount of rounds in the magazines for this weapon. Match Reload Time With Animation If checked then duration of the reload will match the duration of the used reload animation clip. If unchecked then it will be possible to set the durations of reload for Crouched and Standing positions regardless of the reload animation clip playback time. Stand Reload Duration The time it will take to reload this weapon in stance position. Crouched Reload Duration The time it will take to reload this weapon in crouched position. Weapon Mesh Drag&amp;Drop this weapon mesh from this AI agent`s hierarchy into this field. Core Ai Behaviour Script Drag and drop 'CoreAiBehaviourScript' component attached with the root gameobject of this Ai agent from the hierarchy into this field. Animator Component Drag and drop 'Animator' component attached with the root gameobject of this Ai agent from the hierarchy into this field. Weapon Sounds Drag&amp;drop 'WeaponSounds' gameobject with 'AlertingSoundActivator' script attached to it from this AI agent`s hierarchy into this field. Stand Reload Clip Drag and drop the stand reload animation clip from the project window into this field. Crouch Reload Clip Drag and drop the crouch reload animation clip from the project window into this field. Stand Fire Clip Drag and drop the stand fire animation clip from the project window into this field. Crouch Fire Clip Drag and drop the crouch fire animation clip from the project window into this field. Dropped Weapon Life Time Specify for how long this weapon will stay active after Ai agent that carried it was killed."},{"location":"HumanoidAIWeaponFiringBehaviour_Part2.html","title":"Weapon Firing Behaviour Part-2","text":""},{"location":"HumanoidAIWeaponFiringBehaviour_Part2.html#introduction","title":"Introduction","text":"<p>This is the Part-2 of Humanoid AI Weapon Firing Behaviour and in this part we have covered following topics - Shooting Options,Bullet spread,Projectiles Per Shot, Raycast Bullet Force and some important things to note.</p>"},{"location":"HumanoidAIWeaponFiringBehaviour_Part2.html#humanoid-ai-weapon-firing-behaviour","title":"Humanoid AI Weapon Firing Behaviour","text":"Fields Info Projectile Name Copy and paste name of the projectile to be used with this weapon from the 'ObjectPooler' script into this field. Projectiles Per Shot Enter the number of the projectiles of the single shot of this weapon if you want this weapon to be shotgun. The spread of those projectiles is specified in 'BulletSpread' paragraph. Shooting Option Select one of the three available options for the kind of shooting that this weapon will utilise. RaycastShootingWithTracers is an option where those tracers are not dealing damage to targets and are there only for visuals. Enable Bullet Spread Toggle to enable or disable bullet spread for this weapon. When enabled, each shot will have a varying rotational offset as defined by the parameters below. Min Bullet Spread Rotation Angle X Negative value of the offset from the initial rotation of X axis in degrees. Max Bullet Spread Rotation Angle X Positive value of the offset from the initial rotation of X axis in degrees. Min Bullet Spread Rotation Angle Y Negative value of the offset from the initial rotation of Y axis in degrees. Max Bullet Spread Rotation Angle Y Positive value of the offset from the initial rotation of Y axis in degrees. Add Raycast Force If checked will apply raycast force to target. Min Raycast Force Minimal possible RayCastForce to be applied to target. Max Raycast Force Maximal possible RayCastForce to be applied to target. Min Upward Force Minimal possible RaycastForce to be applied to target in upward direction. Max Upward Force Maximal possible RaycastForce to be applied to target in upward direction. Min Right Force Minimal possible RaycastForce to be applied to target in right direction. Max Right Force Maximal possible RaycastForce to be applied to target in right direction. Min Left Force Minimal possible RaycastForce to be applied to target in left direction. Max Left Force Maximal possible RaycastForce to be applied to target in left direction. Min Backward Force Minimal possible RaycastForce to be applied to target in backward direction. Max Backward Force Maximal possible RaycastForce to be applied to target in backward direction. Min Forward Force Minimal possible RaycastForce to be applied to target in forward direction. Max Forward Force Maximal possible RaycastForce to be applied to target in forward direction."},{"location":"HumanoidAIWeaponFiringBehaviour_Part3.html","title":"Weapon Firing Behaviour Part-3","text":""},{"location":"HumanoidAIWeaponFiringBehaviour_Part3.html#introduction","title":"Introduction","text":"<p>This is the Part-3 of Humanoid AI Weapon Firing Behaviour and in this part we have covered the topic called Distance based shooting.</p>"},{"location":"HumanoidAIWeaponFiringBehaviour_Part3.html#humanoid-ai-weapon-firing-behaviour","title":"Humanoid AI Weapon Firing Behaviour","text":"Fields Info Enable Distance Based Shooting If enabled then Ai agent will fire this weapon based on values of 'DistanceBasedShooting' paragraph which is designed for Ai agent to perform more realistic shooting style to increase efficiency of killing the enemy at various ranges. Min Target Distance Check Interval Minimal time interval between distance to target checks for performing shooting style based on that distance. Max Target Distance Check Interval Maximal time interval between distance to target checks for performing shooting style based on that distance. Distance Based Shooting This list defines DistanceBasedShooting and sets various shooting parameters for each distance that is set in each element of this list. It is set by default to increase volume of fire as the distance to target gets shorter. Max Distance Sets the maximal distance limit for the range within which this burst type will be performed. Min Distance Sets the minimal distance limit for the range within which this burst type will be performed. Min Burst Size Minimum number of shots in a burst when firing at a target that is between min and max limits of this range. Max Burst Size Maximum number of shots in a burst when firing at a target that is between min and max limits of this range. Min Time Between Bursts Minimal time interval between bursts. Max Time Between Bursts Maximal time interval between bursts."},{"location":"HumanoidAIWeaponFiringBehaviour_Part4.html","title":"Weapon Firing Behaviour Part-4","text":""},{"location":"HumanoidAIWeaponFiringBehaviour_Part4.html#introduction","title":"Introduction","text":"<p>This is the Part-4 of Humanoid AI Weapon Firing Behaviour and in this part we have covered the topic called - Line of fire check. This paragraph defines the LineOfFireChecks parameters when Aiming AI agent is careful not to fire his weapon when his friendlies are within a specified distance from the line of fire.Thus minimising the chances of accidental friendly fire. Aiming Ai agent will check if any friendly AI agents are within line of fire threshold which is checked along X and Y axis from his root objects local Z axis which would be facing the enemy at the time of this check.And if separation between Ai agent`s root object local Z axis and friendly AI agent closest to the line of fire in both X and Y axis Line Of fire threshold values is less then allowed for both of those values then AI agent will cease fire until his friendly gets further away from his local Z axis along either Y or X axis so that friendly Ai agent would get outside of line of fire threshold.In case aiming Ai agent will be standing and closest friendly to the line of fire will be crouching in front of him, then X and Y proximity checks will be bypassed and  aiming Ai agent would be able to open fire.And in case aiming Ai agent is crouching then X and Y proximity checks will be done regardless of whether closest friendly to the line of fire is crouching or standing. </p>"},{"location":"HumanoidAIWeaponFiringBehaviour_Part4.html#humanoid-ai-weapon-firing-behaviour","title":"Humanoid AI Weapon Firing Behaviour","text":"Fields Info Enable Line Of Fire Checks If enabled then Ai agent will check if any of his friendlies are within LineOfFire threshold before firing his weapon and if they are then Ai agent will not shoot until they move out of his line of fire. Line Of Fire Proximity X Distance along local X axis from direct line of fire within which to do the checks for friendlies. Line Of Fire Proximity Y Distance along local Y axis from direct line of fire within which to do the checks for friendlies. Debug Proximity To Line Of Fire If checked then will display in the fields below the proximity values of the closest friendly Ai agent to LineOfFire. Display X Axis Proximity Displays the friendly Ai agent separation along X axis from direct line of fire. Display Y Axis Proximity Displays the friendly Ai agent separation along Y axis from direct line of fire. Min Time Between Line Of Fire Checks Minimal time interval between checks for friendlies within line of fire dangerous proximity. Max Time Between Line Of Fire Checks Maximal time interval between checks for friendlies within line of fire dangerous proximity."},{"location":"HumanoidAIWeaponFiringBehaviour_Part5.html","title":"Weapon Firing Behaviour Part-5","text":""},{"location":"HumanoidAIWeaponFiringBehaviour_Part5.html#introduction","title":"Introduction","text":"<p>This is the Part-5 of Humanoid AI Weapon Firing Behaviour and in this part we have covered the topic called 'Optimize Raycast Shooting'.</p>"},{"location":"HumanoidAIWeaponFiringBehaviour_Part5.html#humanoid-ai-weapon-firing-behaviour","title":"Humanoid AI Weapon Firing Behaviour","text":"Fields Info Optimize Raycast Shooting If checked, will decrease performance hit by doing raycast shot only once for the first shot at the current closest enemy and after that performing set number of consecutive shots inside field below named 'OptimizedRaycastShots' without actual raycasting until target is killed or another enemy becomes closest target in which case raycast optimization will reset itself for that new closest enemy. Optimized Raycast Shots Specifies how many consecutive shots after first raycast shot (not including it) Ai agent will do at its current target before resuming OptimizeRaycastShooting cycle."},{"location":"HumanoidAIZombieCharging%26Melee.html","title":"Charging &amp; Melee Attack Behaviour","text":""},{"location":"HumanoidAIZombieCharging%26Melee.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to achieve 'Charging' and 'Melee Attack' behaviour on the humanoid AI zombie.</p>"},{"location":"HumanoidAIZombieCharging%26Melee.html#zombie-charging","title":"Zombie Charging","text":"<p>By default, the zombie charges toward its enemies based on specified distance values. There are four key fields involved: Min Distance To Run, Max Distance To Run, Min Distance To Walk, and Max Distance To Walk. The zombie's movement behavior is determined by randomly selecting a value between the defined minimum and maximum distances.</p> <p>For example, if the Min Distance To Run is 20 and the Max Distance To Run is 30, and the script selects 25 as the random value, the zombie will sprint if the enemy is more than 25 units away. If the enemy is within 25 units, it will switch to running behavior. Similarly, for walking, if the Min Distance To Walk is 10 and the Max Distance To Walk is 20, and the random value chosen is 15, the zombie will walk when the enemy is closer than 15 units. This system ensures dynamic movement based on proximity to the target.</p> <p></p> Fields Info Min Distance To Running Minimal remaining distance to target to switch from walking or sprinting to running towards the target. Max Distance To Running Maximal remaining distance to target to switch from walking or sprinting to running towards the target. Min Distance To Walk Minimal remaining distance to target to switch from running or sprinting to walking towards the target. Max Distance To Walk  Maximal remaining distance to target to switch from running or sprinting to walking towards the target."},{"location":"HumanoidAIZombieCharging%26Melee.html#ai-melee-attack","title":"AI Melee Attack","text":"<p>When the zombie charges toward its target and reaches the defined range, based on the Min/Max Distance to Attack Player or Min/Max Distance to Attack Enemy AI Agent, it will stop and begin attacking. If the target is a player, the zombie will halt when the distance to the player is less than or equal to the randomly chosen value from the Min/Max Distance to Attack Player. Similarly, if the target is an enemy AI agent, the zombie will stop once it is within the randomly selected range from the Min/Max Distance to Attack Enemy AI Agent. This ensures that the zombie's attack behavior is triggered dynamically based on proximity to the appropriate target.</p> <p></p> Fields Info Enable Time Between Melee Attacks Activate this checkbox to enable time intervals between Melee attacks. Min Time Interval Between Melee Attack Minimum Time interval between Melee Attacks. Max Time Interval Between Melee Attack Maximum time interval between Melee Attacks. Min Distance To Attack Player Minimum required distance to attack player. Max Distance To Attack Player Maximum required distance to attack player. Min Distance To Attack Enemy Ai Agent Minimum required distance to attack enemies Ai agents. Max Distance To Attack Enemy Ai Agent Maximum required distance to attack enemies Ai agents. Animations To Play Use slider to decide how many animations to play for Melee attack. Melee Animation Set of fields to create melee animations for the Ai agent. Melee Attack Choose melee attack animation to be played during the melee attack. If melee attack 1 is selected, check which animation will be used by going to the scene and then clicking on the Tools &lt;&gt; MobileActionKit &lt; HumanoidAi &lt; EditHumanoidAiAnimations. After clicking 'EditHumanoidAiAnimations', you can drag and drop this Humanoid Ai agent into the field named 'Humanoid Ai animator controller' and click import animations. This way, you will be able to see which animation is used in melee attack 1. Melee Animation Clip Provide the same melee attack animation clip that you have used for this Humanoid AI agent. You can check which animation you have used by going to the tools &lt; MobileActionKit &lt; HumanoidAi &lt; EditHumanoidAiAnimations. After clicking 'EditHumanoidAiAnimations', you can drag and drop this Humanoid Ai agent into the field named 'Humanoid Ai animator controller' and click import animations. This way, you will be able to see which animation is used for melee attack. Melee Damage Scripts Activation Delay Set the delay time for activating the melee damage scripts. Ai Melee Damage Scripts Drag and drop the Ai melee damage scripts attached with the child gameObject of this Ai agent."},{"location":"HumanoidAIZombieCharging%26Melee.html#player-damage-effect-ui-images","title":"Player Damage Effect UI Images","text":"<p>To set up the Damage Effect UI Images for the player, start by selecting the Canvas 2D in your scene. Then, create an Image Component within the canvas and drag and drop the source image that will be displayed when the player takes damage from a zombie. This image will serve as the visual effect for player damage. [See the image below for reference.]</p> <p></p> <p>Next, you can set up the damage effect UI by dragging and dropping the desired images into the Damage Effect UI Images field within the Player Health Script. These UI images will be triggered whenever the player takes damage from a zombie. The script will randomly select an image from the list and activate it. Once displayed, the image will fade out over a duration specified in the Damage Effect Image Fade Duration field. For instance, if the duration is set to 1 second, the image will gradually fade out within that time.</p> <p>Additionally, the Time Between Damage Effect UI Images field allows you to control the interval between the activation of consecutive images. For example, if the player is hit by a zombie, the first image will appear immediately, but subsequent images will only be triggered after the specified interval has passed. This means that even if the player takes another hit within that time, a new image won't be displayed until the timer resets.</p> <p></p>"},{"location":"HumanoidAIZombieHeadRotation.html","title":"Head Rotations","text":""},{"location":"HumanoidAIZombieHeadRotation.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to achieve head rotations on humanoid AI agent in Non combat behaviour.Firstly, you need to make sure to have the same Team ID as the player so we can test this behaviour on Humanoid AI agent.You can simply copy the Team ID from the target script attached with the player and paste it to the humanoid AI agent.[See the image]</p> <p></p>"},{"location":"HumanoidAIZombieHeadRotation.html#enable-head-rotations","title":"Enable Head Rotations","text":"<p>To enable the head rotation select the Core AI Behaviour script and than expand the Non combat behaviour and check the checkbox 'Enable Head Rotations'.Checking this checkbox will enable the HeadIK script below where you can tweak the values to achieve the desired behaviour.</p> <p></p>"},{"location":"HumanoidAIZombieHeadRotation.html#headik-script","title":"HeadIK Script","text":"Fields Info CoreAiBehaviour Script Drag and drop the 'CoreAiBehaviour' component attached with this Ai agent from the hierarchy into this field. Min Head Turning Speed The minimum speed with which the head bone of the Ai agent will turn towards LookAt points. Max Head Turning Speed The maximum speed with which the head bone of the Ai agent will turn towards LookAt points. Min Stare Time Minimum time to stare at LookAt point before turning towards another LookAt point. Max Stare Time Maximum time to stare at LookAt point before turning towards another LookAt point. Unlink LookAt Points If checked it will keep the head turning independent of scanning turns directions and unsync with them. Random Rotation If enabled than Ai agents head will rotate and look at the points randomly.If disabled then Ai agent will look at them in recurring fashion (0,1,2,0,1,2 etc). LookAt Points Assign child LookAtPoints from the hierarchy of this Ai agent to this list.They can be child game objects of Ai agent named and positioned according to their direction name(front, left, right, down, up, front up, left up, etc.)In which case the Ai agent head will be turning between them.Alternatively those LookAt points can be independently placed at a certain spots on the level and would not be child game objects of Ai agent.This would force Ai agent to focus on those independent LookAt points thus ensuring that Ai agent will concentrate on those directions.This would be useful for example for sniper bot observing only few particular areas of the level(certain building or a crossroad etc.)."},{"location":"HumanoidAIZombiePatrolBehaviour.html","title":"Patrol Behaviour","text":""},{"location":"HumanoidAIZombiePatrolBehaviour.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to achieve patrol behaviour on humanoid AI agent in Non combat behaviour.Firstly, you need to make sure to have the same Team ID as the player so we can test this behaviour on Humanoid AI agent.You can simply copy the Team ID from the target script attached with the player and paste it to the humanoid AI agent.[See the image]</p> <p></p>"},{"location":"HumanoidAIZombiePatrolBehaviour.html#choosing-patrol-behaviour","title":"Choosing Patrol behaviour","text":"<p>To choose the patrol behaviour select the Core AI Behaviour script and than expand the Non combat behaviour and choose the 'Patrol' behaviour from the dropdown menu.This will enable the patrolling script below where you can tweak the values to achieve the desired behaviour.</p> <p></p>"},{"location":"HumanoidAIZombiePatrolBehaviour.html#create-patrol-point","title":"Create Patrol Point","text":"<p>To create patrol point first right click in the hierarchy and create a cube(this is only for visualisation purpose i.e you can later remove the 'Mesh Renderer' and 'Mesh Filter' when you make a build) rename the cube to be 'Patrol Point' and change its tag to 'PatrolPoint'. Position it in the scene view where you want. Note: To Find the patrol point and store it in a list. It's Important to have a collider attached to it. Any collider is acceptable(Box,Capsule,Sphere etc..)</p> <p></p>"},{"location":"HumanoidAIZombiePatrolBehaviour.html#patrolling-script","title":"Patrolling Script","text":"Fields Info CoreAiBehaviour Script Drag and drop 'CoreAiBehaviour Script' component attached with this gameobject from the hierarchy into this field. Patrol Points Finder Script Drag and drop 'Patrol Points Finder' child game object with the 'Find Patrol Points' Script attached to it from the hierarchy into this field. Patrol Pattern Choose one of the two patrol point selection options from the drop-down list.If 'Closest Patrol Points' option is selected then activated Ai agent will follow the specified route by going from one closest Patrol Point to the next nearest one and thus following a certain path depending on the place of activation of patrolling Ai agent.If 'Random Patrol Points' option is selected then Ai agent will be going between specified patrol points in no particular order. Min Time Between Patrol Points Minimum allowed time to travel from previous patrol point to the next one. Max Time Between Patrol Pointst Maximum allowed time to travel from previous patrol point to the next one. Min Radius To Find Patrol Points The minimum radius within which Ai agent will find a new patrol point. Max Radius To Find Patrol Points The maximum radius within which Ai agent will find a new patrol point. Min Time At Patrol Point Set the minimum time the AI agent waits at the current Patrol point before moving out to the next one.If the 'Min/MaxTimeBetweenPatrolPoints' is smaller than what is needed for Ai agent to reach next Patrol Point, e.i if the next Patrol point is further away than amount of seconds allowed for agent to travel in order to reach it, then the designated 'MinTimeAtPatrolPoint' time will not be utilised because Ai agent will not have a chance to reach that point in the first place.          Max Time At Patrol Point Set the maximum time the AI agent waits at the current Patrol point before moving out to the next one.If the 'Min/MaxTimeBetweenPatrolPoints' is smaller than what is needed for Ai agent to reach next Patrol Point, e.i if the next Patrol point is further away than amount of seconds allowed for agent to travel in order to reach it, then the designated 'MinTimeAtPatrolPoint' time will not be utilised because Ai agent will not have a chance to reach that point in the first place.          Reverse Patrolling Order If enabled then it will make Ai agent to reverse his patrol rout after reaching last Patrol point.If disabled then after reacing last Patrol Point Ai agent will move out to first Patrol point thus performing his patrol behaviour in a loop fashion.For example if there are 3 Patrol points and this checkbox is checked then Ai Agent will go through them as follows 1, 2, 3, 2, 1(so called ping - pong pattern).And if disabled then the order will be 1, 2, 3, 1, 2, 3(so called loop pattern). Patrolling Animation Speed Specify the walking animation speed during Patrolling behaviour. i.e. the speed of the playback of the animation clip. Minimum Stopping Distance The minimum distance to stop near the Patrol point and to consider it as reached. Maximum Stopping Distance The maximum distance to stop near the Patrol point and to consider it as reached."},{"location":"HumanoidAIZombieScanningBehaviour.html","title":"Scan Behaviour","text":""},{"location":"HumanoidAIZombieScanningBehaviour.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to achieve scanning behaviour on humanoid AI agent in Non combat behaviour.Firstly, you need to make sure to have the same Team ID as the player so we can test this behaviour on Humanoid AI agent.You can simply copy the Team ID from the target script attached with the player and paste it to the humanoid AI agent.[See the image]</p> <p></p>"},{"location":"HumanoidAIZombieScanningBehaviour.html#choosing-scan-behaviour","title":"Choosing Scan behaviour","text":"<p>To choose the scan behaviour select the Core AI Behaviour script and than expand the Non combat behaviour and choose the 'Scan' behaviour from the dropdown menu.This will enable the scanning script below where you can tweak the values to achieve the desired behaviour.</p> <p></p>"},{"location":"HumanoidAIZombieScanningBehaviour.html#scanning-script","title":"Scanning Script","text":"Fields Info StopHeadTurnsWhenAiming If checked then it will stop head  rotations during aimed scanning. HeadIK Script Drag and Drop 'Head IK' script into this field. Offset Scan Aim Point If checked then aimed scan point will randomly will be offset during each new aimed scan.The offset values can be set using Change Aimed Scan Point Position sliders. Aimed Scan Point Drag and Drop 'Head IK' script into this field. Scan Aim Point Offset Set of values within which the offset of the ScanAimPoint will happen each time the AimedScan will take place. MinX Minimum X axis value to move the Scan Aim point too. MaxX Maximum X axis value to move the Scan Aim point too. MinY Minimum Y axis value to move the Scan Aim point too. MaxY Maximum Y axis value to move the Scan Aim point too. MinZ Minimum Z axis value to move the Scan Aim point too. MaxZ Maximum Z axis value to move the Scan Aim point too. Randomize Scan Turns If enabled, then AI agent will play turning animations randomly. If disabled, then AI agent will play turning animations in the order that they are placed in the drop down list. Min Time Between Turns Minimum time interval between area scanning turns. Max Time Between Turns Maximum time interval between area scanning turns. Scan Turn Directions You can add up to 4 elements to this list with each element having 4 'ScanTurnDirections'.Names of those directions are Forward, Backward, Left and Right.Those 4 names are stored as events inside animation controller that will play respective turning animation clip whenever any of those directions are selected by Ai agent.You can randomise the speed of each turn as well as speed of each aimed turn within scanning behaviour. Choose Turn Animation Choose any of the provided turn directions. Min Turn Speed Minimal playback speed of the turning animation. Max Turn Speed Maximal playback speed of the turning animation. Min Aimed Turn Speed Minimal playback speed of the aimed turning animation.. Max Aimed Turn Speed Maximal playback speed of the aimed turning animation."},{"location":"HumanoidAIZombieWanderBehaviour.html","title":"Wander Behaviour","text":""},{"location":"HumanoidAIZombieWanderBehaviour.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to achieve wander behaviour on humanoid AI agent in Non combat behaviour.Firstly, you need to make sure to have the same Team ID as the player so we can test this behaviour on Humanoid AI agent.You can simply copy the Team ID from the target script attached with the player and paste it to the humanoid AI agent.[See the image]</p> <p></p>"},{"location":"HumanoidAIZombieWanderBehaviour.html#choosing-wander-behaviour","title":"Choosing Wander behaviour","text":"<p>To choose the wander behaviour select the Core AI Behaviour script and than expand the Non combat behaviour and choose the 'Wander' behaviour from the dropdown menu.This will enable the wandering script below where you can tweak the values to achieve the desired behaviour.</p> <p></p>"},{"location":"HumanoidAIZombieWanderBehaviour.html#wandering-script","title":"Wandering Script","text":"Fields Info CoreAiBehaviour Script Drag and drop 'CoreAiBehaviour Script' component attached with this gameobject from the hierarchy into this field. Animator Component Drag and drop 'Animator' component attached with this gameobject from the hierarchy into this field. Path Finder Drag and drop 'AiPathFinder Script' attached with this gameobject from the hierarchy into this field. Min Time Between Wander Points Minimum possible radius for a new wandering point creation on the navmesh.  Note that the Wandering point cannot be created closer than the minimal radius. Max Time Between Wander Pointst Maximum possible radius for a new wandering point creation on the navmesh.Note that the Wandering point cannot be created farther than the maximal radius. Wandering Animation Speed Specify the walking animation speed during wandering behaviour. i.e. the speed of the playback of the animation clip. Minimum Stopping Distance The minimum distance to stop near the wandering point and to consider it as reached. Maximum Stopping Distance The maximum distance to stop near the wandering point and to consider it as reached."},{"location":"HumanoidAiGetStarted.html","title":"Getting Started","text":""},{"location":"HumanoidAiGetStarted.html#getting-started-with-humanoid-ai-soldier","title":"Getting Started With Humanoid AI Soldier","text":""},{"location":"HumanoidAiGetStarted.html#introduction","title":"Introduction","text":"<p>This video guides you through the essential steps for getting started with the humanoid AI agent in Unity. We'll be adding the 3D humanoid soldier model using Unity's editor windows, integrating necessary components and game objects. Furthermore, we'll create a ragdoll for the soldier and incorporate vital animations tailored to the soldier movements, while fine-tuning animation import settings through the editor interface and will also make sure to optimise the animations.</p>"},{"location":"HumanoidAiGetStarted.html#setup-humanoid-ai-agent","title":"Setup Humanoid Ai Agent","text":"<p>Firstly,you have to go to the Mobile Action Kit &lt; Humanoid Ai &lt; Setup Humaoid Ai agent. This will open up a window where you need to setup the humanoid Ai agent.</p> <p></p> Fields Info Select Humanoid Ai Type  Choose either Soldier or Zombie. Reference Ai Prefab Drag and drop the Humanoid Ai Prefab from the project into this field. Humanoid Model Drag and drop the Humanoid Model from the hierarchy into this field. Make sure dragged humanoid model          is unpacked completely. Humanoid Model Avatar Drag and drop the Humanoid Model Avatar from the project into this field. Spine Bone To Rotate Drag and drop the Spine bone to rotate when this Ai agent will aim and shoot its target i.e spine bone. My Body Part To Target Drag and drop my body part to target so that other Ai entites in the game will shoot at this Ai agent i.e          HeadBone. Weapon Model Drag and drop weapon model from the project into this field. Weapon Socket Drag and drop the gameObject from this Ai agent hierarchy into this field where the weapon Model will be          instantiated when 'Configure Humanoid Ai agent' button will be clicked."},{"location":"HumanoidAiGetStarted.html#create-ragdoll","title":"Create Ragdoll","text":"<p>After configuring the humanoid Ai agent you need to click on create ragdoll where you need to drag and drop the bones at there  appropriate fields and create the ragdoll for the Ai agent.</p> <p></p>"},{"location":"HumanoidAiGetStarted.html#download-and-customise-humanoid-animations","title":"Download And Customise Humanoid Animations","text":"<p>Now to add animations to the humanoid Ai agent first click on the 'Customise Humanoid Animations' this will open up a window where you have to drag and drop the target object on which the new Animations will be applied. To create the new animations first duplicate the animator controller by selecting the Humanoid Ai agent in the hierarchy and click on the animator controller and locate it in the project and duplicate it.[SEE THE IMAGE BELOW]</p> <p> </p> <p>Drag and drop the new duplicated Animator controller from the project into this field.And than drag and drop the Humanoid Ai agent from the hierarchy to the field named as 'Humanoid Ai Animator Controller'.</p> <p>Select the character type to 'Soldier'</p> <p>After this download all the animations from Mixamo using the download button provided after each field and follow the instructions mentioned in the tutorial above.</p> <p> </p> <p>Great \ud83c\udf89 So we successfully setup the Humanoid Ai agent in the scene.</p>"},{"location":"HumanoidAiSettingUpAgent.html","title":"Setting Up Humanoid Ai Agent","text":""},{"location":"HumanoidAiSettingUpAgent.html#introduction","title":"Introduction","text":"<p>This video guides you through the essential steps for setting up a humanoid AI agent in Unity. We'll be customizing the 3D humanoid soldier model using Unity's editor windows, fixing death animations and will add neccessary gameObjects required to make this AI agent shoot. </p>"},{"location":"HumanoidAiSettingUpAgent.html#important-steps-to-follow","title":"Important Steps To Follow","text":""},{"location":"HumanoidAiSettingUpAgent.html#step-1","title":"Step 1","text":"<p>Select all the bones where the rigidbody is attached from the hierarchy and enable the checkbox 'Is Kinematic'.[See the image below]</p> <p></p>"},{"location":"HumanoidAiSettingUpAgent.html#step-2","title":"Step 2","text":"<p>Select the Weapon model and add a box collider to it and make sure to disable it like this [See the image below].This is important because when this Humanoid AI agent is dying we can add rigidbody to this weapon model and enable this box collider to achieve weapon falling effect on ground.</p> <p>Also you can make the weapon to be the child of palm bone instead of hand bone.</p> <p></p> <p></p>"},{"location":"HumanoidAiSettingUpAgent.html#step-3","title":"Step 3","text":"<p>Create an empty gameObject in the hierarchy and call it as 'Humanoid AI Manager' and add a script called 'Humanoid AI Manager'.This is important to make the AI Agent functioning. i.e The HumanoidAiManager script serves as a central manager for coordinating the behavior of humanoid AI agents within a Unity game environment. It optimizes performance by consolidating AI behavior updates and firing actions into a single Update() function, and handles spine rotation updates in the LateUpdate() function. This consolidation reduces the overhead of multiple Update() and LateUpdate() calls for individual AI agents, enhancing overall performance.</p> <p></p>"},{"location":"HumanoidAiSettingUpAgent.html#customising-the-agent","title":"Customising The Agent <p>Firstly,you can customise the soldier however you want using the textures provided(see the image below) and change it.</p> <p></p>  <p>You can also add the pouches,googles,bagpack etc.. for soldier if you want.Just drag and drop the prefab named as 'SoldierBagPack' from the project to the Spine bone that will automatically going to add googles,pouches,bagpack etc.. which will look like this[See the image below]</p> <p></p>","text":""},{"location":"HumanoidAiSettingUpAgent.html#preparing-the-soldier-for-shooting","title":"Preparing The Soldier For Shooting <p>Select the shooting point and Spine rotation point and align it like this[See the image below]</p> <p>NOTE : MAKE SURE TO CHANGE THE SCALE OF SPINE ROTATION POINT TO 0,0,0 ON ALL THE AXIS</p> <p></p> <p>After this create an empty gameObject in the weapon and call it as 'Bullet Shell Spawn Point' and place it like this[See the image below]. After that drag and drop it to the field called 'BulletShellSpawnPoint' exist in the shooting features paragraph.[See the image below]</p> <p></p> <p></p>","text":""},{"location":"HumanoidAiSettingUpAgent.html#fixing-death-animations","title":"Fixing Death Animations <p>When you will play death animation in the scene view you will notice that they are floating in the air and not grounded.[See the image below]</p> <p></p> <p>To fix this issue you need to select the animation clip from the project and update its settings like this.[See the image below]</p> <p></p>","text":""},{"location":"HumanoidAiSettingUpAgent.html#adding-missing-components-and-gameobjects","title":"Adding Missing Components And GameObjects <p>So before you enter the playmode you need to drag and drop the required components in three scripts.</p> <p>Inside the FindEnemies Script(located in the root gameObject) you need to drag and drop the 'Field of View GameObject' and Hid To Unhid Enemy Switcher. To create these gameObject you need to select the Head bone from the hierarchy and create an empty gameObject called as 'Field of View' and position is close to the eyes.[See the image below]</p> <p></p> <p>After this just duplicate 'Field of View' gameObject and rename it to Hid To Unhid Enemy Switcher and position it further from the humanoid AI agent eyes.[See the image below]</p> <p></p> <p>Just Drag and drop it in the script 'FindEnemies Script'.[See the image below]</p> <p></p> <p>Now Select the Humanoid Visibility Checker(located in the root gameObject) and here you need to drag and drop 'Raycast Checker' gameObject. To create it go back and select the Head bone from the hierarchy and create an empty gameObject called as 'Vision Obstacle Enemy Raycaster' and position is close to the eyes.[See the image below]</p> <p></p> <p>Just Drag and drop it in the script 'Humanoid Visibility Checker'.[See the image below]</p> <p></p> <p>Now Lastly Select the Humanoid Firing Behaviour Script(located in the Shooting point) and here you need to drag and drop 'Animation Clips' from the project to the Humanoid Firing Behaviour Script.[See the image below] </p> <p></p>","text":""},{"location":"HumanoidAiSettingUpAgent.html#run-the-game","title":"Run The Game <p>Great \ud83c\udf89 So we successfully configured the Humanoid Ai agent in the scene.</p>","text":""},{"location":"MakingPistolShooter_AIAgent.html","title":"Making Pistol Shooter AI Agent","text":""},{"location":"MakingPistolShooter_AIAgent.html#introduction","title":"Introduction","text":"<p>In this tutorial you will learn how to make AI agent use Pistol for shooting. We will be use some pistol animations from mixamo and will replace AI Agent rifle animations with it. We will also going to use and align pistol weapon in the hands of AI Agent.</p>"},{"location":"MakingPistolShooter_AIAgent.html#setup-the-pistol-weapon","title":"Setup the Pistol Weapon","text":"<p>First, We need to align the weapon in the AI agent hand so that during aiming it will look proper.[See the image below]</p> <p></p>"},{"location":"MakingPistolShooter_AIAgent.html#replacing-animations","title":"Replacing Animations","text":"<p>After downloading pistol animations from mixamo for the AI agent, first you need to duplicate the animator controller that we created for the rifle agent previously and rename it differently (i.e PistolAnimatorController). Than after this you need to go to Tools &lt; MobileActionKit &lt; Humanoid AI &lt; Edit Humanoid AI Animations and here first, drag and drop the AI agent from the hierarchy into this field and than after click on 'Import existing animations from animator' to see current animations exist in animator controller.After this you need to drag and drop the animations that you want to replace for example 'replace stand fire animation clip' with 'Pistol stand fire animation clip' and after replacing animations you need to click 'Modify Animation Clip Import Settings'.This will modify the import settings of each of the assigned animation clips. </p> <p></p> <p>Here,We also need to select each new pistol animation clip and check the checkbox 'Bake Into Pose' for both Root Transform Rotation and Root Transform Position.This is important so that animation will look proper in the game.[See the image below]</p> <p></p>"},{"location":"MakingPistolShooter_AIAgent.html#before-test","title":"Before Test","text":"<p>So,before testing this we need to assign some missing animations.When you will expand 'Humanoid Grenade Thrower' you will see grenade throw animation clip is missing. Just make sure to assign the animation clip from the project.[See the image below]</p> <p></p> <p>Similary, Select the shooting point and inside the 'Humanoid Firing Behaviour Component' you need to drag and drop stand fire, stand reload, crouch fire and crouch reload animation clips.[See the image below]</p> <p></p>"},{"location":"MakingPistolShooter_AIAgent.html#enter-play-mode","title":"Enter Play Mode","text":"<p>Great \ud83c\udf89 So we successfully setup the Pistol Shooter Humanoid Ai agent in the scene.</p>"},{"location":"MasterAIAgent.html","title":"Master AI Agent","text":""},{"location":"MasterAIAgent.html#introduction","title":"Introduction","text":"<p>In this tutorial you will learn how to make a 'Master AI Agent'.</p>"},{"location":"MasterAIAgent.html#enabling-checkboxes","title":"Enabling Checkboxes","text":"<p>First, enable all the checkboxes located in combat and non combat state behaviours.[see the image below]</p> <p></p>"},{"location":"MasterAIAgent.html#tweaking-behaviour","title":"Tweaking Behaviour","text":"<p>When you enable 'Charging','Take Covers' and 'Use Firing Points'.You will see below 3 sliders using which you can control the probability of each behaviour. For example: Increasing the charging probability to 100 and covers usage probability to 20 and firing points usage probability to 20 as well . This means the highest performed behaviour by the AI agent will be Charging while covers and firing points behaviour will be rare or least.</p> <p>This new state switch time will going to pick any behaviour randomly based on the 'Min/Max Time to Switch State'. </p> <p></p> Fields Info Min State Switch Time Minimal period of time in seconds for Ai Agent to stay in any given behaviour. Max State Switch Time Maximal period of time in seconds for Ai Agent to stay in any given behaviour. Charging Probability Increasing this slider value will increase the chances of the Ai agent to perform charging behaviour and decreasing the slider value will reduce the chances of the Ai agent to perform charging behaviour. Covers Usage Probability Increasing this slider value will increase the chances of the Ai agent to use covers and decreasing the slider value will reduce the chances of the Ai agent to use covers. Firing Points Usage Probability Increasing this slider value will increase the chances of the Ai agent to use firing points and decreasing the slider value will reduce the chances of the Ai agent to use firing points."},{"location":"MasterAIAgent.html#debug-agent-state","title":"Debug Agent State","text":"<p>When you enable debug agent state. This will going to spawn a prefab on top of AI agent head which will going to display the name,state of the agent and current behaviour. [See the image below]</p> <p></p> Fields Info Debug Agent State Enable this to add a 'Debug info' option in the core Ai behaviour script. Debug Info Text UI Provide the information about Ai agent current state. Debug Info Text UI Offset Adjust the DebugInfo Text UI position at x,y and z axis <p>Now You can just push Play in unity editor and test the behaviour \ud83d\ude42</p>"},{"location":"MergeWaveSpawner%26AIMaintainingSpawner.html","title":"Merge Wave Spawner &amp; AI Maintaining Spawner","text":""},{"location":"MergeWaveSpawner%26AIMaintainingSpawner.html#introduction","title":"Introduction","text":"<p>In this tutorial you will learn how to setup Wave spawner and AI Maintaining Spawner together and spawn consistent number of enemies and friendlies in each wave.</p>"},{"location":"MergeWaveSpawner%26AIMaintainingSpawner.html#ai-maintaining-spawner-global-ai-list","title":"AI Maintaining Spawner Global AI List","text":"<p>This script holds shared list of Ai agents for multiple 'AiMaintainingSpawners' to refer to. It allows keeping global count of alive Ai agents spawned by all 'AiMaintainingSpawners' throughout the mission. So that it would be possible to keep constant overall Ai agents count for a team by replenishing it without exceeding shared value of 'Ai agents to Maintain' fields of 'AiMaintainingSpawners' in case 'AiMaintainingSpawners' are used together with 'WaveSpawner' that would spawn enemy waves. 'AiMaintainingSpawners' could then respawn required amount of specified friendly Ai agents to maintain the size of player`s team. Respawning them synchronously with each new enemy wave. It is used in case game developers want player to be assisted by team of friendly Ai agents to engage enemy waves. </p> <p></p>"},{"location":"PickupWeapon.html","title":"Pickup Weapon","text":""},{"location":"PickupWeapon.html#introduction","title":"Introduction","text":"<p>This video guides you on how to setup the pickup weapon with attachments for the player to pickup.</p>"},{"location":"PickupWeapon.html#setup-pickup-weapon","title":"Setup Pickup Weapon","text":"<p>Firstly,you have to go to the Tools &lt; Mobile Action Kit &lt; Player &lt; FireArms &lt; Pickup Weapons &lt; Create Pickup Weapon. This will going to open up the wizard using which you need to setup the pickup weapon (See the video tutorial above for more detail).Your setup should look like this [See the image below].</p> <p></p>"},{"location":"PickupWeapon.html#pickup-weapon-and-attachment-script","title":"Pickup Weapon And Attachment Script","text":"<p>After clicking on 'Create Pickup Weapon' button in the wizard. This will going to add the Box Collider and the Pickup Weapon script to the weapon and Attachment Key script to the attachments.</p>"},{"location":"PickupWeapon.html#pickup-weapon_1","title":"Pickup Weapon","text":"<p>This script allows weapons placed in the scene to be picked up by the player. When the player enters the pickup area, the script checks if the weapon already exists in their inventory. If a matching weapon is found, it can either replace the existing weapon or can just pickup its ammo. The script also provides initial ammo, and optionally activates a random attachment when the game begin. Additionally, it supports displaying a UI confirmation for weapon pickups. The weapon becomes inactive after being picked up to prevent duplicate pickups.</p> <p></p> Fields Info ReplaceWeaponBySlotIfExist If enabled, the weapon will replace an existing weapon in the active weapons list of the 'PlayerWeaponsManager' script if a weapon with the same slot name exists.  If no matching slot weapon exists, it will replace the currently equipped weapon.  If an empty slot is available, the weapon will be added to the player's inventory.  If disabled, the weapon will either be added to an available empty slot in the active weapons list of the 'PlayerWeaponsManager' script or replace the currently equipped weapon. SlotName Enter the same slot name that you have entered in the 'PlayerWeaponsManager' Script. ShowWeaponPickupConfirmationUI If enabled, a UI confirmation will be shown to the player when they attempt to pick up the weapon. KeyName The unique identifier for this weapon. It is used to check if the player already owns this weapon in their inventory. InitialAmmo The amount of ammo the pickup weapon has by default. WeaponSprite The sprite image representing this weapon, used for UI and inventory display. ActivateRandomAttachment If enabled, a random attachment from the provided list will be activated when the game starts. AttachmentsToActivate A list of weapon attachments."},{"location":"PickupWeapon.html#attachment-key","title":"Attachment Key","text":"<p>Enter the same key name for this attachment that you have entered in the attachment script of this weapon.</p> <p></p> Fields Info KeyName Enter the same key name for this attachment that you have entered in the attachment script of this weapon."},{"location":"PickupWeapon.html#create-pickup-weapon-prefab","title":"Create Pickup Weapon Prefab","text":"<p>Now,you need to make sure to create the pickup weapon prefab using the pickup weapon wizard again.[See the image below]</p> <p></p> <p>Assign, All the player pickup weapons from the project to the 'Player Weapons Manager Script' with there correct key name that you have specified.[See the image below].</p> <p></p>"},{"location":"PickupWeapon.html#setup-pickup-weapon-ui","title":"Setup Pickup Weapon UI","text":"<p>To setup the pickup weapon UI just go to Tools &lt; Mobile Action Kit &lt; Player &lt; FireArms &lt; Pickup Weapons &lt; Create Pickup Weapon UI and assign the necessary gameObjects and components to the provided fields.[See the image below]</p> <p></p> <p>This setup will going to create the UI that you see below in the image. It will also going to add the Weapon Pickup Manager Script to the player.</p> <p></p> <p></p>"},{"location":"PickupWeapon.html#weapon-pickup-manager","title":"Weapon Pickup Manager","text":"<p>Handles weapon collection, including adding weapons to inventory, replacing weapons, and collecting ammo.</p> Fields Info PlayerWeaponsManagerScript Reference to the PlayerWeaponsManager script. DroppedWeaponPosition Position where the dropped weapon should appear. WeaponInfo UI panel displaying weapon information. WeaponIcon UI image to display pickup weapon icon. CollectWeaponButton Button for collecting a weapon. CollectAmmoButton Button for collecting ammo. AmmoText Text UI displaying available ammo."},{"location":"PickupWeapon.html#weapon-slot-manager","title":"Weapon Slot Manager","text":"<p>You can even control the default available weapons to the player and the Max weapons player can carry using the 'Weapon Slot Manager' script.</p> <p>The 'Weapon Slot Manager Script' manages weapon slot restrictions, determining the default active weapons and enforcing a maximum weapon limit during gameplay. Disable this script (along with its GameObject) when displaying the weapons available in the shop menu. Keep it enabled if you do not want to link it to the shop system Or want to activate specific weapon in this Level.</p> Fields Info PlayerWeaponsManagerScript Reference to the PlayerWeaponsManager script that handles the player's weapons. WeaponsToActivateByDefault Number of weapons that will be available to the player by default at the start of the game. MaxWeaponsPlayerCarry Maximum number of weapons a player can hold at any time during gameplay."},{"location":"PlayerFootstepSoundsBasedOnSurfaces.html","title":"Player Footstep Sounds Based On Surfaces","text":""},{"location":"PlayerFootstepSoundsBasedOnSurfaces.html#introduction","title":"Introduction","text":"<p>This video will guide you on how to setup different footstep sounds at different surfaces i.e - Grass,Metal. There are two ways using which you can create footstep sounds at different surfaces. You can detect at which collider the player is moving by using Trigger based collider Or by using Raycast.</p>"},{"location":"PlayerFootstepSoundsBasedOnSurfaces.html#player-surfaces-collider-detection","title":"Player Surfaces (Collider Detection)","text":"<p>You can create any collider example: A Box collider and check its is Trigger Checkbox and add a component to that gameObject called 'PlayerSurfaces'. [See The Image below]</p> <p>Script Info: This Script is Responsible To Change the Player Walk and Run Sounds Within the Surface Area For Example : Metal Surface , Grass Surface etc... </p> <p> </p> Fields Info PlayerManagerScript Reference to the PlayerManager script for player-related functions. FirstPersonControllerScript Reference to the FirstPersonController script for movement-related functions. AudioSourcesProperties.WalkAudioSourceComponent Audio source for the walking sound. AudioSourcesProperties.RunAudioSourceComponent Audio source for the running sound. AudioSourcesProperties.JumpStartAudioSourceComponent Audio source for the jump start sound. AudioSourcesProperties.JumpLandAudioSourceComponent Audio source for the jump landing sound. AudioClipProperties.WalkAudioClip Audio clip to be played when walking. AudioClipProperties.RunAudioClip Audio clip to be played when running. AudioClipProperties.JumpStartAudioClip Audio clip to be played when starting a jump. AudioClipProperties.JumpLandAudioClip Audio clip to be played when landing after a jump. TimeStepsProperties.TimeBetweenStandRunSteps Time interval between each footstep sound while standing and running. TimeStepsProperties.TimeBetweenCrouchRunSteps Time interval between each footstep sound while crouching and running. TimeStepsProperties.TimeBetweenStandWalkSteps Time interval between each footstep sound while standing and walking. TimeStepsProperties.TimeBetweenCrouchWalkSteps Time interval between each footstep sound while crouching and walking. TimeStepsProperties.TimeBetweenAimedStandSteps Time interval between each footstep sound while aiming and standing. TimeStepsProperties.TimeBetweenAimedCrouchSteps Time interval between each footstep sound while aiming and crouching. AudioSourceComponents Contains references to the audio sources for different movement sounds. AudioClips Contains references to the audio clips for different movement sounds. TimeSteps Stores footstep time intervals based on different movement states."},{"location":"PlayerFootstepSoundsBasedOnSurfaces.html#player-surface-detector-raycast-detection","title":"Player Surface Detector (Raycast Detection)","text":"<p>You can create an empty gameObject and make it to be the child of 'Player' and rotate it's X Axis at 90 degree and position it little bit above from the ground and add the component to it called 'PlayerSurfaceDetector' and using the script you can tweak different values and decide which audio clip to playback when the player walk/run/jump on a certain surface with a unique tag.[See The Image below]</p> <p>Script Info: The PlayerSurfaceDetector script offers a sophisticated solution for enhancing player behavior through dynamic footstep sound adjustments based on terrain/Mesh types. By employing tags and raycasting, this approach continuously checks ahead of the Player at intervals set by Min/Max timers. It provides detailed environmental responsiveness, allowing player to interact realistically with various surfaces like grass, concrete, or wood. However, due to its continuous raycasting nature, developers should consider performance implications, particularly on mobile platforms where it may slightly impact FPS. For smaller environments, alternative script like 'PlayerSurfaces' which do collider-based detection may be more performance-efficient, ensuring optimal gameplay experience across different device capabilities.</p> <p> </p> Fields Info FirstPersonControllerScript Reference to the FirstPersonController script for player movement and footstep handling. AudioSourceComponents Holds references to different audio sources used for movement sounds. raycastLength Length of the raycast that detects surfaces in front of the Player. Adjust this value based on how far ahead you want the Player to detect surfaces. minTimeToRaycast Minimum time interval between consecutive raycasts. Controls how often the script performs raycast checks. maxTimeToRaycast Maximum time interval between consecutive raycasts. Controls how often the script performs raycast checks. VisibleLayers Visible layers during raycasting. Objects on these layers will trigger surface detections. debugRaycast Toggle to enable or disable visual debugging of raycasts in the Scene view. When enabled (true), the raycast is visualized with raycastColor during development and testing. raycastColor Color used to visualize the raycast in the Scene view. Helps developers see where the raycast is directed during debugging. customFootStepSounds List of custom footstep sounds for different surface tags. Populate this list with tags and corresponding audio clips to simulate realistic footstep behavior based on terrain type. WalkAudioSourceComponent Audio source for walking sounds. RunAudioSourceComponent Audio source for running sounds. JumpStartAudioSourceComponent Audio source for jump start sounds. JumpLandAudioSourceComponent Audio source for jump landing sounds. WalkAudioClip Audio clip for walking on this surface type. RunAudioClip Audio clip for running on this surface type. JumpStartAudioClip Audio clip for jump start on this surface type. JumpLandAudioClip Audio clip for jump landing on this surface type. TimeBetweenStandRunSteps Time interval between each footstep while standing and running on this surface. TimeBetweenCrouchRunSteps Time interval between each footstep while crouching and running on this surface. TimeBetweenStandWalkSteps Time interval between each footstep while standing and walking on this surface. TimeBetweenCrouchWalkSteps Time interval between each footstep while crouching and walking on this surface. TimeBetweenAimedStandSteps Time interval between each footstep while aiming and standing on this surface. TimeBetweenAimedCrouchSteps Time interval between each footstep while aiming and crouching on this surface."},{"location":"PlayerHealthSetup.html","title":"Player Health Setup","text":""},{"location":"PlayerHealthSetup.html#introduction","title":"Introduction","text":"<p>This video will help you understand the Player Health script with examples in Play mode.</p>"},{"location":"PlayerHealthSetup.html#player-health","title":"Player Health","text":"<p>This Script Regulates The Player Health In game.</p> <p> </p> Fields Info RigidbodyComponent The Rigidbody component of the player, used to detect falls and calculate velocity. FirstPersonControllerScript Reference to the FirstPersonController script, used to check player movement and grounding. PlayerHealthbar The player's health bar, used to display and manage the player's health status. DamageEffectScreensFadeOutDuration The duration for the fade-out effect of damage indicators on the screen. TimeBetweenDamageEffectScreens The minimum time interval between damage indicator effects on the screen. MinHealthToCheck The minimum health value at which this effect is triggered. MaxHealthToCheck The maximum health value at which this effect is triggered. RotateImpactEffectBloodScreens Enable or disable rotation of blood screen effects. MinImpactEffectBloodScreenAngle The minimum angle for rotating blood screen effects. MaxImpactEffectBloodScreenAngle The maximum angle for rotating blood screen effects. ScaleImpactEffectBloodScreens Enable or disable scaling of blood screen effects. MinImpactEffectBloodScreenScale The minimum scale for blood screen effects. MaxImpactEffectBloodScreenScale The maximum scale for blood screen effects. DamageEffectUIImages The array of UI images used for blood screen effects. TemporaryDamageEffectBloodScreens A list of temporary damage effect properties based on the player's health. UIToDeactivateOnDie UI elements to deactivate when the player dies. AllWeaponsRoot The root object for all weapons, to deactivate upon death. DeadArmsObj The player's dead arms object, activated upon death. DeadArmsRotation The rotation of the player's arms when dead. DeadArmsPosition The position of the player's arms when dead. DeadArmsMoveDuration The duration for moving the player's arms to their dead position. DeadArmsRotationDuration The duration for rotating the player's arms to their dead rotation. PlayerBobber The player bobber object, for simulating a death bob effect. PlayerBobberPosition The position of the player bobber when the player is dead. PlayerBobberRotation The rotation of the player bobber when the player is dead. PlayerBobberMoveDuration The duration for moving the player bobber to its dead position. PlayerBobberRotationDuration The duration for rotating the player bobber to its dead rotation. PlayerCamera The player camera object, for simulating death animations. PlayerCameraPosition The position of the player camera when dead. PlayerCameraRotation The rotation of the player camera when dead. PlayerCameraMoveDuration The duration for moving the player camera to its dead position. PlayerCameraRotationDuration The duration for rotating the player camera to its dead rotation. GameObjectToActivateOnMissionFail Game objects to activate upon mission failure. GameObjectToDeactivateOnMissionFail Game objects to deactivate upon mission failure. PlayerDieProperties Properties for handling player death animations and effects. PermanentDamageEffectBloodScreens A list of permanent damage effect properties based on health ranges. MinimumRigidbodyVelocity The minimum velocity of the Rigidbody for a fall to cause damage. MaximumRigidbodyVelocity The maximum velocity of the Rigidbody for a fall to cause damage. HealthToReduceInPercent The percentage of health to reduce upon falling within the velocity range. FallingProperties A list of fall damage properties based on Rigidbody velocity. MinTimeToGroundCheck The minimum time to check if the player is grounded after falling. MaxTimeToGroundCheck The maximum time to check if the player is grounded after falling. DebugRigidbodyVelocity Debug value to monitor the Rigidbody's vertical velocity."},{"location":"PlayerLeader%26Follower_Part3.html","title":"Player Leader and AI Followers Part-3","text":""},{"location":"PlayerLeader%26Follower_Part3.html#introduction","title":"Introduction","text":"<p>This is the Part-3 of this series and in this part you will learn about how the Player becomes the leader and the AI to be his followers.</p>"},{"location":"PlayerLeader%26Follower_Part3.html#player-leader","title":"Player Leader","text":"<p>To make the Player to be the leader you need to add the component 'Player Guide' to the Player root gameObject and than drag and drop the AI Followers in the specified list.</p> <p></p>"},{"location":"PlayerLeader%26Follower_Part3.html#player-guide","title":"Player Guide","text":"<p>This script makes assigned Ai agents to follow player.If Agents following the player get into combat they will stop following him for the duration of the combat and will resume player following behaviour once combat ends.</p> Fields Info Follower Agents Drag and drop into this field one or multiple Ai agents from the hierarchy tab (with their role set as the 'Follower' inside the 'core Ai behaviour' script).         This functionality is designed to work with AI agents that are preplaced in the level by  mission designer(not spawned AI agents)."},{"location":"PlayerMeleeSetup.html","title":"Melee Attack","text":""},{"location":"PlayerMeleeSetup.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to setup the player melee.</p>"},{"location":"PlayerMeleeSetup.html#player-melee-setup","title":"Player Melee Setup","text":"<p>Go to Tools &lt; Mobile Action Kit &lt; Player &lt; Melee &lt; Player Melee Setup and assign the necessary gameObjects and components like shown in the video above. Your setup should look like this [See the image below].</p> <p></p>"},{"location":"PlayerMeleeSetup.html#melee-attack-script","title":"Melee Attack Script","text":"<p>This script is responsible for player Melee attack actions.</p> <p></p> Fields Info MeleeType Indicates the type of melee attack. 'Instant Attack' is the default. RequiredComponents Container for all the required components for the melee attack system. MeleeUIButtons List of buttons in the UI that trigger melee attacks. MeleeAnimatorComponent Animator component used to play melee animations. MeleeIcon Icon that represents melee functionality in the UI. AudioSourceComponent Audio source used to play melee-related sounds. Animations Container for all melee attack animations and their configurations. AttackAnimations List of melee attack animations available for this system. MeleeDamageScripts Scripts that handle melee damage for this attack. AttackAnimationClip Animation clip to play for this melee attack. AttackAudioClip Audio clip to play during this melee attack. DelayDamage Delay before applying damage after the animation starts. Delays Delays for different actions within the melee attack system. KnifeActivationDelay Time to wait before activating the knife in a melee attack. InstantAttackAnimationDelay Delay before starting an instant attack animation. UIInteraction Handles interactions and UI changes during melee actions. UIDisableColor Color to apply to disabled UI elements (e.g., gray). BeforeSelection UI images to disable while melee hands are activated (e.g., during weapon removal animation). UIToDisableBeforeAttack UI images to disable while the melee attack animation is playing."},{"location":"PlayerMiniMapSetup.html","title":"Player MiniMap Setup","text":""},{"location":"PlayerMiniMapSetup.html#introduction","title":"Introduction","text":"<p>This video guides you through the steps required to implement Minimap for player. We'll be adding the minimap using Unity's editor windows, integrating necessary components and game objects.</p>"},{"location":"PlayerMiniMapSetup.html#setup-minimap","title":"Setup Minimap","text":"<p>Firstly,you have to go to the Tools &lt; Mobile Action Kit &lt; Player &lt; Player &lt; Create Minimap. This will open up the MiniMap setup wizard where in the first field you have to drag and drop the Player from the hierarchy. In the second field you have to drag and drop the 'Required Scripts' gameObject from the hierarchy. In the third field you have to drag and drop the Canvas 2D from the hierarchy and in the last field you have to go to project and create a render texture and drag and drop it to the last field in the wizard called 'Render Texture' and than click the button 'Add Required UI'.</p> <p></p>"},{"location":"PlayerMiniMapSetup.html#minimap","title":"MiniMap","text":"<p>The purpose of a minimap script is to provide player with a smaller, simplified version of the game world that helps them navigate and understand their surroundings.</p> <p></p> Fields Info Enable MiniMap Enables or disables the MiniMap functionality. If unchecked, the MiniMap will not be displayed. MiniMap Camera Dedicated orthographic 'Mini_Map' camera from hierarchy is to be placed into this field. Player Transform Player root GameObject is to be placed into this field. Rotate Minimap With Player Toggles whether the MiniMap rotates to match the player's facing direction. Small Map GameObject for the small-sized MiniMap view. Big Map GameObject for the enlarged MiniMap view. Small MiniMap Camera Size The orthographic size of the MiniMap camera when in the small view. Big MiniMap Camera Size The orthographic size of the MiniMap camera when in the big view. Small MiniMap Indicator Size The size of the indicators on the MiniMap when in the small view. Big MiniMap Indicator Size The size of the indicators on the MiniMap when in the big view. MiniMap UI Buttons An array of UI buttons used for interacting with the MiniMap (e.g., switching between small and big map views)."},{"location":"PlayerSetup.html","title":"Player Setup","text":""},{"location":"PlayerSetup.html#introduction","title":"Introduction","text":"<p>This video guides you through the inital steps for getting started with the Player in Unity. We'll be adding the Player in the city using editor windows, integrating necessary components and game objects. Furthermore, we'll be talking about some important scripts like First person controller, Player Manager, Crouch, Procedural bobbing and other scripts. Will also fine-tune values in those scripts and will also make sure to test the player setup.</p>"},{"location":"PlayerSetup.html#setup-player","title":"Setup Player","text":"<p>Firstly,you have to go to the Tools &lt; Mobile Action Kit &lt; Player &lt; Player &lt; Create Player. This will automatically create the player for you and will reset it's position and rotation. You can just position it to the city and push play in unity to test it.</p> <p></p>"},{"location":"PlayerSetup.html#two-types-of-player-running-option","title":"Two Types of Player Running Option","text":"<p>You can choose either 'Run or Walk Switch' Or Hold Run. The difference between both is If you choose 'Hold Run' than you can hold the Run UI button to move the player in the forward direction with the set amount of speed specified in the First Person Controller script paragraph named as 'Speeds'. If you choose 'Run or Walk Switch' than you can switch between either Run or walk by clicking on the Run UI button this button by default have the 'Run Sprite' meaning if you click on it, The image will be changed to 'Walk Sprite' which allow the player to use the Joystick to navigate around the city with the run speed specified in the First Person Controller script paragraph named as 'Speeds'. If you click on the Run UI button again which now have the 'Walk Sprite' this will change the sprite to 'Run Sprite' and this will allow the player to use the joystick to navigate around the city with the walk speed specified in the First Person Controller script paragraph named as 'Speeds'.</p> <p></p> <p>The Player Manager script manages various player HUD Ui elements for interactions with game environment and Weapons.</p> Fields Info Switching Player Weapons Component 'SwitchingPlayerWeapons' GameObject with 'SwitchingPlayerWeapons' script component attached to it is to be placed into this field. Fire Button 'FireButton' GameObject with 'Button' component attached to it is to be placed into this field. Reload Button 'ReloadButton' GameObject with 'Button' component attached to it is to be placed into this field. Aiming Button 'AimingButton' GameObject with 'Button' component attached to it is to be placed into this field. Run Options              Choose one of the two available running activation options:             <ul> <li>RunOrWalkSwitch: Alters movement joystick to always walk or always run depending on the state of the 'Run' button.</li> <li>HoldToRun: The 'Run' button acts as a dedicated running button that needs to be kept pressed for the player to run.</li> </ul> Walking Sprite Walking sprite from the project is to be placed into this field. Running Sprite Running sprite from the project is to be placed into this field. Player Weapon Scripts All 'ShootingPoint' GameObjects of all the weapons from the player's hierarchy are to be placed into this list."},{"location":"PlayerSetup.html#crouch","title":"Crouch","text":"<p>Crouch script Controls The Player Crouch Behaviour.</p> <p></p> Fields Info Player Camera Reference to the player's camera. Used for adjusting the camera's height when crouching or standing. Sit Down Speed Speed at which the player crouches down. Stand Up Speed Speed at which the player stands up. Crouch Height The height of the camera when crouching. Stand Height The height of the camera when standing. Stand Capsule Collider Collider used when the player is standing. Crouch Capsule Collider Collider used when the player is crouching. Standing Sprite Sprite to show when the crouch button is toggled to a standing position. Crouching Sprite Sprite to show when the crouch button is toggled to a crouching position."},{"location":"PlayerSetup.html#first-person-controller","title":"First Person Controller","text":"<p>This Script Controls The Player Walk,Sprint,Jump and TouchPad Behaviour.</p> <p> </p> Fields Info Player Camera Reference to the player's camera. Controls the player's view during movement, sprinting, jumping, and aiming. Joystick Script Script for managing the player's joystick input for movement control. TouchPad Look Handles touchpad input for controlling the player's aim and camera movement. Weapon Aimed TouchPad Look Values Settings for touchpad sensitivity when aiming weapons. Speeds Contains the player's movement speeds for different states such as walking, running, crouching, and aiming. Run Speed On Standing Speed of the player while running in a standing position. Run Speed On Crouching Speed of the player while running in a crouched position. Player Fall Speed How fast the player falls when in air. Walk and Run Sounds Manages footstep sounds for walking, running, crouching, and aiming. Stand Run Steps Sound Trigger Sound trigger for footstep sounds when the player is running while standing. Crouch Run Steps Sound Trigger Sound trigger for footstep sounds when the player is running while crouching. Time Between Stand Sprint Steps The time interval between footstep sounds while sprinting in a standing position. Time Between Crouch Sprint Steps The time interval between footstep sounds while sprinting in a crouched position. Jump Handles jump settings, including jump height, duration, and associated sounds. Jump Button Reference to the button used to trigger the player's jump action. Stand Jumping Meters Maximum height the player can reach when jumping from a standing position. Stand Jumping Duration The time it takes for the player to reach the maximum height when jumping from a standing position. Crouch Jumping Meters Maximum height the player can reach when jumping from a crouched position. Crouch Jumping Duration The time it takes for the player to reach the maximum height when jumping from a crouched position. Weapon Touch Settings for adjusting touchpad sensitivity and smoothing during weapon aiming. X Sensitivity Horizontal sensitivity of the touchpad for aiming. Y Sensitivity Vertical sensitivity of the touchpad for aiming. Smooth Enables or disables how smooth should be the touchpad input. Smooth Time Defines the duration over which touchpad input is smooth."},{"location":"PlayerSetup.html#procedural-bobbing","title":"Procedural Bobbing","text":"<p>This Script Controls The Player Walk,Sprint,Jump and Aimed Bobbing Behaviour.</p> <p></p> Fields Info First Person Controller Script Player root gameobject containing 'FirstPersonController' script is to be placed into this field. Player Manager Script PlayerManager gameobject containing 'PlayerManager' script is to be placed into this field. Bob Object Gameobject to be bobbed is to be placed into this field. Enable Procedural Hip Fire Idle Toggle procedural Hip Fire Idle animation. Enable Procedural Aimed Idle Toggle procedural Aimed Idle animation. Hip Fire Pos Value Position offset values for the Hip Fire Idle pose. Hip Fire Rot Value Rotation offset values for the Hip Fire Idle pose. Aimed Pos Value Position offset values for the Aimed Idle pose. Aimed Rot Value Rotation offset values for the Aimed Idle pose. Stand Hip Fire Idle Values Bob values for Standing Hip Fire Idle. Crouch Hip Fire Idle Values Bob values for Crouching Hip Fire Idle. Stand Aimed Idle Values Bob values for Standing Aimed Idle. Crouch Aimed Idle Values Bob values for Crouching Aimed Idle. Stationary Stand Hip Fire Reset Duration Reset duration for Stationary Stand Hip Fire pose. Stationary Crouch Hip Fire Reset Duration Reset duration for Stationary Crouch Hip Fire pose. Stationary Stand Aimed Reset Duration Reset duration for Stationary Stand Aimed pose. Stationary Crouch Aimed Reset Duration Reset duration for Stationary Crouch Aimed pose. Stand Sprint Reset Duration Reset duration for Stand Sprint. Crouch Sprint Reset Duration Reset duration for Crouch Sprint. Stand Walk Reset Duration Reset duration for Stand Walk. Crouch Walk Reset Duration Reset duration for Crouch Walk. Stand Jump Reset Duration Reset duration for Stand Jump. Crouch Jump Reset Duration Reset duration for Crouch Jump. Bob Stand Sprint Values Bobbing values for Stand Sprint. Bob Crouch Sprint Values Bobbing values for Crouch Sprint. Bob Stand Walk Values Bobbing values for Stand Walk. Bob Crouch Walk Values Bobbing values for Crouch Walk. Bob Aimed Stand Walk Values Bobbing values for Aimed Stand Walk. Bob Aimed Crouch Walk Values Bobbing values for Aimed Crouch Walk. Bob Stand Jump Values Bobbing values for Stand Jump. Bob Crouch Jump Values Bobbing values for Crouch Jump."},{"location":"PlayerSetup.html#multiple-ambient-sounds-player","title":"Multiple Ambient Sounds Player","text":"<p>This script, handles the playback of ambient sounds in the game. It supports playing sounds either randomly or sequentially, based on the 'PlaySoundsRandomly' field. Each sound can have unique properties such as volume, priority, loop behavior, and a time range for playback duration. The script uses a coroutine to manage the timing and playback of sounds, ensuring seamless transitions between them. It requires an 'AudioSource' component on the same GameObject to function properly and can be configured using the 'AmbientSoundProperties' list.</p> <p></p> Fields Info Play Sounds Randomly Determines whether the ambient sounds should be played in random order. If unchecked, sounds will play sequentially. Sound Name Name of the sound for identification purposes. Audio Clip To Play The audio clip to play for this ambient sound. Audio Volume Volume level for this audio clip (0 = muted, 1 = full volume). Loop Whether this audio clip should loop continuously when played. Audio Priority The priority of this audio clip (0 = highest priority, 256 = lowest priority). Useful when multiple audio sources are competing. Minimum Time To Play This Sound The minimum amount of time (in seconds) before this sound can start playing. Maximum Time To Play This Sound The maximum amount of time (in seconds) before this sound can start playing. Ambient Sound Properties List of ambient sound properties. Each entry defines the characteristics of a single sound."},{"location":"PlayerWeaponAttachments.html","title":"Player Weapon Attachments","text":""},{"location":"PlayerWeaponAttachments.html#introduction","title":"Introduction","text":"<p>This video will guide you on how to setup player weapon attachments like Sniper Scope, Red Dot Sight,Supressor etc.</p>"},{"location":"PlayerWeaponAttachments.html#add-attachments-to-the-weapon","title":"Add Attachments To The Weapon","text":"<p>First, You need to setup the Ak scope and other attachments and align it properly with the weapon.As an example [See the screenshots below]</p> <p> </p>"},{"location":"PlayerWeaponAttachments.html#setup-attachments","title":"Setup Attachments","text":"<p>Go to Tools &lt; Mobile Action Kit &lt; Player &lt; FireArms &lt; Add Weapon Attachments. Set it up like shown in video above and your setup should look like this [See the screenshot below]</p> <p></p> <p>When you click 'Add Required Components To GameObject' it basically add the Weapon Optics Script to the Optics Attachment and add the attachments activator script to a newly created gameObject.[See the Screenshot below]</p> <p> </p> <p>Follow the same steps to add the Red Dot Sight Attachment to the AK47 weapon but make sure to uncheck the checkbox 'Create New Attachment' so it do not create a new attachments activator script for the AK47 weapon.</p> <p>In the screenshot below you can see I have added both the Red Dot Sight and the Supressor attachment to the AK47 Weapon.</p> <p></p> <p>This time when you click 'Add Required Components To GameObject' you will find it will going to add the Supressor Controller Script to the supressor mesh and here you can add a separate Muzzle Flash Or Muzzle Mesh and drag and drop necessary components from the hierarchy to the provided fields. [See the screenshot below]</p> <p></p> <p>After these steps, Make sure to Align all the weapon using the Weapon View Wizard. You can open up the Weapon View Wizard by going to Tools &lt; Mobile Action Kit &lt; Player &lt; FireArms &lt; Weapon View. You can watch the video tutorial above to learn more about how to Align the weapon with scope. </p> <p></p>"},{"location":"PlayerWeaponAttachments.html#weapon-optics","title":"Weapon Optics","text":"<p>This script overrides several default values of aimed player weapon as well as player and weapon cameras stored in 'PlayerWeapon' script if weapon equipped with the optical sight. It helps to set desired position and rotation of the aimed weapon, and adjust zoom values for both player and weapon cameras to any particular type of the optical scope. This script is to  be disabled if weapon is not equipped with any kind of optics and uses iron sights.</p> Fields Info PlayerWeaponComponent Respective 'Shooting point' GameObject from the player's hierarchy is to be placed into this field. UseAimedBlurEffect Enable this option to use a blur effect when aiming. AimedBlurEffect GameObject representing the aimed blur effect. This effect is shown when 'UseAimedBlurEffect' is enabled. IsSniperScope Enable this option if the weapon is equipped with a sniper scope. OverrideAimedWeaponPivotValues Overrides the position and rotation values of the aimed weapon pivot for better alignment with the optical sight. CamerasFovParameters Overrides the zoom and field-of-view parameters for both player and weapon cameras. CamerasFovParametersClass.PlayerCameraMagnifiedFov The field of view (FOV) of the player camera when zoomed in with the optics. CamerasFovParametersClass.PlayerCameraFovChangeSpeed The speed at which the player camera transitions to the magnified FOV. CamerasFovParametersClass.WeaponCameraMagnifiedFov The field of view (FOV) of the weapon camera when zoomed in with the optics. CamerasFovParametersClass.WeaponCameraFovChangeSpeed The speed at which the weapon camera transitions to the magnified FOV. OverrideAimedWeaponPivotValuesClass.AimedWeaponPivotPosition The local position of the weapon pivot when aiming with the optics. OverrideAimedWeaponPivotValuesClass.AimedWeaponPivotRotation The local rotation of the weapon pivot when aiming with the optics."},{"location":"PlayerWeaponAttachments.html#supressor-script","title":"Supressor Script","text":"<p>This script modify 'Player Weapon Script Properties' when the supressor is enabled on this weapon.</p> Fields Info PlayerWeaponScript Reference to the PlayerWeapon script to modify its shooting features. UseMuzzleMesh Toggle to use a muzzle mesh instead of muzzle flash particles. MuzzleMesh The GameObject representing the muzzle flash mesh to be displayed during firing. MuzzleFlashParticles The particle system used for the muzzle flash effect when not using a muzzle mesh. TimeToDeactivateMuzzleMesh Time (in seconds) after which the muzzle mesh will be deactivated automatically. SuppressedFireSound Audio clip to play when firing with suppressed sound. AlertingSoundRadius SphereCollider representing the area where sound alerts enemies. Adjusts dynamically based on RadiusValue. RadiusValue Radius of the sound alert effect caused by firing. Larger values alert enemies farther away."},{"location":"PlayerWeaponAttachments.html#weapon-activator-script","title":"Weapon Activator Script","text":"Fields Info keyName Unique key name used to track the activation state of this inventory item in PlayerPrefs. ObjectsToActivate GameObjects that should be activated when this inventory item is equipped. AttachmentFunctionScript Script that contains the function to be called when this item is activated. AttachmentFunction Name of the function to be called from the specified script when this item is activated."},{"location":"PlayerWeaponAttachments.html#additional-settings-for-sniper-scope","title":"Additional Settings For Sniper Scope","text":"<p>Go to Tools &lt; Mobile Action Kit &lt; Player &lt; FireArms &lt; Add Sniper Scope. Set it up like shown in video above and your setup should look like this [See the screenshot below]</p> <p></p> <p>Activate Sniper Scope UI by selecting the Player weapon script attached to the 'Shooting Point GameObject'.[See the screenshot below]</p> <p></p> <p>This setup above will also going to add two Scripts - Sniper Scope and Reticle Adjuster Script.</p> <p></p>"},{"location":"PlayerWeaponAttachments.html#sniper-scope-script","title":"Sniper Scope Script","text":"<p>This Script Provides The Sniper Scope Behaviour To The Weapon.</p> Fields Info ScopeSettings.PlayerWeaponScript The PlayerWeapon script attached to the weapon. This controls weapon-specific behavior. ScopeSettings.ScopeUIOverlay The UI overlay that appears when the sniper scope is active. ScopeSettings.ScopeFOV Field of view when the sniper scope is active. ScopeSettings.ScopeActivationDelay Delay (in seconds) before the scope UI activates after scoping. ScopeSettings.UIElementsToDeactivate Array of UI elements to deactivate when scoping. ZoomSettings.EnableZoomControls Enable or disable zoom controls for the sniper scope. ZoomSettings.UseZoomSlider Use a slider UI element to control the zoom level. ZoomSettings.ZoomSlider The slider UI element for adjusting the zoom level. ZoomSettings.MinZoomFOV Minimum Field of View (FOV) value for the zoom. ZoomSettings.ZoomSpeed Speed of zooming in or out. ShootingSettings.ShotAnimatorComponent Animator component to handle shooting animations. ShootingSettings.ShotAnimationClip Animation clip to play when a shot is fired. ScopeConfig Settings related to the sniper scope functionality. ZoomConfig Settings related to zoom functionality for the sniper scope. ShootingConfig Settings related to shooting animations while scoped."},{"location":"PlayerWeaponAttachments.html#reticle-adjuster-script","title":"Reticle Adjuster Script","text":"<p>This script helps in changing the sniper scope reticle position in X and Y axis when the weapon is aiming.</p> Fields Info PlayerWeaponScript Reference to the player's weapon script to retrieve shooting and aiming settings. ReticleConfig Settings for configuring the reticle, including X and Y slider adjustments. SliderAdjusterSound Audio source that plays when a slider adjustment is made. ReticleSettings.Reticle The reticle's transform, which will be adjusted based on the slider settings. ReticleSettings.XSliderSettings Settings for the horizontal slider that adjusts the X position of the reticle. ReticleSettings.YSliderSettings Settings for the vertical slider that adjusts the Y position of the reticle. SliderSettings.Slider The slider UI element used to adjust the position of the reticle. SliderSettings.EnableStepping Determines whether the slider uses discrete steps for adjustments. SliderSettings.StepsFromMiddle The number of steps on either side of the middle position for stepping adjustments. SliderSettings.StepSize The size of each step for stepping adjustments. SliderSettings.MovementSpeed Speed at which the reticle moves when the slider value changes. <p>Make sure to add Sniper scope attachment by going to Tools &lt; Mobile Action Kit &lt; Player &lt; FireArms &lt; Add Weapon Attachments. Set it up like shown in video above and your setup should look like this [See the screenshot below]</p> <p></p> <p>After this, Last step is to assign the 'Attachment Activator Script' to the Player Weapon Script for both the Ak47 Weapon and SVK Weapon.[See the screenshot below]</p> <p></p> <p>Now you can Play Test! \ud83c\udf89</p>"},{"location":"PlayerWeaponProjectileShooting_Part4.html","title":"Player Weapon Projectile Shooting Part4","text":""},{"location":"PlayerWeaponProjectileShooting_Part4.html#introduction","title":"Introduction","text":"<p>This video will help you understand about player weapon projectile shooting. </p>"},{"location":"PlayerWeaponProjectileShooting_Part4.html#first-step","title":"First Step","text":"<p>Go to Player Weapon Script, and inside the shooting mechanics choose the option 'Projectile Shooting'.[See the screenshot below]</p> <p></p> <p>and than copy/paste the name from object pooler to the field 'Projectile Name' located inside the shooting mechanics paragraph of the Player Weapon script.[See the screenshot below]</p> <p></p>"},{"location":"PlayerWeaponProjectileShooting_Part4.html#bullet-script","title":"Bullet Script","text":"<p>This script is used in cases when shooting is performed with projectile instead of raycast.One of the Two types of projectiles provided with this kit can be choosed in this script.One Is Simple bulet optimized for more performant gameplay.Other is Realistic bullet  with  physics calculations for more fidelity and realism.</p> <p></p> Fields Info AffectedLayers Layers that will get affected by the bullets. TimeToDeactivate If the bullet doesn\u2019t hit anything and continues to fly, this will deactivate it after the set time to reactivate it inside the object pooler. BulletSpeed Choose the speed that would be appropriate for the real-world projectile bullet you are implementing in your project. DamageToTarget Amount of damage points this bullet will apply to targets. DelayTrailRendering This value should be tweaked for the trail renderer to adequately display the tracer bullet effect. EnableGuidedProjectile Enables guided projectile functionality. ImpactEffectName If the bullet hits other colliders (e.g., road, houses), specifies which prefab to spawn from the Object Pooler at the hit point (e.g., BulletHole). AddBulletForce If checked than the force will be applied to humanoid Ai agent at the time of death using the fields provided below.."},{"location":"PlayerWeaponSetupBobbing%2CRecoil%26Crosshair_Part2.html","title":"Player Weapon Bobbing, Recoil &amp; Crosshair Part-2","text":""},{"location":"PlayerWeaponSetupBobbing%2CRecoil%26Crosshair_Part2.html#introduction","title":"Introduction","text":"<p>This video will help you understand about player weapon bobbing, Recoil and crosshair scripts.</p>"},{"location":"PlayerWeaponSetupBobbing%2CRecoil%26Crosshair_Part2.html#player-weapon-bobbing","title":"Player Weapon Bobbing","text":""},{"location":"PlayerWeaponSetupBobbing%2CRecoil%26Crosshair_Part2.html#procedural-bobbing","title":"Procedural Bobbing","text":"<p>Procedural Bobbing script is providing looping animation to any of the player`s child gameObjects it is being attached to (cameras, weapons etc.) be it Walking,Sprinting, Jumping, Crouching movements, for Hip/Idle and Aimed poses. It provides the ability to add extra layers of control and fine-tuning to the overall dynamics of the player's view.</p> <p></p> Fields Info FirstPersonControllerScript Player root gameobject containing 'FirstPersonController' script is to be placed into this field. PlayerManagerScript PlayerManager gameobject containing 'PlayerManager' script is to be placed into this field. BobObject Gameobject to be bobbed is to be placed into this field. EnableProceduralHipFireIdle Toggle procedural Hip Fire Idle animation. EnableProceduralAimedIdle Toggle procedural Aimed Idle animation. HipFirePosValue Position offset values for the Hip Fire Idle pose. HipFireRotValue Rotation offset values for the Hip Fire Idle pose. AimedPosValue Position offset values for the Aimed Idle pose. AimedRotValue Rotation offset values for the Aimed Idle pose. StationaryStandHipFireResetDuration Reset duration for Stationary Stand Hip Fire pose. StationaryCrouchHipFireResetDuration Reset duration for Stationary Crouch Hip Fire pose. StationaryStandAimedResetDuration Reset duration for Stationary Stand Aimed pose. StationaryCrouchAimedResetDuration Reset duration for Stationary Crouch Aimed pose. StandSprintResetDuration Reset duration for Stand Sprint. CrouchSprintResetDuration Reset duration for Crouch Sprint. StandWalkResetDuration Reset duration for Stand Walk. CrouchWalkResetDuration Reset duration for Crouch Walk. StandJumpResetDuration Reset duration for Stand Jump. CrouchJumpResetDuration Reset duration for Crouch Jump. BobStandSprintValues Bobbing values for Stand Sprint. BobCrouchSprintValues Bobbing values for Crouch Sprint. BobStandWalkValues Bobbing values for Stand Walk. BobCrouchWalkValues Bobbing values for Crouch Walk. BobAimedStandWalkValues Bobbing values for Aimed Stand Walk. BobAimedCrouchWalkValues Bobbing values for Aimed Crouch Walk. BobStandJumpValues Bobbing values for Stand Jump. BobCrouchJumpValues Bobbing values for Crouch Jump."},{"location":"PlayerWeaponSetupBobbing%2CRecoil%26Crosshair_Part2.html#procedural-idle-bobbing","title":"Procedural Idle Bobbing","text":"<p>This script dynamically adjusts the weapon's idle bobbing movement based on the player's idle behaviour. It smoothly interpolates positional and rotational shifts to create a procedural idle animationsThe script utilizes LeanTween for animations and supports separate bobbing behaviors for hip fire and aimed states, both in standing and crouching positions.</p> <p></p> Fields Info PlayerManagerScript Reference to the PlayerManager script, which handles player state and weapon interactions. BobObject The object that will be animated for procedural bobbing (typically the weapon or camera). HipFirePosValue Default position offset for hip fire stance. HipFireRotValue Default rotation offset for hip fire stance. AimedPosValue Default position offset when aiming down sights. AimedRotValue Default rotation offset when aiming down sights. StationaryStandHipFireResetDuration Time taken to reset the bobbing effect when the player is standing in hip fire mode. StationaryCrouchHipFireResetDuration Time taken to reset the bobbing effect when the player is crouching in hip fire mode. StationaryStandAimedResetDuration Time taken to reset the bobbing effect when the player is standing in aimed mode. StationaryCrouchAimedResetDuration Time taken to reset the bobbing effect when the player is crouching in aimed mode. StandHipFireIdleValues Bobbing properties when the player is standing in hip fire mode. CrouchHipFireIdleValues Bobbing properties when the player is crouching in hip fire mode. StandAimedIdleValues Bobbing properties when the player is standing while aiming. CrouchAimedIdleValues Bobbing properties when the player is crouching while aiming. MinShift Minimum position shift values for procedural bobbing. MaxShift Maximum position shift values for procedural bobbing. MinRotation Minimum rotation shift values for procedural bobbing. MaxRotation Maximum rotation shift values for procedural bobbing. XShiftDuration Time taken to complete one bobbing cycle along the X-axis. YShiftDuration Time taken to complete one bobbing cycle along the Y-axis. ZShiftDuration Time taken to complete one bobbing cycle along the Z-axis. RotationDuration Time taken to complete one bobbing cycle for rotations. XShiftDelay Delay before starting the bobbing motion on the X-axis. YShiftDelay Delay before starting the bobbing motion on the Y-axis. ZShiftDelay Delay before starting the bobbing motion on the Z-axis. RotationDelay Delay before starting the bobbing motion for rotations."},{"location":"PlayerWeaponSetupBobbing%2CRecoil%26Crosshair_Part2.html#recoil-script","title":"Recoil Script","text":"<p>This Script provides random behavior for player weapon recoil, including speed and shake variations.</p> <p></p> Fields Info RecoilPosition Transform that determines the recoil position. RotationPoint Transform that determines the recoil rotation point. Player Stand Recoil Values MinStandPositionalRecoilSpeed Minimum speed for positional recoil when standing. MaxStandPositionalRecoilSpeed Maximum speed for positional recoil when standing. MinStandRotationalRecoilSpeed Minimum speed for rotational recoil when standing. MaxStandRotationalRecoilSpeed Maximum speed for rotational recoil when standing. MinStandHipRecoilRotation Minimum rotation values for hip fire recoil when standing. MaxStandHipRecoilRotation Maximum rotation values for hip fire recoil when standing. MinStandHipRecoilKickBack Minimum positional kickback for hip fire recoil when standing. MaxStandHipRecoilKickBack Maximum positional kickback for hip fire recoil when standing. MinStandAimedRecoilRotation Minimum rotation values for aimed recoil when standing. MaxStandAimedRecoilRotation Maximum rotation values for aimed recoil when standing. MinStandAimedRecoilKickBack Minimum positional kickback for aimed recoil when standing. MaxStandAimedRecoilKickBack Maximum positional kickback for aimed recoil when standing. Player Crouch Recoil Values CrouchScript Reference to the player's crouch script. MinCrouchPositionalRecoilSpeed Minimum speed for positional recoil when crouching. MaxCrouchPositionalRecoilSpeed Maximum speed for positional recoil when crouching. MinCrouchRotationalRecoilSpeed Minimum speed for rotational recoil when crouching. MaxCrouchRotationalRecoilSpeed Maximum speed for rotational recoil when crouching. MinCrouchHipRecoilRotation Minimum rotation values for hip fire recoil when crouching. MaxCrouchHipRecoilRotation Maximum rotation values for hip fire recoil when crouching. MinCrouchHipRecoilKickBack Minimum positional kickback for hip fire recoil when crouching. MaxCrouchHipRecoilKickBack Maximum positional kickback for hip fire recoil when crouching. MinCrouchAimedRecoilRotation Minimum rotation values for aimed recoil when crouching. MaxCrouchAimedRecoilRotation Maximum rotation values for aimed recoil when crouching. MinCrouchAimedRecoilKickBack Minimum positional kickback for aimed recoil when crouching. MaxCrouchAimedRecoilKickBack Maximum positional kickback for aimed recoil when crouching."},{"location":"PlayerWeaponSetupBobbing%2CRecoil%26Crosshair_Part2.html#crosshair-script","title":"Crosshair Script","text":"<p>This Script Controls The Reticle Lines of Cross Hair</p> <p></p> Fields Info CrouchScript Reference to the player's crouch script. ReticleLinesParent The parent RectTransform that holds the reticle lines. StandDefaultSizeX Default width of the crosshair when standing. StandDefaultSizeY Default height of the crosshair when standing. StandMaxSizeX Maximum width of the crosshair when standing. StandMaxSizeY Maximum height of the crosshair when standing. StandExpandSpeed Speed at which the crosshair expands when standing. StandResetSpeed Speed at which the crosshair resets when standing. CrouchDefaultSizeX Default width of the crosshair when crouching. CrouchDefaultSizeY Default height of the crosshair when crouching. CrouchMaxSizeX Maximum width of the crosshair when crouching. CrouchMaxSizeY Maximum height of the crosshair when crouching. CrouchExpandSpeed Speed at which the crosshair expands when crouching. CrouchResetSpeed Speed at which the crosshair resets when crouching."},{"location":"PlayerWeaponSetup_Part1.html","title":"Player Weapon Setup Part-1","text":""},{"location":"PlayerWeaponSetup_Part1.html#introduction","title":"Introduction","text":"<p>This video guides you through the steps required to setup the weapon using the wizard.</p>"},{"location":"PlayerWeaponSetup_Part1.html#setup-player-weapon","title":"Setup Player Weapon","text":"<p>Firstly, You need to drag and drop the player weapon from the project to the Player hierarchy and make it to be the child of 'Weapons' gameObject and change the material for both the weapon and player hands.[See the screenshot below]</p> <p></p>"},{"location":"PlayerWeaponSetup_Part1.html#creating-shooting-point-and-muzzle-mesh","title":"Creating Shooting Point and Muzzle Mesh","text":"<p>Expand the player weapon hierarchy and select 'AkFrame' gameObject and create another empty gameObject called 'Shooting Point' and position it to the point where you want the weapon to shoot from and Add a 'Muzzle Mesh Model' and make it to be the child of shooting point. [See the screenshot below]</p> <p></p>"},{"location":"PlayerWeaponSetup_Part1.html#creating-bullet-shell-spawn-point","title":"Creating Bullet Shell Spawn Point","text":"<p>Expand the player weapon hierarchy and select the weapon and create another empty gameObject called 'Bullet Shell Spawn Point' and position it to the point where you want the bullet shells to be ejected. [See the screenshot below]</p> <p></p>"},{"location":"PlayerWeaponSetup_Part1.html#setup-player-weapon-using-wizard","title":"Setup Player Weapon Using Wizard","text":"<p>Go to Tools &lt; Mobile Action Kit &lt; Player &lt; FireArms &lt; Setup Weapon. [See the screenshot below]</p> <p></p> <p>And this will open the Player Weapon Setup where you need to drag and drop required gameObjects and components to the fields provided. Your setup after following the video tutorial above should look like this.</p> <p></p>"},{"location":"PlayerWeaponSetup_Part1.html#setup-player-weapon-ui","title":"Setup Player Weapon UI","text":"<p>Go to Tools &lt; Mobile Action Kit &lt; Player &lt; FireArms &lt; Setup Weapon UI. [See the screenshot below]</p> <p></p> <p>And this will open the Player Weapon UI Setup where you need to drag and drop required gameObjects and components to the respective fields provided. Your setup after following the video tutorial above should look like this.</p> <p></p>"},{"location":"PlayerWeaponSetup_Part1.html#assign-player-weapon-ui-to-the-player-weapon-script","title":"Assign Player Weapon UI to the Player Weapon Script","text":"<p>After setting the UI in Canvas you need to go back to previous Player Weapon Setup Wizard and you will find a field in the bottom 'Is Weapon UI Setup' and you need to check this checkbox and assign the UI from the canvas to there respective fields in this wizard. Your setup after following the video tutorial above should look like this.</p> <p></p>"},{"location":"PlayerWeaponSetup_Part1.html#setting-up-animations-for-weapon","title":"Setting up Animations for Weapon","text":"<p>After the above steps, You need to click on the button called 'Edit The Weapon Animations' located in the Player Weapon Setup Wizard and this will open a new window called Edit The Weapon Animations where from the project you need to drag and drop the animations for the weapon. Your setup after following the video tutorial above should look like this.</p> <p>'NOTE:MAKE SURE TO CLICK APPLY ANIMATIONS OTHERWISE THE ANIMATIONS WON'T BE SAVED'</p> <p></p>"},{"location":"PlayerWeaponSetup_Part1.html#tweaking-weapon-view","title":"Tweaking Weapon View","text":"<p>After the above steps, You need to click on the button called 'Tweak Weapon Positions And Rotations' located in the Player Weapon Setup Wizard and this will open a new window called Weapon View where you need to setup the weapon pivot values for both the Aimed and Hip Fire. Your setup after following the video tutorial above should look like this.</p> <p>'NOTE:MAKE SURE TO CLICK STORE VALUES AND THAN APPLY VALUES.'</p> <p></p>"},{"location":"PlayerWeaponSetup_Part1.html#setup-the-object-pooler","title":"Setup The Object Pooler","text":"<p>Importance of Object Pooler Script - This Script will activate and deactivate all game Objects that reappear multiple times during gameplay.It`s purpose to reduce garbage collection proccess by allocating ram to storage of needed instances of certain game objects.</p> <p>To Spawn Bullet Shells each time the player weapon shoot and the pavement impact effect to the hit point. We need to create an empty gameObject and make it to be the child of 'Required Scripts' and add the component called Object Pooler. Your setup after following the video tutorial above should look like this.</p> <p></p>"},{"location":"PlayerWeaponSetup_Part1.html#setup-the-target-object","title":"Setup The Target Object","text":"<p>To Test the Player Weapon, You can add a Target GameObject Prefab from the Project to the scene like shown in the video above.</p> <p></p>"},{"location":"PlayerWeaponShootingFeatures_Part3.html","title":"Player Weapon Shooting Features Part-3","text":""},{"location":"PlayerWeaponShootingFeatures_Part3.html#introduction","title":"Introduction","text":"<p>This video will help you understand about player weapon script attached to the shooting point of the weapon.</p>"},{"location":"PlayerWeaponShootingFeatures_Part3.html#player-weapon-script","title":"Player Weapon Script","text":"<p>Player Weapon Script is the main script responsible for all kinds of weapons available to player, such as various kinds of firearms, grenades &amp; melee weapons. It defines majority of aspects of weapons overall functionality &amp; communicates with number of auxiliary scripts that are handling additional elements of the player weapons functionality. </p> <p>You will find below some of the fields and their tooltips for the Player Weapon Script.</p> <p></p> Fields Info RaycastShootingRange Shooting range of the weapon if it uses raycast. FullAutoFireRate Affects the Weapon Fire Rate in both Raycast and projectile shooting functionality. TargetDamagePerShot Damage to target on shoot. DefaultImpactEffectName If the bullet hits on other colliders (e.g., road, houses), specifies which prefab to spawn from Object Pooler on that hit point (e.g., BulletHole). MuzzleFlashRotatingObject 'MuzzleFlashRotator' game object needs to be dragged &amp; dropped into this field. MuzzleFlashRotatorMaxNegativeAngle Value of maximal possible rotational angle offset of the MuzzleFlashRotator gameobject in negative Z axis per weapon shot. MuzzleFlashRotatorMaxPositiveAngle Value of maximal possible rotational angle offset of the MuzzleFlashRotator gameobject in positive Z axis per weapon shot. WeaponCrosshair This field is populated with an advanced crosshair UI element. If you want to use a simple crosshair, you can drag &amp; drop it into this field instead. RaycastShootingVisibleLayers Specify what layers raycast shooting will be affected by. Unchecked layers will be ignored. ForceFullAutoFire If checked, weapon will shoot in full automatic mode. IdleToAimedAnimationTransitionDelay Value in seconds during which weapon idle animation clip inside the 'Idle' animator state will continue to be played before switching to the 'InitialPose' animator state. BulletShellName Bullet shell name inside the Object Pooler script. ProjectileName Name in this field should match the name of the respective field inside the Object Pooler script for shooting to function properly. ProjectilesPerShot Number of projectiles per shot if this weapon is using 'ProjectileShooting' (e.g., shotguns). Spread is defined in the 'BulletSpread' field. ShootingOption Select the shooting option: RaycastShootingWithTracers (tracers without damage, for visuals). AddRaycastForce If checked, will apply raycast force to targets with a Rigidbody (AI agents or non-AI game objects with Rigidbody attached), with random force between Min &amp; Max values. MinRaycastForceToAi Minimal base force value multiplied by the values of all the fields below (except the last one related to non-AI targets). MaxRaycastForceToAi Maximal base force value multiplied by the values of all the fields below (except the last one related to non-AI targets). RaycastForce Details for applying raycast force for AI agents (force direction and magnitude). Non-AI game objects are handled by the 'NonAIGameObjectImpactForce' field. WeaponPositionLerpSpeed Linear interpolation speed between weapon idle and weapon reloading positions. WeaponRotationLerpSpeed Linear interpolation speed between weapon idle and weapon reloading rotations. BulletSpread If you want to introduce bullet spread effect for each consecutive shot, set this field to change shooting point's rotation between specified min/max angles."},{"location":"PlayerWeaponSwitching.html","title":"Switching Player Weapons","text":""},{"location":"PlayerWeaponSwitching.html#introduction","title":"Introduction","text":"<p>This video guide you on how to switch between multiple player weapons.</p>"},{"location":"PlayerWeaponSwitching.html#setup-weapon-switching","title":"Setup Weapon Switching","text":"<p>Firstly,you have to go to the Tools &lt; Mobile Action Kit &lt; Player &lt; FireArms &lt; Setup Weapon Switching UI &amp; Scripts. This will going to open up the wizard using which you need to assign the required component to complete the setup.Your setup should look like this [See the image below]</p> <p></p>"},{"location":"PlayerWeaponSwitching.html#switching-player-weapons_1","title":"Switching Player Weapons","text":"<p>This script handles player HUD UI swiping and arrow buttons for switching weapons.</p> <p></p> Fields Info AvailableWeapons Defines how weapons are unlocked and activated: 'ShopDependent' (based on purchased weapons) or 'LevelDependent' (based on level). AutoAimIfSwitchedFromAimedWeapon Automatically aligns the aim when switching from a weapon that was in aim mode. PlayerWeaponsManagerScript Reference to the PlayerWeaponsManager script responsible for managing weapons. ButtonsToDisableDuringWeaponSwitching List of UI buttons that will be disabled during weapon switching to prevent interaction. SwipeArea The swipeable area in the UI Canvas used to detect swipe gestures for weapon switching. SwipeRightButton The button in the UI Canvas used to switch to the next weapon. SwipeLeftButton The button in the UI Canvas used to switch to the previous weapon."},{"location":"PlayerWeaponSwitching.html#player-weapons-manager","title":"Player Weapons Manager","text":"<p>This script serves as the central manager for handling the player's weapon system, including inventory, pickups, and activation. Other scripts can communicate with it to switch weapons, activate the next weapon, and manage slots.</p> <p></p> Fields Info WeaponSlots List of all weapon slots available to the player. SlotName The name of the weapon slot, e.g., Primary, Secondary. Weapons List of weapons assigned to this slot. WeaponIdComponent Reference to the Weapon ID component. Weapon The actual weapon GameObject. WeaponAttachments Weapon attachments activator script to be placed in this field. WeaponPickupData List of available weapon pickups in the game. WeaponName The name of the weapon pickup. WeaponPickupPrefab Prefab of the weapon pickup object. PlayerGrenadeThrowerScripts References to all grenade-throwing scripts attached to the player. MeleeAttackScripts References to all melee attack scripts attached to the player. AvailableWeaponPickups List of available weapon pickups in the game. ActiveWeaponsList Debugging list for tracking active weapons."},{"location":"PlayerWeaponSwitching.html#gameobject-activation-manager","title":"GameObject Activation Manager","text":"<p>This Script Only Activates and Deactivates Objects Added Below On Enable</p> <p></p> Fields Info GameObjectsToDeactivate Array of GameObjects that will be deactivated when this script is enabled. GameObjectsToActivate Array of GameObjects that will be activated when this script is enabled."},{"location":"PlayerWeaponSwitching.html#click-and-switch-weapons","title":"Click And Switch Weapons","text":"<p>Another option for switching weapons is to by create UI buttons in canvas and based on the button click we switch the player weapon.[See the image below]</p> <p></p> <p>Make sure to add the function in the UI button and make sure to write the correct key name to make sure to activate the correct weapon when the button is clicked.[See the image below]</p> <p></p>"},{"location":"Shop.html","title":"\ud83d\udcb0 Shop","text":""},{"location":"Shop.html#in-app-purchase-iap-setup","title":"In-App Purchase (IAP) Setup","text":"<p>In-App Purchase (IAP) allows users to make purchases directly within your app. Here are the steps to set up IAP: HEllo</p> <ol> <li>Create an App in the App Store/Google Play:</li> <li> <p>Create a new app or select an existing one in the respective app store developer console.</p> </li> <li> <p>Configure IAP in Your App:</p> </li> <li>Implement the necessary code in your app to handle IAP transactions.</li> <li> <p>Ensure that your app is properly configured to communicate with the app store's IAP service.</p> </li> <li> <p>Set up Products:</p> </li> <li>Define the products or items that users can purchase through IAP.</li> <li> <p>Specify the pricing and details for each product.</p> </li> <li> <p>Test IAP in a Sandbox Environment:</p> </li> <li>Use the app store's testing/sandbox environment to simulate IAP transactions.</li> <li> <p>Verify that the purchasing process works as expected.</p> </li> <li> <p>Submit for Review:</p> </li> <li>If required, submit your app and IAP configuration for review in the app store.</li> </ol>"},{"location":"Shop.html#ads-setup","title":"Ads Setup","text":"<p>Monetize your app by integrating advertisements. Here's how you can set up ads:</p> <ol> <li>Choose an Ad Network:</li> <li> <p>Select an ad network that suits your app and target audience. Common ad networks include AdMob, Facebook Audience Network, and more.</p> </li> <li> <p>Create an Account:</p> </li> <li> <p>Sign up for an account with the chosen ad network.</p> </li> <li> <p>Create Ad Units:</p> </li> <li> <p>Generate ad units (banner ads, interstitials, rewarded ads) within your ad network account.</p> </li> <li> <p>Integrate Ad SDK:</p> </li> <li> <p>Integrate the ad network's SDK into your app by adding the necessary code.</p> </li> <li> <p>Configure Ad Placement:</p> </li> <li> <p>Place ads strategically within your app. Consider user experience and engagement.</p> </li> <li> <p>Test Ads:</p> </li> <li> <p>Test the ad integration in a development environment to ensure proper functionality.</p> </li> <li> <p>Monitor and Optimize:</p> </li> <li> <p>Keep track of ad performance and optimize placements and settings for better revenue.</p> </li> <li> <p>Comply with Policies:</p> </li> <li>Adhere to the ad network's policies and guidelines to maintain a healthy relationship.</li> </ol> <p>Remember to refer to the documentation of the specific app store and ad network you are working with for detailed and up-to-date instructions.</p>"},{"location":"SimpleSpawner.html","title":"Simple Spawner","text":""},{"location":"SimpleSpawner.html#introduction","title":"Introduction","text":"<p>In this tutorial you will learn how to setup simple spawner and spawn AI agents and any other gameObjects within a spawn point and collider volume. </p>"},{"location":"SimpleSpawner.html#simple-spawner_1","title":"Simple Spawner","text":"Fields Info ShowGizmosInTheScene Draw the spawning area gizmo in the Unity scene view. GizmoColor Set the color of the spawning area gizmos in the Unity scene view. TriggeringGameObject Drag &amp; drop the game object (usually player) from the hierarchy into this field to trigger spawn events. SpawnOnlyOnTriggerEnter If checked, then the Spawnables will be spawned only if the player enters the trigger collider attached to the 'GeneralSpawner' game object. SpawnableType Choose one of the types of the Spawnable objects. Spawnables Assign game entities to be spawned by this spawner. MinSpawnDelay Minimum time between spawns. MaxSpawnDelay Maximum time between spawns. SpawnWithinVolume If checked, then AI agents or game objects will spawn within the volume of the trigger collider attached to the child game object of this 'GeneralSpawner' named 'SpawnVolume.' You will have to create it, add a trigger collider to it, and set up its dimensions to ensure that agents or game objects spawn only within certain rooms or other enclosed spaces. SpawnVolume Drag and drop 'SpawnVolume' child game object with the trigger collider attached to it into this field. SpawnPoint Drag and drop child game object named 'SpawnPoint' into this field. AmountOfSpawnables Number of agents this spawner script can spawn. MinNonAiSpawnablesOffset Minimal offset of non-AI 'Spawnables' from the spawn point along x, y, and z axis to space them out from each other. MaxNonAiSpawnablesOffset Maximal offset of non-AI 'Spawnables' from the spawn point along x, y, and z axis to space them out from each other. AiSpawnPointRadius Radius within which AI agents will be spawned. AiUpdaterComponent Drag and drop AI Updater game object from the hierarchy with 'AiUpdater' script attached to it into this field in case Spawnables of this spawner will be AI agents."},{"location":"Support.html","title":"\ud83d\udcde Contact","text":"<p>\ud83d\udcac Discord Support For faster assistance, join our Discord channel.  </p> <p>\ud83d\udce7 Email Support For any questions about our assets or inquiries before purchase, contact us by mail.</p>"},{"location":"UniqueHitImpactEffectSpawner.html","title":"Unique Hit Impact Effects","text":""},{"location":"UniqueHitImpactEffectSpawner.html#introduction","title":"Introduction","text":"<p>This video guides you on how to setup different hit impact effect on different surfaces like - glass window,tree leaves,wooden crate when the bullet or player weapon raycast hit these surfaces.</p>"},{"location":"UniqueHitImpactEffectSpawner.html#setup-impact-effect-spawner","title":"Setup Impact Effect Spawner","text":"<p>You need to follow the steps below to setup the different hit impact effect on different surfaces. We will here first going to take an example of a glass window.</p> <p>Step 1: Create an empty gameObject</p> <p>Step 2: Add any primitive collider i.e Box Colldier</p> <p>Step 3: Add the component called 'ImpactEffectSpawner'</p> <p>Step 4: Add the component called 'AudioSource'</p> <p>Step 5: Select the particles prefab you want to spawn when hitting the primitive collider (that you setup in Step 2) and add the script called 'Impact Effect' and setup it like shown in the image below.</p> <p></p> <p>Step 6: Setup the impact effect spawner script like shown in the image below by making your to assign the components that you just created following the above steps.</p> <p></p>"},{"location":"UniqueHitImpactEffectSpawner.html#impact-effect-spawner-script","title":"Impact Effect Spawner Script","text":"<p>Impact Effect Spawner Script allow player weapons script to spawn a hit impact effect at the point of raycast hit point and plays a randomized impact audio clips assigned below. The hit effect prefab is instantiated at the impact position and aligned to the surface normal. A random audio clip is selected and played using an AudioSource. The pitch and volume of the sound are randomized within defined ranges.</p> Fields Info HitEffectPrefab Prefab of the visual hit effect to spawn at the point of impact. AudioSourceComponent Audio source that will play the impact sound. AudioClipsToPlay Array of audio clips to choose from when playing the impact sound. MinPitchSound Minimum pitch variation for the impact sound. MaxPitchSound Maximum pitch variation for the impact sound. MinVolume Minimum volume variation for the impact sound. MaxVolume Maximum volume variation for the impact sound."},{"location":"UniqueHitImpactEffectSpawner.html#impact-effect","title":"Impact Effect","text":"Fields Info ShouldDestroy Specify whether the impact effect GameObject should be destroyed. TimeToDeactivate Time in seconds after which the impact effect will be deactivated or destroyed. AlertingSoundScript Reference to the AlertingSoundActivator script to handle sound alerts."},{"location":"UniqueHitImpactEffectSpawner.html#conclusion","title":"Conclusion","text":"<p>Your can even follow the same setup to spawn impact effect on Tree leaves Or Wooden crate as well.[See the image below]</p> <p></p> <p></p>"},{"location":"WaveSpawner.html","title":"Wave Spawner","text":""},{"location":"WaveSpawner.html#introduction","title":"Introduction","text":"<p>In this tutorial you will learn how to setup Wave spawner and spawn AI agents within a spawn point and collider volume. We will make sure to spawn agents on the NavMesh Surface and will spawn certain number of AI agents in each wave.</p>"},{"location":"WaveSpawner.html#wave-spawner_1","title":"Wave Spawner","text":"Fields Info ActivationType Choose one of the three types of wave spawner activation.                 1. 'StartWaveBasedOnSingleTrigger' (StartOnTriggerEnter): Spawner begins functioning once the player enters the collider trigger attached to this gameObject with no consecutive triggering required to spawn following waves.                 2. 'StartWaveBasedOnMultipleTrigger' (EnterEachWaveTrigger): Initiates waves based on specific triggers assigned to each wave. For instance, wave 1 starts when the player enters the trigger collider for wave 1, wave 2 when player enters trigger for wave 2, and the same applies to all subsequent waves.                 3. 'ActivateAtGameStart' (BeginOnPlay): Starts functioning at the beginning of the gameplay without the need for trigger colliders.              DrawSpawnerGizmos Draw the spawning areas (and their activation triggers) in Unity scene view to visualize where the Ai agents will spawn in the game. GizmosColor Set the color of the spawning area gizmo in scene view. Player Drag and drop the player gameObject from the hierarchy into this field. The player gameObject will then enter this trigger area to start the spawning behavior. ColliderComponent Automatically assigns the Collider component to this field when the selected Wave Type option is 'StartWaveBasedOnSingleTrigger'. NextWaveAfterPreviousWaveDestroyed If enabled, the next wave starts only when all the agents from the previous wave are dead. MinCasualtiesCheckTime Minimum time between counting casualties. MaxCasualtiesCheckTime Maximum time between counting casualties. maxSpawnAttemptsPerObstacle HideInInspector. EnableWavesCounterUI If checked, wave counter text will be displayed in the form of '2D UI' each time a new wave starts. WaveName Write the word to display before showing the wave number, for example: Round, Wave, etc. WaveText Drag and drop the Text UI from the 2D canvas hierarchy into this field. TimeToDeactiveWaveText Specify for how long the wave text will stay activated. DisplayCountDownTimer If checked, a countdown timer will be displayed before starting the next wave. CountDownTimerText Drag and drop the Text UI from the 2D canvas hierarchy into this field to display the countdown. AiUpdaterScript Drag and drop the Ai Updater game object from the hierarchy with the 'SpawnedAgentsTargetScriptUpdater' (AiUpdater) script attached to it into this field. Waves Set the total number of waves for this spawner. Each element in this list contains a set of fields and checkboxes for wave customization. TriggerWaves Create one or more waves that will get activated when the player hits their trigger colliders. These trigger colliders should be attached to 'WaveActivator' game objects. Waves are activated by their dedicated activators. Each wave requires such an activator, which can still be shared between different waves. To spawn the next wave, the player has to enter the trigger assigned to that wave, which stays deactivated until previous waves are destroyed."},{"location":"WaveSpawner.html#wave-activator","title":"Wave Activator","text":"Fields Info TriggeringGameObject Drag&amp;drop the gameobject (usually player) from the hierarchy into this field to trigger spawn event. WaveSpawnerScript Drag and drop the 'Wave Spawner' script attached with the parent of this gameObject into this field. WaveStartingDelay Specify the delay time of this wave. DisplayCountDownTimer If checked, the countdown timer will be displayed before starting the next wave. CountDownTimerText Drag and drop the Text UI from the 2D canvas hierarchy into this field to display the countdown. DisplayWaveCounterText If checked, wave counter text will be displayed in the form of '2D UI' that will show the number of the next wave. TextBeforeWaveNumber Write the message to display before showing the wave number, for example: Round or Wave. WaveText Drag and drop the Text UI from the 2D canvas hierarchy into this field. WaveCounterTextDeactivationTime Delay before deactivation of the wave-related text."},{"location":"ZombieBodyHits.html","title":"Zombie Body Hits","text":""},{"location":"ZombieBodyHits.html#introduction","title":"Introduction","text":"<p>This video will help you understand how to enable and setup body hit animation for the zombie.</p>"},{"location":"ZombieBodyHits.html#enable-impact-animations","title":"Enable Impact Animations","text":"<p>First check the checkbox 'Use Impact Animations' located in the combat state behaviour.[See the image below] </p> <p></p> <p>Enabling this checkbox will enable the 'HumanoidBodyHits' script below.</p> <p> </p> Fields Info Animator Component Drag and drop into this field 'Animator' component located above in the inspector. Humanoid Ai Health Drag and drop into this field 'Humanoid Ai Health' component located above in the inspector. Min Time To Wait Until Next Animation Minimum time to wait until the next animation. Max Time To Wait Until Next Animation Maximum time to wait until the next animation. Play Combined Body Hit Animations Enable to play combined upper and lower body hit animations. Lower Body Hit Configuration for lower body hit animations. Lower Body Animations To Play Specify number of animations to add for this humanoid AI agent. Lower Body Animation Names Put the number of animation clips for AI agent to play when being hit by a bullet. Copy and paste names of those clips into the fields.To introduce visual variety and to avoid repetitive animations this list can have any amount of animation clips.Each time Ai agent is hit by a bullet random animation from this list will be played.  Lower Body Colliders Drag and drop all the bones from the lower body into this list. As long as all intended bones are in this list, the script will register all the hits to those colliders on those bones and will play respective animation clips. Upper Body Hit Configuration for upper body hit animations. Upper Body Animations To Play Specify number of animations to add for this humanoid AI agent. Upper Body Animation Names Put the number of animation clips for AI agent to play when being hit by a bullet. Copy and paste names of those clips into the fields.To introduce visual variety and to avoid repetitive animations this list can have any amount of animation clips.Each time Ai agent is hit by a bullet random animation from this list will be played. Upper Body Colliders Drag and drop all the bones from the upper body into this list. As long as all intended bones are in this list, the script will register all the hits to those colliders on those bones and will play respective animation clips."},{"location":"ZombieFootstepSounds.html","title":"Zombie Footstep Sounds","text":""},{"location":"ZombieFootstepSounds.html#introduction","title":"Introduction","text":"<p>In this tutorial you will how to setup footstep sounds for the Zombie.</p>"},{"location":"ZombieFootstepSounds.html#humanoid-ai-audio-player","title":"Humanoid Ai Audio Player","text":"<p>The script is responsible for playback of different sounds and phrases in various situations. When Zombie is wounded or dying or reloading weapons or engaging his enemy etc.</p> <p></p> <p>Drag and drop the 'FootStep' AudioSource Component from the hierarchy into this field located in the hierarchy of this Zombie.[See the image below] </p> <p></p>"},{"location":"ZombieFootstepSounds.html#setup-footstep-event-in-the-animation-window","title":"Setup FootStep event in the Animation Window","text":"<p>To play the footstep audio each time the Zombie foot touches the ground. First Open the Animation window by going to 'Window &lt; Animation &lt; Animation'. After this Check each frame where the Zombie foot is touching the ground.[See the image below]</p> <p></p> <p>At each frame where the foot is touching the ground you need to add the event and choose the function 'FootStep Sound'. Do the same for all the other animation clips where the Zombie is moving for example: Sprinting ,Running, Walking etc..</p>"},{"location":"ZombieFootstepSounds.html#setup-footstep-sounds-based-on-surfaces","title":"Setup FootStep Sounds Based On Surfaces","text":"<p>There are two ways you can setup the footstep sounds based on the surface using the trigger collider or using the Raycast.</p>"},{"location":"ZombieFootstepSounds.html#humanoid-ai-surfaces-trigger-collider","title":"Humanoid AI Surfaces (Trigger Collider)","text":"<p>To Setup this up create an empty gameObject and add a primitive collider to it like: Box,Sphere collider etc.. and adjust it in the scene where you want the Zombie footstep sound to get changed like in sand or grass area. Make sure to check 'Is Trigger' Checkbox. After this add a script to it called 'Humanoid AI Surfaces'.[See the image below]</p> <p></p>"},{"location":"ZombieFootstepSounds.html#humanoid-ai-surfaces-script","title":"Humanoid AI Surfaces Script","text":"<p>This Script replaces Humanoid AI foot step Sounds within the trigger that should be placed in a certain Surface Area. When Zombie will enter such trigger then its default footstep sounds will be replaced by the particular sound in the field named 'Foot Step Audio' of this script. For Example : Metal Surface , Grass Surface etc... </p> Fields Info FootStep Audio Drag and drop the desired audio clip from the project into this field to playback this distinct footstep audio clip for the duration of Zombie inside this trigger (e.g., for grass, metal, wood surfaces etc)."},{"location":"ZombieFootstepSounds.html#humanoid_ai-surface-detector-script","title":"Humanoid_AI Surface Detector Script","text":"<p>First create an empty gameObject to be the child of the Zombie and rename it to be 'Surface Detector' and in this gameObject Add component called 'Humanoid_AI Surface Detector'. Select any 3D Mesh gameObject like grass or sand and change its tag to 'Grass' or 'Sand'.After this in the script you need to write the name of the tag and provide an audio clip to it. </p> <p>The HumanoidAI_SurfaceDetector script offers a sophisticated solution for enhancing AI behavior through dynamic footstep sound adjustments based on terrain/Mesh types. By employing tags and raycasting, this approach continuously checks ahead of the Zombie at intervals set by Min/Max timers. It provides detailed environmental responsiveness, allowing AI characters to interact realistically with various surfaces like grass, concrete, or wood. However, due to its continuous raycasting nature, developers should consider performance implications, particularly on mobile platforms where it may slightly impact FPS. For smaller environments, alternative script like 'HumanoidAISurfaces' which do collider-based detection may be more performance-efficient, ensuring optimal gameplay experience across different device capabilities.</p> <p></p> Fields Info Raycast Length Length of the raycast that detects surfaces in front of the AI character. Adjust this value based on how far ahead you want the AI to detect surfaces. Min Time To Raycast Minimum time interval between consecutive raycasts. Controls how often the script performs raycast checks. Max Time To Raycast Maximum time interval between consecutive raycasts. Controls how often the script performs raycast checks. Ignored Layers Layers to ignore during raycasting. Objects on these layers will not trigger surface detections. Useful for ignoring irrelevant objects like UI elements or other Zombie. Debug Raycast Toggle to enable or disable visual debugging of raycasts in the Scene view. When enabled (true), the raycast is visualized with raycastColor, during development and testing. Raycast Color Color used to visualize the raycast in the Scene view. Helps developers see where the raycast is directed during debugging. Custom FootStep Sounds Class Class for custom footstep sounds. Tag The tag representing a specific surface type (e.g., 'Grass', 'Concrete'). Assign tags to game objects in Unity to differentiate surfaces. FootStep Audio Clip Audio clip to play when the AI walks on surfaces with the corresponding tag. For example, assign a rustling sound for 'Grass' or a hard impact sound for 'Concrete'. Custom FootStep Sounds List of custom footstep sounds for different surface tags. Populate this list with tags and corresponding audio clips to simulate realistic footstep behavior based on terrain type. <p>You can choose any one of the option provided above based on your requirements.</p>"},{"location":"ZombieHealth.html","title":"Zombie Health","text":""},{"location":"ZombieHealth.html#introduction","title":"Introduction","text":"<p>This video will help you understand about 'Health Script' of the Zombie.</p>"},{"location":"ZombieHealth.html#health-script","title":"Health Script","text":"Fields Info Health Health of the Ai agent which get decreased when the Ai agent takes damage. Weak Point Damage Multiplier Multiplies the damage of the bullet or grenade with the value in this field. Enable Health Bar Enable this checkbox to spawn the 'Healthbar UI' on top of the Ai agent. Health Bar Prefab Drag and drop 'Healthbar UI' prefab from the project into this field. Stand Health Bar UI Offset Adjust the position of the spawned 'HealthBar UI' during the time Ai agent is standing. Crouch Health Bar UI Offset Adjust the position of the spawned 'HealthBar UI' during the time Ai agent is crouching. Enable Ragdoll If enabled for Ai agent than it will use the ragdoll physics when it dies. If disabled Ai agent will use random animation clips. Animator Component Drag and drop the animator component attached with this Ai agent from the hierarchy into this field. Stand Dying Animation State Names You can put one or several animation state names into the fields below for the Ai to playback when it dies during stand shooting.Names you put into the fields should precisely match the names of the animation states inside animator controller. Crouch Dying Animation State Names You can put one or several animation state names into the fields below for the Ai to playback when it dies during crouch shooting.Names you put into the fields should precisely match the names of the animation states inside animator controller. Head Bone Collider Drag and drop the collider attached with the 'HeadBone' which is the child of this Ai agent pelvis bone from the hierarchy into this field. Stand HeadShot Dying Animation State Names You can put one or several animation state names into the fields below for the Ai to playback when it dies during stand shooting.Names you put into the fields should precisely match the names of the animation states inside animator controller. Crouch HeadShot Dying Animation State Names You can put one or several animation state names into the fields below for the Ai to playback when it dies during crouch shooting.Names you put into the fields should precisely match the names of the animation states inside animator controller. Keep DeadBody If Enabled other components will be destroy and the mesh will be unparent. DeadBody Mesh In case developers will want to keep dead body of killed Ai agents for sometime after agents die they should drag skinned mesh renderer from Ai hierarchy into this field.When the Ai agent will die his deadbody will appear in the exact pose of the last frame of the ragdoll or dying animation.This DeadBodyMesh is also required to store the coordinates for the investigation after the emergency state has been expired. DeadBody Mesh Items To Attach Add all the additional Items like googles,Mask to attach with the Deadbody Mesh during the time it spawn. Pelvis Bone Transform Drag the Pelvis Bone of the Ai skinned mesh into this field.The pelvic bone of the skinned mesh that you imported does not have to be named - pelvis.In the skinned meshes provided for the kit pelvic bone has a name - hips. TIME_TO_DESTROY_OTHER_COMPONENTS Will destroy all other components (scripts and skeleton) except Humanoid Ai Health script.This field is responsible for creating dead body mesh that will stay in the level for specified amount of time. DeadBody Existence Time The time deadbody will stay visible in the game. TIME_TO_UNPARENT_BODYMESH Unparenting the resulted non skeletal body mesh is necessary to achieve this dead body effect.This delay value should be tweaked so that there would be enough time to inherit skeletal position of the last frame that skeleton existed. Spawn Pickup Items After Death If enabled than the Ai agent will spawn pickup items after death. Pickup Items Drag and drop one or more items from the project window into this field to spawn when the Ai agent deadbody existence time get expired. Reset Pickup Rotation If checked than spawned pickup items will not inherit Ai root object rotation value. Dying Sound Radius This radius is enabled every time Ai agent dies regardless of the reason of his death.It will cause emergency alert state for any Ai agent that will be within dying sound radius. Sound Investigating Approach Style Reset Drag and drop 'SoundInvestigatingApproachStyleReset' script located in the hierarchy of this Agent."},{"location":"ZombieHumanoidAiGetStarted.html","title":"Getting Started","text":""},{"location":"ZombieHumanoidAiGetStarted.html#getting-started-with-humanoid-ai-zombie","title":"Getting Started With Humanoid AI Zombie","text":""},{"location":"ZombieHumanoidAiGetStarted.html#introduction","title":"Introduction","text":"<p>This video guides you through the essential steps for getting started with the humanoid AI zombie in Unity. We'll be adding the 3D humanoid zombie model using Unity's editor windows, integrating necessary components and game objects. Furthermore, we'll create a ragdoll for the zombie and incorporate vital animations tailored to the zombie movements, while fine-tuning animation import settings through the editor interface and will also make sure to optimise the animations.</p>"},{"location":"ZombieHumanoidAiGetStarted.html#setup-zombie","title":"Setup Zombie","text":"<p>Firstly,you have to go to the Mobile Action Kit &lt; Humanoid Ai &lt; Setup Humaoid Ai agent. This will open up a window where you need to setup the humanoid Ai agent.</p> <p></p> Fields Info Select Humanoid Ai Type  Choose either Soldier or Zombie. Reference Ai Prefab Drag and drop the Humanoid Ai Prefab from the project into this field. Humanoid Model Drag and drop the Humanoid Model from the hierarchy into this field. Make sure dragged humanoid model          is unpacked completely. Humanoid Model Avatar Drag and drop the Humanoid Model Avatar from the project into this field. Spine Bone To Rotate Drag and drop the Spine bone to rotate when this Ai agent will aim and shoot its target i.e spine bone. My Body Part To Target Drag and drop my body part to target so that other Ai entites in the game will shoot at this Ai agent i.e          HeadBone. Weapon Model Drag and drop weapon model from the project into this field. Weapon Socket Drag and drop the gameObject from this Ai agent hierarchy into this field where the weapon Model will be          instantiated when 'Configure Humanoid Ai agent' button will be clicked."},{"location":"ZombieHumanoidAiGetStarted.html#create-ragdoll","title":"Create Ragdoll","text":"<p>After configuring the humanoid Ai agent you need to click on create ragdoll where you need to drag and drop the bones at there  appropriate fields and create the ragdoll for the Ai agent.</p> <p></p>"},{"location":"ZombieHumanoidAiGetStarted.html#download-and-customise-humanoid-animations","title":"Download And Customise Humanoid Animations","text":"<p>Now to add animations to the humanoid Ai agent first click on the 'Customise Humanoid Animations' this will open up a window where you have to drag and drop the target object on which the new Animations will be applied. To create the new animations first duplicate the animator controller by selecting the Humanoid Ai agent in the hierarchy and click on the animator controller and locate it in the project and duplicate it.[SEE THE IMAGE BELOW]</p> <p> </p> <p>Drag and drop the new duplicated Animator controller from the project into this field.And than drag and drop the Humanoid Ai agent from the hierarchy to the field named as 'Humanoid Ai Animator Controller'.</p> <p>Select the character type to 'Zombie'</p> <p>After this download all the animations from Mixamo using the download button provided after each field and follow the instructions mentioned in the tutorial above.</p> <p> </p> <p>Great \ud83c\udf89 So we successfully setup the Humanoid Ai agent in the scene.</p>"},{"location":"ZombiePursue.html","title":"Zombie Pursue","text":""},{"location":"ZombiePursue.html#introduction","title":"Introduction","text":"<p>This video will guide you on how to achieve zombie pursue behaviour in case of enemy lost.There are 2 types of pursue behaviour - Stationed and Approaching.</p>"},{"location":"ZombiePursue.html#pursue-type-stationed","title":"Pursue Type : Stationed","text":"<p>If the selected option is 'Enable Stationed Enemy Pursue' than this zombie will be stationed while staring at the last enemy known position for some seconds specified in the Min/Max Stare time fields.</p> <p> </p>"},{"location":"ZombiePursue.html#pursue-type-approaching","title":"Pursue Type : Approaching","text":"<p>If the selected option is 'Enable Approaching Enemy Pursue' than this zombie will be approaching at the last enemy known position. After the Enemy Lost, 'Zombie'  will first stare at the enemy last known position and then after the stare time is completed agent will start approaching towards the last enemy known position.</p> <p></p> <p>Let's talk about three scenarios that can be possible:</p>"},{"location":"ZombiePursue.html#scenario-1-navmeshpath-complete","title":"Scenario 1 : NavMeshPath Complete","text":"<p>When the NavMeshPath to the enemy is completed the 'Zombie' will be sprinting,running and than walking towards the enemy last know coordinate based on the distance.</p>"},{"location":"ZombiePursue.html#scenario-2-navmeshpath-partial","title":"Scenario 2 : NavMeshPath Partial","text":"<p>When the NavMeshPath to the enemy is partial(Where the target is on the roof) the 'Zombie' agent will create the closest point on the NavMesh from the current target position which is reachable and will be sprinting,running and than walking towards it based on the distance.</p>"},{"location":"ZombiePursue.html#scenario-3-navmeshpath-invalid","title":"Scenario 3 : NavMeshPath Invalid","text":"<p>When the NavMeshPath to the enemy is invalid(Where both the target and the agent is on the opposite sides of buildings) the 'Zombie' agent will make sure to only stare at the enemy current position until the combat state restarted.</p> <p></p> Fields Info Enemy Pursue Error Radius This slider sets the offset radius from last seen enemy coordinate. Pursuing Ai will set random coordinate to go to within that radius. Aimed Scaning At Enemy Last Known Position This subsection contains the values of aimed turns(scanning) for this agent after arriving at the LastKnownEnemyPosition coordinate. It will playback idle turning clips assigned to respective turning directions for lower body layer inside Animator while playing upper body aiming animation clip for all of those turns. Turn Direction Choose one of 4 turning directions from this list. AI agent will play corresponding animation clip from the animation tree that is assigned to this direction. Min Aimed Turn Animation Speed Minimal playback speed of the the turn animation clip. Max Aimed Turn Animation Speed Maximal playback speed of the the turn animation clip. Min Time Between Aimed Turns Minimum time to keep aimed look in the direction that resulted after playing previous aimed animation turn clip, before starting playback of the new turn animation clip. Max Time Between Aimed Turns Maximum time to keep aimed look in the direction that resulted after playing previous aimed animation turn, before starting playback of the new one. Min Scan Completion Time Minimum time to keep aimed scanning before switching to non combat state. Max Scan Completion Time Maximum time to keep aimed scanning before switching to non combat state. Play Animations Sequentially If checked scan animations will playback sequentially.In case unchecked the scan animations will playback randomly. Aimed Turning Animations Create up to 4 turning directions for Ai agent to perform during aimed scanning. Min Near Stopping Distance Minimum distance to stop near the Pursue point and to consider it as reached. Max Near Stopping Distance Maximum distance to stop near the Pursue point and to consider it as reached. Min Sprint Distance Minimal remaining distance to pursue point for the switch from walking or running to sprinting towards it. Max Sprint Distance Maximum distance for sprinting towards coordinate. Min Run Distance Minimal remaining distance to pursue point for the switch from walking or sprinting to running towards it. Max Run Distance Maximal remaining distance to pursue point for the switch from walking or sprinting to running towards it. Min Walk Distance Minimal remaining distance to pursue point for the switch from running or sprinting to walking towards it. Max Walk Distance Maximal remaining distance to pursue point for the switch from running or sprinting to walking towards it. Min Stare Time At Enemy Last Known Position Minimum staring time of any non Stationed AI agent at the last known position of the enemy before beginning pursue. Max Stare Time At Enemy Last Known Position Maximum staring time of any non Stationed AI agent at the last known position of the enemy before beginning pursue. Debug Pursue Distances This sub section contains values which show the distance to the last known position of the enemy. Debug Distance To Coordinate Debug the distance to coordinate(Enemy Last Known Position) to reach Debug Sprint Distance Debug the sprint distance to coordinate(Enemy Last Known Position) to reach Debug Run Distance Debug the run distance to coordinate(Enemy Last Known Position) to reach Debug Walk Distance Debug the walk distance to coordinate(Enemy Last Known Position) to reach"},{"location":"ZombieSoundAlerts.html","title":"Sound Alert Behaviour","text":""},{"location":"ZombieSoundAlerts.html#introduction","title":"Introduction","text":"<p>In this tutorial you will learn about Zombie reaction towards alert sounds. Basically alert sounds are fire sound, Grenade explosion etc.. </p>"},{"location":"ZombieSoundAlerts.html#alerting-sound-activator","title":"Alerting Sound Activator","text":"<p>This Script activates the alerting sound and specifies if this sound will travel with its parent game object.[See the image below]</p> <p></p> Fields Info AlertingSoundScript Drag and drop Sound Source (Alerting Sound) child game object of this Sound Activator into this field. KeepSoundAsChild If checked, 'AlertingSound' gameObject will stay with its parent 'SoundActivator' gameobject, thus will be able to move together with it. This will result in a dynamic trigger for something like a drone, rocket, or car creating fly-by or drive-by kind of sound that would affect all AI agents touched by the moving sound trigger. In case unchecked, the Sound gameObject will get unparented and will not follow the root gameObject. For example, weapon shot or explosion sound. MinInitialDelayBeforeActivation Minimum Delay before activating the 'AlertingSound' gameObject. MaxInitialDelayBeforeActivation Maximum Delay before activating the 'AlertingSound' gameObject."},{"location":"ZombieSoundAlerts.html#alerting-sound","title":"Alerting Sound","text":"<p>This component alerts Zombie as well as other AI types (drones etc.) within its collider to react to it. This reaction can be performed in a few ways.And this script can alter some of the parameters of this reaction behaviour.</p> <p></p> Fields Info AlertingSoundReactions Choose one of the 2 behavioural responses of Zombie affected by this sound alert. 'GoNearSoundCoordinates' to go towards the coordinate of this sound, or choose 'ForceEmergencyState' for Zombie to go into emergency state. TeamAffectedBySound Choose the team which will be affected by this sound. TeamName Type the name of the team to be affected by this sound. SoundInvestigationError This field represents the sound location mistake the Zombie will make. The greater the number, the further away the resulted investigation coordinate will get from the initial coordinate of the alerting sound. TimeToDeactivate Specify the time to deactivate this alerting sound game object. OverriteOtherAiApproach If checked, it will override the approach style of sound investigating Zombie. If only one of those options is checked, then it will force itself on the way Zombie will approach the sound and it will discard all the other approach styles. If two of those options are checked, then they will discard unchecked approach styles altogether. Quick Note - If all of checkboxes are checked, it will have the same effect as if none of them were checked, i.e., it will not take any effect over initial approach settings. AllowSprinting Allows only selected approach styles. If all or none of these options are selected, then default approach values will not be overridden. AllowRunning Allows only selected approach styles. If all or none of these options are selected, then default approach values will not be overridden. AllowWalking Allows only selected approach styles. If all or none of these options are selected, then default approach values will not be overridden."},{"location":"ZombieSoundAlerts.html#ai-hearing","title":"AI Hearing","text":"<p>This paragraph contains fields related to Zombie reactions to alerting sounds.</p> <p></p> Fields Info SoundAlertProbability This slider sets the probability of this AI agent to react to sound alerts. MoveTowardsSoundCoordinate If checked, then Ai agent will move towards the alerting coordinate. Otherwise, he will look in the direction of that sound for a specified amount of time. RecieveFriendlySoundCoordinate If checked, then AI agent will join his friendly in alerting sound investigation if that friendly affects this agent with his sound alert radius. That secondary sound alert radius communicates the sound alert to all agents that got within this radius (even in cases when those agents are having zero probability to move out towards initial alerting sound that they heard themselves). ShareSoundCoordinatesComponent Reference to the component responsible for sharing sound coordinates. EnableSprintingTowardsSoundCoordinate Enable/disable sprinting towards sound coordinates. MinSprintDistance Minimal remaining distance to initial sound alert coordinate for the switch from walking or running to sprinting towards it. MaxSprintDistance Maximal remaining distance to initial sound alert coordinate for the switch from walking or running to sprinting towards it. MinRunDistance Minimal remaining distance to initial sound alert coordinate for the switch from walking or sprinting to running towards it. MaxRunDistance Maximal remaining distance to initial sound alert coordinate for the switch from walking or sprinting to running towards it. MinWalkDistance Minimal remaining distance to initial sound alert coordinate for the switch from running or sprinting to walking towards it. MaxWalkDistance Maximal remaining distance to initial sound alert coordinate for the switch from running or sprinting to walking towards it. MinNearStoppingDistance Minimum remaining distance to stop near the initial sound alert coordinate and to consider it as reached. MaxNearStoppingDistance Maximum remaining distance to stop near the initial sound alert coordinate and to consider it as reached. MinTimeAtSoundAlertPoint Set the minimum time the AI agent waits at the initial sound alert coordinate before returning to idle state. MaxTimeAtSoundAlertPoint Set the maximum time the AI agent waits at the initial sound alert coordinate before returning to idle state. MinTimeToLookAtSoundAlertPoint Set the minimum time the Stationary AI agent or agent with zero probability of moving towards initial sound alert coordinate, will look in the direction of the initial sound alert coordinate before returning to idle state. MaxTimeToLookAtSoundAlertPoint Set the maximum time the Stationary AI agent or agent with zero probability of moving towards initial sound alert coordinate, will look in the direction of the initial sound alert coordinate before returning to idle state."},{"location":"ZombieVoices.html","title":"Zombie Voices","text":""},{"location":"ZombieVoices.html#introduction","title":"Introduction","text":"<p>In this tutorial you will how to setup Recurring and Non Recurring Sounds for the Zombie.</p>"},{"location":"ZombieVoices.html#humanoid-ai-audio-player","title":"Humanoid Ai Audio Player","text":"<p>The script is responsible for playback of different sounds and phrases in various situations. When Zombie is wounded or dying or reloading weapons or engaging his enemy etc.</p> <p></p> Fields Info AudioSourceComponent Drag and drop audio source component which is the child of this Zombie from the hierarchy into this field. DyingAudioClips Drag and drop one or more dying sound clips from the project into this field. FireSoundAudioSourceComponent Drag and drop audio source component which is the child of this Zombie from the hierarchy into this field. ReloadSoundAudioSourceComponent Drag and drop audio source component which is the child of this Zombie from the hierarchy into this field. WeaponShotAudioClip Drag and drop 'Fire sound clip' from the project window into this field. WeaponReloadAudioClip Drag and drop the Reload Sound clip from the project window into this field. FootStepsAudioSourceComponent Drag and drop audio source component which is the child of this Zombie from the hierarchy into this field. FootStepAudioClip Drag and drop 'Footstep sound clip' from the project window into this field. AudioSourceComponent (Replayable Voices) Drag and drop the audio source component which is the child of this Zombie from the hierarchy into this field. DefaultBehaviourAudioClips Drag and drop default behavior audio clips from the project window into this field. EngagingTheEnemyAudioClips Drag and drop engaging the enemy audio clips from the project window into this field. FollowerAudioClips Drag and drop follower audio clips from the project window into this field. LeaderAudioClips Drag and drop leader audio clips from the project window into this field. MinTimeBetweenRecurringAudioClips Minimum time interval between recurring audio clips. Example: '1.0' seconds. MaxTimeBetweenRecurringAudioClips Maximum time interval between recurring audio clips. Example: '2.0' seconds. MinRecurringAudioClipsDelayAfterInterruption Minimum delay after interruption before recurring audio clips can play again. Example: '2.0' seconds. MaxRecurringAudioClipsDelayAfterInterruption Maximum delay after interruption before recurring audio clips can play again. Example: '4.0' seconds. AudioSourceComponent (OneTime Voices) Drag and drop the audio source component which is the child of this Zombie from the hierarchy into this field. OnceReloadingAudioClips Drag and drop reloading audio clips from the project window into this field. OnceMeleeAudioClips Drag and drop melee audio clips from the project window into this field. OnceEmergencyAudioClips Drag and drop emergency audio clips from the project window into this field. OnceDeadBodyInvestigationAudioClips Drag and drop dead body investigation audio clips from the project window into this field. OnceHearingInvestigationAudioClips Drag and drop hearing investigation audio clips from the project window into this field. OnceWoundedAudioClips Drag and drop wounded audio clips from the project window into this field. OnceEnemyLostAudioClips Drag and drop enemy lost audio clips from the project window into this field. OnceTargetKilledAudioClips Drag and drop target killed audio clips from the project window into this field. OnceGrenadeAlertAudioClips Drag and drop grenade alert audio clips from the project window into this field. OnceThrowingGrenadeAudioClips Drag and drop throwing grenade audio clips from the project window into this field. OnceLeaderAtHaltPointAudioClips Drag and drop leader at halt point audio clips from the project window into this field. MinNonRecurringAudioClipsDelay Minimum delay between non-recurring audio clips. Example: '1.0' seconds. MaxNonRecurringAudioClipsDelay Maximum delay between non-recurring audio clips. Example: '2.0' seconds. RecurringSounds Settings for recurring sound clips based on time intervals. Example: 'Default behavior sounds that play at random intervals while the AI is patrolling.' NonRecurringSounds Settings for non-recurring sound clips that play once under specific conditions. Example: 'Emergency state sound that plays once when the AI enters an emergency state.' DyingSounds Settings for dying sound clips that play when the Zombie dies. WeaponSounds Settings for weapon sound clips that play during firing and reloading actions. DefaultFootStepSounds Settings for footstep sound clips that play when the Zombie moves."}]}